Bugs fixed:
-----------
  * The term grammar had the wrong precedences between the
       let v = e in e
    and
       e => e | e
    syntax.  This could be seen in the term
       let v = e1 in e2 => e3 | e4
    which parsed as
       (let v = e1 in e2) => e3 | e4
    Now let is as loose as possible, so that the above term will bind
    with the let having as much scope as possible.  This was a bug
    because it was incompatible with the earlier behaviour of the
    parser (in the Athabasca and hol90 implementations).  All the
    above notwithstanding, we recommend using
        if e1 then e2 else e3
    instead of the "arrow-bar" syntax for conditional expressions.
    Thanks to Steve Brackin for the report of this bug.
  * The datatype parser invoked by define_type and Hol_datatype was
    refusing constructor names with apostrophes (primes) in them.
    Thanks to Steve Brackin for the report of this bug.
  * The record type package was failing to prove the "record
    theorems", causing Hol_datatype to raise an exception, if the name
    of the record type began with an "x" or a "z".  Thanks to Steve
    Brackin for the report of this bug.

New features:
-------------
  * Addition of Q.SPEC_THEN (and others in the same line, such as
    Q.ISPECL_THEN), allows better use of "parsing in goal context"
    when specialising goals.  Where before you might have had to
    write
       SUBST1_TAC (Q.SPEC `x:num` thm)
    you can now write
       Q.SPEC_THEN `x` SUBST1_TAC thm
    and the `x` will be parsed in the context of the current goal,
    something not possible in the first example because the call to
    Q.SPEC happened completely independently of the goal.

New theories:
-------------

New tools:
----------
