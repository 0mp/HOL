use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml");

(******************************************************************************)
(* Some useful REWRITES                                                       *)
(******************************************************************************)

open treeTheory rich_listTheory

val TREE_SUM_def = Define `TREE_SUM =
   TREE_FOLD (0:num, \v vL. (FOLDL (\a b. a + b) 0 ((HD v)::vL)))`

val TREE_SUM_REWRITE = prove (``
   (TREE_SUM leaf = 0) /\
   (TREE_SUM (node v tL) =
    SUM ((HD v)::(MAP TREE_SUM tL)))``,

SIMP_TAC (std_ss++boolSimps.ETA_ss) [TREE_SUM_def, TREE_FOLD_def,
   SUM_FOLDL]);


(******************************************************************************)
(* Parse the main file                                                        *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/tree_sum.dsf"];
val spec_t = parse_holfoot_file file



(******************************************************************************)
(* Verify specification                                                       *)
(******************************************************************************)

(* set_goal ([], spec_t) *)

val param = ([TREE_SUM_REWRITE],[], []);

val spec_thm = holfoot_interactive_verify_spec true 
               {do_case_splits = true,
                do_expands = true,
                fast = true,
                use_asms = true,
                do_prop_simps = true,
                generate_vcs = true} param file


