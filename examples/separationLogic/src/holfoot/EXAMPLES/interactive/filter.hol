use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml");

(******************************************************************************)
(* Some useful REWRITES                                                       *)
(******************************************************************************)

open listTheory rich_listTheory

(******************************************************************************)
(* Parse the main file                                                        *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/filter.dsf"];
val spec_t = parse_holfoot_file file


(******************************************************************************)
(* Verify specification                                                       *)
(******************************************************************************)

(* set_goal ([], spec_t) *)

val spec_thm = prove (spec_t,
  (*do everything till while loop*)
  STEP_TAC_n 1 (SOME 5) THEN
  Tactical.REVERSE CONJ_TAC THEN1 (
     (*body of original function*)
     CONTINUE_TAC (false,false,false,true) THEN
     (*at the beginning of the loop nothing is filtered*)
     REPEAT GEN_TAC THEN Q.EXISTS_TAC `[]` THEN
     SOLVE_TAC THEN
     SIMP_TAC list_ss [GSYM RIGHT_EXISTS_AND_THM, GSYM LEFT_EXISTS_AND_THM,
        GSYM LEFT_FORALL_IMP_THM, FILTER_APPEND] THEN
     SOLVE_TAC THEN
     SIMP_TAC list_ss [NULL_EQ, FILTER_EQ_NIL] THEN
     SOLVE_TAC
  ) THEN

  (* while loop *)
  SOLVE_TAC THEN
  REPEAT STRIP_TAC THENL [
     FULL_SIMP_TAC list_ss [] THEN
     SOLVE_TAC,

     Q.EXISTS_TAC `data_fc'` THEN
     ASM_SIMP_TAC list_ss [NULL_EQ, FILTER_EQ_NIL] THEN
     SOLVE_TAC,

     Q.EXISTS_TAC `data1` THEN
     SOLVE_TAC,

     Q.EXISTS_TAC `data1 ++ [date] ++ data_fc'` THEN
     xSOLVE_TAC ([FILTER_APPEND],[],[]) THEN
     ASM_SIMP_TAC list_ss [NULL_EQ, FILTER_EQ_NIL] THEN
     SOLVE_TAC
  ]
);
