use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml");

(******************************************************************************)
(* Some useful REWRITES                                                       *)
(******************************************************************************)

open treeTheory rich_listTheory pred_setTheory ConseqConv listTheory sortingTheory generalHelpersTheory

val BIN_SEARCH_TREE_SET_defn = Hol_defn "BIN_SEARCH_TREE_SET" 
  `(BIN_SEARCH_TREE_SET leaf keys = (keys = EMPTY)) /\
   (BIN_SEARCH_TREE_SET (node [k] [t1; t2]) keys = 
       ?k1 k2. (keys = k INSERT (k1 UNION k2)) /\
               (!k':num. k' IN k1 ==> k' < k) /\
               (!k':num. k' IN k2 ==> k' > k) /\
               (BIN_SEARCH_TREE_SET t1 k1) /\
               (BIN_SEARCH_TREE_SET t2 k2)) /\
   (BIN_SEARCH_TREE_SET _ _ = F)`;

val (BIN_SEARCH_TREE_SET_def, _) =
Defn.tprove (BIN_SEARCH_TREE_SET_defn,
 Q.EXISTS_TAC `(measure (\ (t,_). MAX_DEPTH t))` THEN
 REWRITE_TAC [prim_recTheory.WF_measure] THEN
 SIMP_TAC arith_ss [prim_recTheory.measure_thm,
                    MEM,
                    MAX_DEPTH___DIRECT_SUBTREES___NODE]);

val BIN_SEARCH_TREE_SET_THM = prove (
 ``(BIN_SEARCH_TREE_SET leaf keys = (keys = EMPTY)) /\
   (BIN_SEARCH_TREE_SET (node v tL) keys = 
       ?k t1 t2 k1 k2. 
               (v = [k]) /\ (tL = [t1;t2]) /\
               (keys = k INSERT (k1 UNION k2)) /\
               (!k':num. k' IN k1 ==> k' < k) /\
               (!k':num. k' IN k2 ==> k' > k) /\
               (BIN_SEARCH_TREE_SET t1 k1) /\
               (BIN_SEARCH_TREE_SET t2 k2))``,

SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_def] THEN
Cases_on `v` THEN SIMP_TAC list_ss [BIN_SEARCH_TREE_SET_def] THEN
Cases_on `t` THEN SIMP_TAC list_ss [BIN_SEARCH_TREE_SET_def] THEN
Cases_on `tL` THEN SIMP_TAC list_ss [BIN_SEARCH_TREE_SET_def] THEN
Cases_on `t` THEN SIMP_TAC list_ss [BIN_SEARCH_TREE_SET_def] THEN
Cases_on `t'` THEN SIMP_TAC list_ss [BIN_SEARCH_TREE_SET_def]);


val BIN_SEARCH_TREE_SET_BIN_THM = prove (
 ``(BIN_SEARCH_TREE_SET leaf keys = (keys = EMPTY)) /\
   (BIN_SEARCH_TREE_SET (node [k] [t1; t2]) keys = 
       ?k1 k2. (keys = k INSERT (k1 UNION k2)) /\
               (!k':num. k' IN k1 ==> k' < k) /\
               (!k':num. k' IN k2 ==> k' > k) /\
               (BIN_SEARCH_TREE_SET t1 k1) /\
               (BIN_SEARCH_TREE_SET t2 k2))``,
SIMP_TAC list_ss [BIN_SEARCH_TREE_SET_THM]);


val BIN_SEARCH_TREE_SET_BIN_REWRITE = prove (
 ``(BIN_SEARCH_TREE_SET leaf keys = (keys = EMPTY)) /\
   (BIN_SEARCH_TREE_SET (node [k] [t1; t2]) keys = 
       ?k1 k2. (keys = k INSERT (k1 UNION k2)) /\
               (!k':num. k' IN k1 ==> k' < k) /\
               (!k':num. k' IN k2 ==> k' > k) /\
               ~(k IN k1) /\ ~(k IN k2) /\
               (!k. ~(k IN k1) \/ ~(k IN k2)) /\
               (!k k'. k IN k1 /\ k' IN k2 ==> k < k') /\ 
               (BIN_SEARCH_TREE_SET t1 k1) /\
               (BIN_SEARCH_TREE_SET t2 k2))``,

SIMP_TAC list_ss [BIN_SEARCH_TREE_SET_BIN_THM] THEN
REDEPTH_CONSEQ_CONV_TAC (K EXISTS_EQ___CONSEQ_CONV) THEN
SIMP_TAC (std_ss++boolSimps.EQUIV_EXTRACT_ss) [] THEN
REPEAT STRIP_TAC THENL [
   RES_TAC THEN DECIDE_TAC,
   RES_TAC THEN DECIDE_TAC,

   CCONTR_TAC THEN FULL_SIMP_TAC std_ss [] THEN
   RES_TAC THEN DECIDE_TAC,

   RES_TAC THEN DECIDE_TAC
]);


val BIN_SEARCH_TREE_SET_EMPTY_KEYS = prove (
 ``BIN_SEARCH_TREE_SET data EMPTY = (IS_LEAF data)``,
Cases_on `data` THEN
  SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_THM, IS_LEAF_REWRITE,
     NOT_EMPTY_INSERT, tree_distinct]
);




(******************************************************************************)
(* Parse the main file                                                        *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/binary_search_tree.dsf2"];
val spec_t = parse_holfoot_file file

fun init_fun file f =
   ((set_goal ([], parse_holfoot_file_restrict [f] file));
   (e (HOLFOOT_SPECIFICATION_TAC THEN REPEAT CONJ_TAC)));


(******************************************************************************)
(* Verify specification                                                       *)
(******************************************************************************)
(* init_fun file "search_tree_delete_min" *)
val search_tree_delete_min_TAC =
   SOLVE_TAC THEN
   REPEAT STRIP_TAC THEN
   (*tree not empty because keys != EMPTY*)
   Cases_on `p_const = 0` THEN1 (
      SOLVE_TAC THEN
      REPEAT STRIP_TAC THEN
      FULL_SIMP_TAC std_ss [IS_LEAF_REWRITE, BIN_SEARCH_TREE_SET_def]
   ) THEN
   (*Ok, now the real case *)
   STEP_TAC 1 THEN
   REPEAT CONJ_TAC THENL [
      (*skipping the loop*)
      VC_SOLVE_TAC THEN ELIM_COMMENTS_TAC THEN
      MATCH_MP_TAC (prove (``((A ==> B) /\ A) ==> (A /\ B)``, METIS_TAC[])) THEN
      CONJ_TAC THEN1 METIS_TAC[] THEN
      SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_BIN_REWRITE,
         NOT_IN_EMPTY, UNION_EMPTY, GSYM LEFT_FORALL_IMP_THM,
         IN_INSERT, DISJ_IMP_THM, FORALL_AND_THM] THEN
      REPEAT STRIP_TAC THENL [
         Tactical.REVERSE (`(dc INSERT k2) DELETE dc = k2` by ALL_TAC) THEN1 (
            ASM_REWRITE_TAC[]
         ) THEN
         SIMP_TAC std_ss [EXTENSION, IN_INSERT, IN_DELETE] THEN
         METIS_TAC[],

         RES_TAC THEN DECIDE_TAC
      ],


      (*iterate through the loop*)
      STEP_TAC_n 1 (SOME 3) THEN
      REPEAT (POP_ASSUM (K ALL_TAC)) THEN
      REPEAT STRIP_TAC THEN
      Q.PAT_ASSUM `BIN_SEARCH_TREE_SET X keys` (
           STRIP_ASSUME_TAC o ONCE_REWRITE_RULE [BIN_SEARCH_TREE_SET_BIN_REWRITE]) THEN
      STEP_TAC 2 THEN REPEAT GEN_TAC THEN
      MAP_EVERY Q.EXISTS_TAC [`data_l_l'`, `data_l_r'`, `lc_dta'`,
         `dc`, `k1`] THEN
      Cases_on `p_const = 0` THEN1 (
         ASM_SIMP_TAC std_ss [] THEN
         CONTINUE_TAC (false, false, false, true)
      ) THEN
      CONTINUE_TAC (false, false, false, true) THEN
      Cases_on `ppc = 0` THEN (
         ASM_SIMP_TAC std_ss [] THEN
         CONTINUE_TAC (false, false, false, true) THEN
         REPEAT STRIP_TAC THEN
         FULL_SIMP_TAC std_ss [] THEN
         CONTINUE_TAC (false, false, false, true) THEN
         PURE_VC_TAC THEN ELIM_COMMENTS_TAC THEN
         ASM_SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_BIN_REWRITE,
            IN_INSERT, IN_DELETE, IN_UNION, DISJ_IMP_THM, FORALL_AND_THM,
            GSYM LEFT_EXISTS_AND_THM, GSYM RIGHT_EXISTS_AND_THM] THEN
         REPEAT STRIP_TAC THEN
         MAP_EVERY Q.EXISTS_TAC [`k1 DELETE mk`, `k2`] THEN
         ASM_SIMP_TAC std_ss [IN_DELETE, EXTENSION, IN_INSERT, IN_UNION] THEN
         REPEAT STRIP_TAC THENL [
            METIS_TAC[],
            METIS_TAC[],
	    RES_TAC THEN DECIDE_TAC,
	    RES_TAC THEN DECIDE_TAC
         ]
      ),

      (*main program*)
      VC_SOLVE_TAC THEN ELIM_COMMENTS_TAC THEN
      REPEAT STRIP_TAC THEN
      Q.EXISTS_TAC `keys` THEN ASM_SIMP_TAC std_ss []
   ]



(* init_fun file "search_tree_lookup" *)
val search_tree_lookup_TAC =
   CONTINUE_TAC (true, false, false, true) THEN
   ELIM_COMMENTS_TAC THEN
   REPEAT CONJ_TAC THENL [
      SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_def, NOT_IN_EMPTY, IN_INSERT,
         LEFT_AND_OVER_OR, DISJ_IMP_THM, BOOL_TO_NUM_REWRITE],

      REPEAT STRIP_TAC THEN
      Q.EXISTS_TAC `keys'` THEN
      ASM_SIMP_TAC std_ss [] THEN
      FULL_SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_BIN_REWRITE, IN_INSERT],


      REPEAT STRIP_TAC THEN
      FULL_SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_BIN_REWRITE, arithmeticTheory.GREATER_DEF] THEN
      Q.EXISTS_TAC `k1` THEN
      ASM_SIMP_TAC std_ss [IN_INSERT, IN_UNION] THEN
      METIS_TAC[arithmeticTheory.LESS_ANTISYM],

      REPEAT STRIP_TAC THEN
      FULL_SIMP_TAC std_ss [BIN_SEARCH_TREE_SET_BIN_REWRITE, arithmeticTheory.GREATER_DEF] THEN
      Q.EXISTS_TAC `k2` THEN
      ASM_SIMP_TAC std_ss [IN_INSERT, IN_UNION] THEN
      METIS_TAC[arithmeticTheory.LESS_ANTISYM],

      REPEAT STRIP_TAC THEN
      Q.EXISTS_TAC `keys` THEN
      ASM_SIMP_TAC std_ss [IN_INSERT]
   ];


val spec_t = parse_holfoot_file file

val main_thm = prove (spec_t,
HOLFOOT_SPECIFICATION_TAC THEN
REPEAT CONJ_TAC THENL [
   search_tree_delete_min_TAC,
   search_tree_lookup_TAC
])
