use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml");

(******************************************************************************)
(* Useful theorems                                                            *)
(******************************************************************************)

(******************************************************************************)
(* Parse the main file                                                        *)
(******************************************************************************)

val file = concat [examplesDir, "/interactive/circular_list.sf"];
val spec_t = parse_holfoot_file file


(******************************************************************************)
(* Verify specification                                                       *)
(******************************************************************************)

(* set_goal ([], spec_t) *)


val spec_thm = prove (spec_t,
SOLVE_TAC THEN
REPEAT STRIP_TAC THENL [
   (* enqueue, provide witness the automation can't guess *)
   Q.EXISTS_TAC `r_const'` THEN
   SOLVE_TAC,

   (* Case split on wither the list from tf'' to b'' is empty or not,
      i.e. wether the cirular list has just one element *)
   Cases_on `b' = tf` THEN
   SOLVE_TAC 
]);


(*or alternatively*)
val imp_thm = holfoot_interactive_verify_spec true 
   {do_case_splits = true,
    fast = true,
    use_asms = true,
    do_prop_simps = true,
    generate_vcs = false} ([],[],[]) file
val spec_thm = holfoot_prove_remaining (imp_thm, 
REPEAT STRIP_TAC THENL [
   (* enqueue, provide witness the automation can't guess *)
   Q.EXISTS_TAC `r_const'` THEN
   SOLVE_TAC,

   (* Case split on wither the list from tf'' to b'' is empty or not,
      i.e. wether the cirular list has just one element *)
   Cases_on `b' = tf` THEN
   SOLVE_TAC
]);

