(******************************************************************************)
(* Holfoot can proof partial correctness of programs using separation logic.  *)
(*                                                                            *)
(* The entire proof is done using HOL 4. This includes not just the the       *)
(* proof of some verification conditions, but the whole proof. This includes  *)
(* formal definitions of the programming and specification language as well   *)
(* as verified inferences.                                                    *)
(******************************************************************************)

(******************************************************************************)
(* Boilerplate (Load everything)                                              *)
(******************************************************************************)

(* load the libries
use (Globals.HOLDIR ^ "/examples/separationLogic/src/holfoot/header.sml")
*)

val _ = HOL_Interactive.toggle_quietdec();

open listTheory rich_listTheory arithmeticTheory

val _ = HOL_Interactive.toggle_quietdec();


(******************************************************************************)
(* Verify specification - loopspec                                            *)
(******************************************************************************)

(* Assing the filename of the spec to variable file *)
val file = concat [examplesDir, "/vstte/vscomp3-loopspec.dsf"];

(* holfoot_set_goal_procedures file ["vscomp3"] *)
val vscomp3_loopspec_TAC =
    (*run automation *)
    HF_CONTINUE_TAC THEN

    (* clean up the goal a bit *)
    REPEAT STRIP_TAC THEN
    HF_VC_TAC THEN

    (* a bit of arithmetic reasoning and a case split *)
    `i_const - old_i = SUC ( i_const âˆ’ (old_i + 1))` by DECIDE_TAC THEN
    ASM_SIMP_TAC list_ss [] THEN
    Cases_on `n` THEN FULL_SIMP_TAC list_ss []



(* put everything together *)       
val thm1 = holfoot_tac_verify_spec file NONE
                   [("vscomp3", vscomp3_loopspec_TAC)];


(******************************************************************************)
(* Verify specification - invariant                                           *)
(******************************************************************************)

(* Assing the filename of the spec to variable file *)
val file2 = concat [examplesDir, "/vstte/vscomp3-invariant.dsf"];

(* holfoot_set_goal_procedures file ["vscomp3"] *)
val vscomp3_invariant_TAC =
    (*run automation *)
    HF_SOLVE_TAC THEN

    (* clean up the goal a bit *)
    HF_VC_TAC THEN
   
    SIMP_TAC list_ss [EL_APPEND1, EL_APPEND2,
        EVERY_MEM, MEM_EL, GSYM LEFT_FORALL_IMP_THM] THEN
    METIS_TAC[]


(* put everything together *)       
val thm2 = holfoot_tac_verify_spec file2 NONE
                   [("vscomp3", vscomp3_invariant_TAC)];


