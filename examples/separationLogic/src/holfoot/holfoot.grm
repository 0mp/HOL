open Parsetree;

exception Not_distinct;

fun check_distinct il =
  let
	val is = ref (Binaryset.empty String.compare)
	fun f i = if Binaryset.member (!is,i) then
			raise Not_distinct
		     else
			is := Binaryset.add (!is, i)
  in
	List.app f il
  end;


fun mk_formal_params (rl,vl) =
  (check_distinct (rl@vl); (rl,vl));

exception Parameters_not_variables
fun mk_ref_params cel =
  let
	fun check_par (Pexp_ident i) = i |
	      check_par _ = raise Parameters_not_variables
        val il = List.map check_par cel
  in
  (check_distinct il; il)
  end;



(* default component tags *)
val list_data_tag = "hd";
val data_list_tag = "dta";
val list_link_tag = "tl"
val tree_data_tag = "dta"
val tree_link_tags = ("l", "r")
val (dl_Llink_tag,dl_Rlink_tag) = tree_link_tags


%%
%name Holfoot
%eop EOF
%term AMPERAMPER 
  |  BANGEQUAL
  |  BARBAR
  |  COLON
  |  COMMA
  |  DISPOSE
  |  DLSEG
  |  ELSE
  |  EMPTY
  |  EOF
  |  EQUAL
  |  EQUALEQUAL
  |  FF
  |  IDENT of string
  |  QIDENT of string
  |  IF
  |  HOL_TERM of string
  |  INFIXOP1 of string
  |  INFIXOP2 of string
  |  INFIXOP3 of string
  |  LBRACE
  |  LBRACKET
  |  LIST
  |  LISTSEG
  |  DATA_LIST
  |  DATA_LISTSEG
  |  LOCAL
  |  LPAREN
  |  MINUSGREATER
  |  NAT of int
  |  NULL
  |  NEW
  |  POINTSTO
  |  RBRACE
  |  RBRACKET
  |  RESOURCE
  |  RPAREN
  |  SEMI
  |  STAR
  |  IFTHEN
  |  TREE
  |  DATA_TREE
  |  AND
  |  OR
  |  NOT
  |  TT
  |  WHEN
  |  WHILE
  |  WITH
  |  XLSEG
  |  XOR
  |  ASSUME
  |  WRITEREAD
  |  BANGWRITEREAD
  |  below_ELSE
  |  unary_prefix


(* precedences (increasing) and associativities for expressions *)

%nonassoc below_ELSE
%nonassoc ELSE
%left STAR AMPERAMPER
%left EQUALEQUAL BANGEQUAL
%left INFIXOP1 EQUAL
%left INFIXOP2
%left INFIXOP3 XOR POINTSTO
%nonassoc unary_prefix

(* entry points *)

%nonterm 
     program of Parsetree.p_program
  |  a_proposition of Parsetree.a_proposition
  |  program_item_star of Parsetree.p_item list
  |  program_item of Parsetree.p_item
  |  fun_decl of Parsetree.p_item
  |  read_write_decl of (bool * string list * string list) option
  |  resource_decl of Parsetree.p_item
  |  ident_decl of string list
  |  ident_seq of string list
  |  ident_notempty_seq of string list
  |  local_decls of string list
  |  formal_params of string list * string list
  |  actual_params of string list * Parsetree.p_expression list
  |  invariant of Parsetree.a_proposition option
  |  statement_star of Parsetree.p_statement list
  |  statement of Parsetree.p_statement
  |  condition of Parsetree.p_condition
  |  expression of Parsetree.p_expression
  |  expression_seq of Parsetree.p_expression list
  |  expression_notempty_seq of Parsetree.p_expression list
  |  a_expression of Parsetree.a_expression
  |  a_space_pred of Parsetree.a_space_pred
  |  a_component_expression_seq of (string * Parsetree.a_expression) list
  |  a_component_expression_notempty_seq of (string * Parsetree.a_expression) list
  |  data_list_exp of string

%start program
%pos (int * int)



%%

program :
    program_item_star
      ( Pprogram ([list_data_tag, list_link_tag,
		   tree_data_tag,
		   #1 tree_link_tags, #2 tree_link_tags],
        	   program_item_star) )
  | ident_decl program_item_star ( Pprogram (ident_decl,program_item_star) )

program_item_star :
    (* empty *)            ( [] )
  | EOF                    ( [] )
  | program_item program_item_star ( program_item::program_item_star )

program_item :
    fun_decl ( fun_decl )
  | resource_decl (resource_decl )


read_write_decl:
    (* empty *) ( NONE )
  | WRITEREAD ident_seq SEMI ident_seq RBRACKET ( SOME (false, ident_seq1, ident_seq2) )
  | BANGWRITEREAD ident_seq SEMI ident_seq RBRACKET ( SOME (true, ident_seq1, ident_seq2) )

fun_decl :
    IDENT LPAREN formal_params RPAREN read_write_decl invariant LBRACE local_decls statement_star RBRACE invariant
      ( Pfundecl(true, IDENT,formal_params,read_write_decl,invariant1,local_decls,statement_star,invariant2) )
  | ASSUME IDENT LPAREN formal_params RPAREN read_write_decl invariant LBRACE local_decls statement_star RBRACE invariant
      ( Pfundecl(false, IDENT,formal_params,read_write_decl,invariant1,local_decls,statement_star,invariant2) )
  | ASSUME IDENT LPAREN formal_params RPAREN read_write_decl invariant invariant
      ( Pfundecl(false, IDENT,formal_params,read_write_decl, invariant1,[],[],invariant2) )

resource_decl:
    RESOURCE IDENT LPAREN ident_seq RPAREN LBRACKET a_proposition RBRACKET
      ( Presource(IDENT,ident_seq,a_proposition) )

ident_decl:
    ident_seq SEMI ( ident_seq )


ident_seq:
    (* empty *)      ( [] )
  | ident_notempty_seq ( ident_notempty_seq )


ident_notempty_seq:
    IDENT            ( [IDENT] )
  | IDENT COMMA ident_notempty_seq ( IDENT::ident_notempty_seq )


local_decls:
    (* empty *)              ( [] )
  | LOCAL ident_notempty_seq SEMI local_decls ( ident_notempty_seq @ local_decls )


statement_star:
    (* empty *)              ( [] )
  | statement statement_star ( statement::statement_star )


statement:
    IDENT EQUAL expression SEMI
	  ( Pstm_assign(IDENT, expression) )
  | IDENT EQUAL expression MINUSGREATER IDENT SEMI
	  ( Pstm_fldlookup(IDENT1, expression, IDENT2) )
  | expression MINUSGREATER IDENT EQUAL expression SEMI
	  ( Pstm_fldassign(expression1, IDENT, expression2) )
  | IDENT EQUAL NEW LPAREN RPAREN SEMI
	  ( Pstm_new(IDENT) )
  | DISPOSE expression SEMI
          ( Pstm_dispose(expression) )
  | LBRACE statement_star RBRACE
	  ( Pstm_block(statement_star) )
  | IF LPAREN condition RPAREN statement %prec below_ELSE
	  ( Pstm_if(condition, statement, Pstm_block []) )
  | IF LPAREN condition RPAREN statement ELSE statement
	  ( Pstm_if(condition, statement1, statement2) )
  | WHILE LPAREN condition RPAREN read_write_decl invariant statement
	  ( Pstm_while(read_write_decl, invariant, condition, statement) )
  | WITH IDENT WHEN LPAREN condition RPAREN statement
          ( Pstm_withres(IDENT,condition,statement) )
  | IDENT LPAREN actual_params RPAREN SEMI
          ( Pstm_fcall(IDENT,actual_params) )
  | IDENT LPAREN actual_params RPAREN
    BARBAR
    IDENT LPAREN actual_params RPAREN SEMI
          ( Pstm_parallel_fcall(IDENT1,actual_params1,IDENT2,actual_params2) )


invariant:
    (* empty *)
          ( NONE )
  | LBRACKET a_proposition RBRACKET
          ( SOME a_proposition )


condition:
    TT
          ( (Pcond_true) )
  | FF
          ( (Pcond_false) )
  | LPAREN condition RPAREN
	  ( condition )
  | NOT condition 
	  ( Pcond_neg condition )
  | condition AND condition 
	  ( Pcond_and(condition1,condition2) )
  | condition OR condition 
	  ( Pcond_and(condition1,condition2) )
  | expression EQUALEQUAL expression
	  ( (Pcond_compare("==", expression1, expression2)) )
  | expression BANGEQUAL expression
	  ( (Pcond_compare("!=", expression1, expression2)) )
  | expression INFIXOP1 expression
	  ( (Pcond_compare(INFIXOP1, expression1, expression2)) )


expression:
    IDENT
	  ( (Pexp_ident(IDENT)) )
  | QIDENT
	  ( (Pexp_ident(QIDENT)) )
  | NAT
	  ( (Pexp_num(NAT)) )
  | LPAREN expression RPAREN
	  ( expression )
  | INFIXOP2 expression %prec unary_prefix
	  ( (Pexp_prefix(INFIXOP2, expression)) )
  | expression AMPERAMPER expression
	  ( (Pexp_infix("&&", expression1, expression2)) )
  | expression STAR expression
	  ( (Pexp_infix("*", expression1, expression2)) )
  | expression XOR expression
	  ( (Pexp_infix("^", expression1, expression2)) )
  | expression INFIXOP2 expression
	  ( (Pexp_infix(INFIXOP2, expression1, expression2)) )
  | expression INFIXOP3 expression
	  ( (Pexp_infix(INFIXOP3, expression1, expression2)) )


expression_seq:
    (* empty *)      ( [] )
  | expression_notempty_seq ( expression_notempty_seq )


expression_notempty_seq:
    expression            ( [expression] )
  | expression COMMA expression_notempty_seq ( expression::expression_notempty_seq )


formal_params:
    ident_seq ( mk_formal_params ([],ident_seq) )
  | ident_seq SEMI ident_seq ( mk_formal_params (ident_seq1,ident_seq2) )


actual_params:
    expression_seq ( ([],expression_seq) )
  | expression_seq SEMI expression_seq ( (mk_ref_params expression_seq1, expression_seq2) )


a_component_expression_seq:
    (* empty *)      ( [] )
  | LBRACKET RBRACKET   ( [] )
  | a_component_expression_notempty_seq ( a_component_expression_notempty_seq )
  | LBRACKET a_component_expression_notempty_seq RBRACKET ( a_component_expression_notempty_seq )


a_component_expression_notempty_seq:
    IDENT COLON a_expression            ( [(IDENT,a_expression)] )
  | IDENT COLON a_expression COMMA a_component_expression_notempty_seq ( (IDENT,a_expression)::a_component_expression_notempty_seq )



a_space_pred:
    LIST LPAREN IDENT SEMI a_expression RPAREN
	  ( Aspred_list(IDENT,a_expression) )
  | LIST LPAREN a_expression RPAREN
	  ( Aspred_list(list_link_tag, a_expression) )
  | DATA_LIST LPAREN IDENT SEMI a_expression COMMA data_list_exp RPAREN
	  ( Aspred_data_list(IDENT,a_expression,data_list_tag,data_list_exp) )
  | DATA_LIST LPAREN a_expression COMMA data_list_exp RPAREN
	  ( Aspred_data_list(list_link_tag,a_expression,data_list_tag,data_list_exp) )
  | DATA_LIST LPAREN IDENT SEMI a_expression COMMA IDENT COLON data_list_exp RPAREN
	  ( Aspred_data_list(IDENT1,a_expression,IDENT2,data_list_exp) )
  | DATA_LIST LPAREN a_expression COMMA IDENT COLON data_list_exp RPAREN
	  ( Aspred_data_list(list_link_tag,a_expression,IDENT,data_list_exp) )
  | LISTSEG LPAREN IDENT SEMI a_expression COMMA a_expression RPAREN
	  ( Aspred_listseg(IDENT,a_expression1,a_expression2) )
  | LISTSEG LPAREN a_expression COMMA a_expression RPAREN
	  ( Aspred_listseg(list_link_tag, a_expression1, a_expression2) )
  | DATA_LISTSEG LPAREN IDENT SEMI a_expression COMMA data_list_exp COMMA a_expression RPAREN
	  ( Aspred_data_listseg(IDENT,a_expression1,data_list_tag,data_list_exp,a_expression2) )
  | DATA_LISTSEG LPAREN IDENT SEMI a_expression COMMA IDENT COLON data_list_exp COMMA a_expression RPAREN
	  ( Aspred_data_listseg(IDENT1,a_expression1,IDENT2,data_list_exp,a_expression2) )
  | DATA_LISTSEG LPAREN a_expression COMMA data_list_exp COMMA a_expression RPAREN
	  ( Aspred_data_listseg(list_link_tag,a_expression1,data_list_tag,data_list_exp,a_expression2) )
  | DATA_LISTSEG LPAREN a_expression COMMA IDENT COLON data_list_exp COMMA a_expression RPAREN
	  ( Aspred_data_listseg(list_link_tag,a_expression1,IDENT,data_list_exp,a_expression2) )
  | DLSEG LPAREN IDENT SEMI IDENT SEMI a_expression COMMA a_expression COMMA a_expression COMMA a_expression RPAREN
	  ( Aspred_dlseg(DL,IDENT1,a_expression1,a_expression2,IDENT2,a_expression3,a_expression4) )
  | DLSEG LPAREN a_expression COMMA a_expression COMMA a_expression COMMA a_expression RPAREN
	  ( Aspred_dlseg(DL, dl_Rlink_tag, a_expression1, a_expression2, dl_Llink_tag,a_expression3, a_expression4) )
  | XLSEG LPAREN IDENT SEMI IDENT SEMI a_expression COMMA a_expression COMMA a_expression COMMA a_expression RPAREN
	  ( Aspred_dlseg(XL,IDENT1,a_expression1,a_expression2,IDENT2,a_expression3,a_expression4) )
  | XLSEG LPAREN a_expression COMMA a_expression COMMA a_expression COMMA a_expression RPAREN
	  ( Aspred_dlseg(XL, dl_Llink_tag, a_expression1, a_expression2, dl_Llink_tag,a_expression3, a_expression4) )
  | TREE LPAREN IDENT COMMA IDENT SEMI a_expression RPAREN
          ( Aspred_tree(IDENT1,IDENT2,a_expression) )
  | TREE LPAREN a_expression RPAREN
          ( Aspred_tree(#1 tree_link_tags, #2 tree_link_tags,
			a_expression) )
  | DATA_TREE LPAREN IDENT COMMA IDENT SEMI a_expression SEMI IDENT COMMA data_list_exp RPAREN
	  ( Aspred_data_tree(IDENT1,IDENT2,a_expression,IDENT3,data_list_exp) )
  | DATA_TREE LPAREN a_expression SEMI IDENT COMMA data_list_exp RPAREN 
	  ( Aspred_data_tree(#1 tree_link_tags,#2 tree_link_tags,a_expression,IDENT,data_list_exp) )
  | DATA_TREE LPAREN a_expression SEMI data_list_exp RPAREN
	  ( Aspred_data_tree(#1 tree_link_tags,#2 tree_link_tags,a_expression,tree_data_tag,data_list_exp) )
  | EMPTY
          ( Aspred_empty )
  | HOL_TERM
          ( Aspred_hol HOL_TERM )
  | a_expression POINTSTO a_component_expression_seq
          ( Aspred_pointsto(a_expression,a_component_expression_seq) )
  | a_expression POINTSTO a_expression
          ( Aspred_pointsto(a_expression1,[(list_link_tag, a_expression2)]) )
  | a_expression POINTSTO a_expression COMMA a_expression
          ( Aspred_pointsto(a_expression1,[(#1 tree_link_tags, a_expression2),
				(#2 tree_link_tags, a_expression3)]) )
  | LPAREN a_space_pred RPAREN
	  ( a_space_pred )



a_proposition:
    LPAREN a_proposition RPAREN
	  ( a_proposition )
  | a_expression EQUALEQUAL a_expression
	  ( Aprop_infix("==",a_expression1,a_expression2) )
  | a_expression BANGEQUAL a_expression
	  ( Aprop_infix("!=",a_expression1,a_expression2) )
  | a_expression INFIXOP1 a_expression
	  ( (Aprop_infix(INFIXOP1, a_expression1, a_expression2)) )
  | FF
	  ( Aprop_false )
  | a_proposition STAR a_proposition
          ( Aprop_star(a_proposition1,a_proposition2) )
  | IF a_proposition IFTHEN a_proposition ELSE a_proposition
      ( Aprop_ifthenelse(a_proposition1,a_proposition2,a_proposition3) )  
  | a_space_pred
          ( Aprop_spred a_space_pred )



a_expression:
    LPAREN a_expression RPAREN            ( a_expression )
  | a_expression XOR a_expression         ( Aexp_infix("^",a_expression1,a_expression2) )
  | IDENT                                 ( Aexp_ident(IDENT) )
  | QIDENT                                ( Aexp_ident(QIDENT) )
  | NAT                                   ( Aexp_num(NAT) )
  | HOL_TERM                              ( Aexp_hol HOL_TERM )


data_list_exp:
    IDENT                                 ( IDENT )
  | HOL_TERM                              ( HOL_TERM )




