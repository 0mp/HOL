
This file documents newOpsemScript.sml, an extension of the
Melham-Camilleri opsem example distributed with HOL4 in
HOL/examples/ind_def/opsemScript.sml.

 Tom Melham:        http://web.comlab.ox.ac.uk/Tom.Melham/
 Juanito Camilleri: http://www.um.edu.mt/about/uom/administration

The extensions are:

 1. New commands:
     - blocks with local variables (Local v c)
     - deallocation (Dispose s)
     - arrays
     - procedures (Proc f) where f : state -> state

 2. A small-step semantics proved equivalent to the original big-step
    semantics and a function, STEP, to run the small-step semantics

 3. Executable ACL2-style "clocked" evaluators for both semantics.
    (see: http://www.cl.cam.ac.uk/~mjcg/papers/acl207/acl2.mjcg.07.pdf)

 4. A small step constraint-accumulating semantics based on the
    Collavizza, Rueher and Van Hentenryck CPBPV paper

The big-step semantics is given by an inductively defined relation
EVAL such that EVAL c s1 s2 means that if command c is executed in a
state s1 then it will halt in a state s2. The definition of EVAL is
adapted from opsemScript.sml (details below).

**********************************************************************
N.B.  Do not confuse the HOL constant ``EVAL`` with the ML function
****  having the same name!  The HOL constant defines the big-step 
      semantics in the HOL logic, the ML function is a meta-language 
      tool for evaluating terms using fast call-by-value rewriting.
**********************************************************************

The small-step semantics specifies transitions between configurations
of the form (l,s), where l is a HOL list of commands and s is a
state. The semantics is given by an inductively defined relation
SMALL_EVAL such that SMALL_EVAL (l1,s1) (l2,s2) means that a single
step moves configuration (l1,s1) to configuration (l2,s2).

The transitive closure of the small-step semantics (TC SMALL_STEP)
corresponds to the big-step semantics. This is proved in HOL as the
theorem EVAL_SMALL_EVAL:
 
  |- !c s1 s2. EVAL c s1 s2 = TC SMALL_EVAL ([c],s1) ([],s2)

ACL2-style clocked evaluators are defined for both semantics:
RUN for the big-step semantics and STEP for the small-step semantics. 

 RUN :  num -> program -> state -> outcome
 STEP:  num -> (program list # state) -> (program list # outcome)

here outcome is a HOL datatype defined by:

 Hol_datatype 
  `outcome = RESULT of state | ERROR of state | TIMEOUT of state`;

where:

 -  RESULT s  is a successful execution terminating in state s;
 -  ERROR s   is a runtime assertion failure when the state is s;
 -  TIMEOUT s indicates that the clock ran out in state s.

To handle the propagation of errors and timeouts cleanly, a monad-like
sequencing operator >>= is defined so that:

 RUN (SUC n) (Seq c1 c2) s = RUN n c1 s >>= RUN n c2

where the operator >>= is defined (RUN_BIND_def) by:

 |- !m f. m >>= f =
          case m of
             RESULT s'' -> f s''
          || ERROR s'   -> ERROR s'
          || TIMEOUT s  -> TIMEOUT s

If RUN_RETURN is defined by:

 |- !x. RUN_RETURN x = RESULT x 

then the usual monad laws hold (RUN_MONAD_LAWS):

 |- (RUN_RETURN x >>= f = f x) 
    /\ 
    (m >>= RUN_RETURN = m)
    /\
    (m >>= f >>= g  =  m >>= (\x. f x >>= g)) 

Monad-syle operators are also used for the small-step execution
function (STEP_BIND, STEP_RETURN) and for small-step constraint
propagation (ACC_STEP_BIND, ACC_STEP_RETURN). It would be nice if
these could be instances of a single monad definition, but the HOL
type system doesn't allow this, so they are separate definitions, with
the separate sequencing operators overloaded onto >>=. It is hoped
that Peter Homeier's HOL-Omega might allow a proper treatment of
monads.

The theorem EVAL_RUN, proved below, shows that the definition of RUN
matches the big-step semantics defined by EVAL:

 |- !c s1 s2. EVAL c s1 s2 = ?n. RUN n c s1 = RESULT s2 

The theorem NOT_EVAL_RUN proved below shows that executing a command
with RUN in a state for which there is no final state specified by the
big-step semantics always returns an ERROR or TIMEOUT outcome.

 |- !c s1.
     ~(?s2. EVAL c s1 s2) =
     !n. ?s2. (RUN n c s1 = ERROR s2) \/ (RUN n c s1 = TIMEOUT s2)

The small-step execution function STEP repeatedly applies a
single-step function STEP1:  

 STEP1 : program list # state -> program list # outcome

STEP1(l1,s) = (l2,r) means that executing one step of the command at
the head of l results in (l2,r), where l2 are the remaining commands
to be executed and r:outcome is the result. STEP takes a ACL2-style
`clock' and applies STEP1 for the given number of `ticks', thus:

 STEP : num -> program list # state -> program list # outcome

Because STEP1 may return an error or timeout, the sequencing of STEP1
to defined STEP is accomplished using a monad-style operator
(overloaded onto >>=):

 |- !m f. m >>= f =
          case m of
             (l,RESULT s'') -> f (l,s'')
          || (l,ERROR s')   -> (l,ERROR s')
          || (l,TIMEOUT s)  -> (l,TIMEOUT s)

STEP is defined (STEP_def) by:

 |- STEP n (l,s) =
     if l = [] 
      then ([],RESULT s)
      else if n = 0 then (l,TIMEOUT s) 
                    else STEP1 (l,s) >>= STEP (n - 1)

The theorem TC_SMALL_EVAL_STEP, proved below, shows that the
definition of STEP matches the transitive closure of the small-step
semantics defined by SMALL_EVAL:

 |- !c s1 s2.
     TC SMALL_EVAL ([c],s1) ([],s2) = ?n. STEP n ([c],s1) = ([],RESULT s2)

The theorem NOT_SMALL_EVAL_STEP proved below shows that executing a
command with STEP in a state for which there is no final state
reachable under the transitive closure of the small-step semantics
always returns an ERROR or TIMEOUT outcome.

  |- !c s1.
      ~(?s2. TC SMALL_EVAL ([c],s1) ([],s2)) =
      !n. ?l s2.
           (STEP n ([c],s1) = (l,ERROR s2)) 
           \/ 
           (STEP n ([c],s1) = (l,TIMEOUT s2))

Combining EVAL_SMALL_EVAL, EVAL_RUN and TC_SMALL_EVAL_STEP shows that
RUN and STEP compute the same results (proved as RUN_STEP below):

 |- !c s1 s2.
     (?n. RUN n c s1 = RESULT s2) = 
     (?n. STEP n ([c],s1) = ([],RESULT s2))

Note that we have *not* yet proved the following results relating the
ERROR and TIMEOUT outcomes of RUN and STEP, but it is assumed they
could be proved, if needed.

 |-? !c s1 s2.
      (?n. RUN n c s1 = ERROR s2) = 
      (?n. STEP n ([c],s1) = ([],ERROR s2))

 |-? !c s1.
      (!n. ?s2. RUN n c s1 = TIMEOUT s2) = 
      (!n. ?s2. STEP n ([c],s1) = ([],TIMEOUT s2))

The values manipulated by programs represented in HOL are either
scalars (currently values of type int) and arrays (currently finite
maps of type num |-> int). Thus:

 Hol_datatype 
  `value = Scalar of int | Array  of (num |-> int)`

The function ScalarOf projects values to scalars:

 |- ScalarOf(Scalar n) = n

States are finite maps of type string |-> value. Thus the value of a
scalar variable "i" in a state s is: ScalarOf(s ' "i").

To compute formulas representing paths in HOL a function ACC_STEP1 is
defined such that ACC_STEP1 ((l1,s),p1) = ((l2,r),p2) means that
executing the configuration (l1,s) with precondition p1 results in a
configuration (l2,r) and an accumulated postcondition p2. Here s is a
state and r an outcome, as described for STEP.  There is likely to be
a close elationship between ACC_STEP1 and Floyd's strongest
post-conditions, but this hasn't been explored yet.
(The "ACC" is for "accumulate ", as path conditions are accumulated.)
Thus:

  ACC_STEP1 : (program list # state) # (state -> bool) 
              ->
              (program list # outcome) # (state -> bool)

Preconditions and path formulas are represented in HOL as predicates
on state. For example, the precondition that i < j is represented by:

 \s. ScalarOf(s ' "i") < ScalarOf(s ' "j")

To combine single path-accumulating steps specified by ACC_STEP1 into
into executions of complete paths through a program, another
monad-style operator (ACC_STEP_BIND) is defined and overloaded on >>=.

 |- m >>= f =
    case m of
       ((l,RESULT s''),p) -> f ((l,s''),p)
    || ((l,ERROR s'),p)   -> ((l,ERROR s'),p)
    || ((l,TIMEOUT s),p)  -> ((l,TIMEOUT s),p)

and then an `clocked' function for iterating ACC_STEP1 a finite number
of times is defined by:

  |- (ACC_STEP n (([],s),p)      = (([], RESULT s), p))
     /\
     (ACC_STEP 0 ((l,s),p)       = ((l, TIMEOUT s), p))
     /\
     (ACC_STEP (SUC n) ((l,s),p) = ACC_STEP1 ((l,s),p) >>=  ACC_STEP n)

The correctness of ACC_STEP is verified by two theorems. 

 |- !n l s1 s2 P Q.
     P s1 /\ (ACC_STEP n ((l,s1),P) = (([],RESULT s2),Q)) 
     ==>
     (STEP n (l,s1) = ([],RESULT s2)) /\ Q s2

 |- !P c R.
     (!s1. ?n s2. ACC_STEP n (([c],s1),P) = (([],RESULT s2),R s1)) 
     ==>
     !s1 s2. P s1 /\ EVAL c s1 s2 ==> R s1 s2

The symbolic execution tool in HOL is PATH_EVAL (defined in
PATH_EVAL.sml). 

 PATH_EVAL solv P s c

Repeatedly applies STEP1 symbolically starting with the configuration
``([c],s)`` and returning a theorem |- EVAL c s s', where s' may be a
conditional term if there are conditions not resolved by the solver
(see below).

The second argument to PATH_EVAL should be a term representing a
predicate on states and the third argument should be a state.

The precondition P is carried forward and augmented with additional
terms representing the effects of assignments and the branches of
conditionals entered.

Whenever a conditional with test b is encountered the solver is called
on ``P' ==> b`` and if that fails on ``P' ==> ~b`` where P' is the
accumulated precondition.  If the solver can resolve such a condition
then only the corresponding arm of the conditional is executed. If the
solver fails then both arms of the conditional are symbolically
executed and the results combined. 

The solver solv should be a function that maps a term to an equational
theorem whose left hand side is the supplied term (i.e. a conversion
in HOL jargon). If tm is a term that can be solved then solv tm should
return |- tm = T. If tm is a term that can't be solved then solv tm
can return |- tm = tm' for any tm' not equal to T (e.g. tm' = tm).

An example solver, simpSolv, defined inside HOL using SIMP_CONV is:

 fun simpSolv tm =
  let val () = (print "\nTrying to solve:\n"; print_term tm; print "\n... ")
      val th = time (EVAL THENC SIMP_CONV arith_ss []) tm handle _ => REFL tm
      val () = if rhs(concl th) = ``T``
                then (print "Solved:\n"; print_thm th; print "\n")
                else print "Failure :-(\n\n"
  in
   th
  end

Notice that this prints out the term it is trying to solve.

Consider the example program absMinus:

 result := 0;
 k := 0;
 if i <= j then k := k+1 else skip;
 if k=1 /\ ~(i=j) then result := j-i else result := i-j

If we symbolically execute absMinus with no precondition, i.e. with
the precondition-predicate ``\s:state. T``, and with an initial state
s defined by:

val s =
 ``FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar k)
          |+ ("Result",Scalar Result) |+ ("result",Scalar result)``

then we get the output shown below. Note that simpSolv prints a
commentary showing the terms it is invoked on, but this is just
because print statements were put into its definition (see above). 
The output shown has been slightly edited for readability.

---------------------------------------------------------------------------
PATH_EVAL simpSolv ``\s:state. T`` s absMinus;

Trying to solve:
T ==> i < j \/ (i = j)
... runtime: 0.004s,    gctime: 0.000s,     systime: 0.000s.
Failure :-(


Trying to solve:
T ==> ~(i < j \/ (i = j))
... runtime: 0.005s,    gctime: 0.002s,     systime: 0.000s.
Failure :-(


Trying to solve:
i < j \/ (i = j) ==> ~(i = j)
... runtime: 0.014s,    gctime: 0.001s,     systime: 0.000s.
Failure :-(


Trying to solve:
i < j \/ (i = j) ==> ~ ~(i = j)
... runtime: 0.005s,    gctime: 0.000s,     systime: 0.000s.
Failure :-(

> val it =
     []
    |- EVAL
         (Seq (Assign "result" (Const 0))
            (Seq (Assign "k" (Const 0))
               (Seq
                  (Cond
                     (Or (Less (Var "i") (Var "j"))
                        (Equal (Var "i") (Var "j")))
                     (Assign "k" (Plus (Var "k") (Const 1))) Skip)
                  (Seq
                     (Cond
                        (And (Equal (Var "k") (Const 1))
                           (Not (Equal (Var "i") (Var "j"))))
                        (Assign "result" (Sub (Var "j") (Var "i")))
                        (Assign "result" (Sub (Var "i") (Var "j"))))
                     (Assign "Result" (Var "result"))))))
         (FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar k) |+
          ("Result",Scalar Result) |+ ("result",Scalar result))
         (if i < j \/ (i = j) then
            (if ~(i = j) then
               FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+
               ("k",Scalar 1) |+ ("result",Scalar (j - i)) |+
               ("Result",Scalar (j - i))
             else
               FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+
               ("k",Scalar 1) |+ ("result",Scalar (i - j)) |+
               ("Result",Scalar (i - j)))
          else
            FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar 0) |+
            ("result",Scalar (i - j)) |+ ("Result",Scalar (i - j))) : thm
---------------------------------------------------------------------------

During symbolic execution no branches could be resolved, so the final
state is a conditional tree representing paths through absMinus.

If we start with the precondition i < j, then all branches can be
resolved:

---------------------------------------------------------------------------
PATH_EVAL simpSolv ``\s. ScalarOf (s ' "i") < ScalarOf (s ' "j")`` s absMinus;

Trying to solve:
i < j ==> i < j \/ (i = j)
... runtime: 0.006s,    gctime: 0.000s,     systime: 0.000s.
Solved:
 [] |- i < j ==> i < j \/ (i = j) = T

Trying to solve:
i < j /\ (i < j \/ (i = j)) ==> ~(i = j)
... runtime: 0.013s,    gctime: 0.001s,     systime: 0.000s.
Solved:
 [] |- i < j /\ (i < j \/ (i = j)) ==> ~(i = j) = T
> val it =
    
    [(\s. ScalarOf (s ' "i") < ScalarOf (s ' "j"))
       (FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar k) |+
        ("Result",Scalar Result) |+ ("result",Scalar result))]
    |- EVAL
         (Seq (Assign "result" (Const 0))
            (Seq (Assign "k" (Const 0))
               (Seq
                  (Cond
                     (Or (Less (Var "i") (Var "j"))
                        (Equal (Var "i") (Var "j")))
                     (Assign "k" (Plus (Var "k") (Const 1))) Skip)
                  (Seq
                     (Cond
                        (And (Equal (Var "k") (Const 1))
                           (Not (Equal (Var "i") (Var "j"))))
                        (Assign "result" (Sub (Var "j") (Var "i")))
                        (Assign "result" (Sub (Var "i") (Var "j"))))
                     (Assign "Result" (Var "result"))))))
         (FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar k) |+
          ("Result",Scalar Result) |+ ("result",Scalar result'))
         (FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar 1) |+
          ("result",Scalar (j - i)) |+ ("Result",Scalar (j - i))) : thm
---------------------------------------------------------------------------

If we start with the precondition j <= i, then all branches can also
be resolved:

---------------------------------------------------------------------------

PATH_EVAL solv ``\s. ScalarOf (s ' "j") <= ScalarOf (s ' "i")`` s absMinus;

Trying to solve:
j <= i ==> i < j \/ (i = j)
... runtime: 0.011s,    gctime: 0.000s,     systime: 0.000s.
Failure :-(


Trying to solve:
j <= i ==> ~(i < j \/ (i = j))
... runtime: 0.008s,    gctime: 0.001s,     systime: 0.000s.
Failure :-(


Trying to solve:
j <= i /\ (i < j \/ (i = j)) ==> ~(i = j)
... runtime: 0.018s,    gctime: 0.000s,     systime: 0.000s.
Failure :-(


Trying to solve:
j <= i /\ (i < j \/ (i = j)) ==> ~ ~(i = j)
... runtime: 0.003s,    gctime: 0.001s,     systime: 0.000s.
Solved:
 [] |- j <= i /\ (i < j \/ (i = j)) ==> ~ ~(i = j) = T
> val it =
    
    [(\s. ScalarOf (s ' "j") <= ScalarOf (s ' "i"))
       (FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar k) |+
        ("Result",Scalar Result) |+ ("result",Scalar result))]
    |- EVAL
         (Seq (Assign "result" (Const 0))
            (Seq (Assign "k" (Const 0))
               (Seq
                  (Cond
                     (Or (Less (Var "i") (Var "j"))
                        (Equal (Var "i") (Var "j")))
                     (Assign "k" (Plus (Var "k") (Const 1))) Skip)
                  (Seq
                     (Cond
                        (And (Equal (Var "k") (Const 1))
                           (Not (Equal (Var "i") (Var "j"))))
                        (Assign "result" (Sub (Var "j") (Var "i")))
                        (Assign "result" (Sub (Var "i") (Var "j"))))
                     (Assign "Result" (Var "result"))))))
         (FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar k) |+
          ("Result",Scalar Result) |+ ("result",Scalar result'))
         (if i < j \/ (i = j) then
            FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar 1) |+
            ("result",Scalar (i - j)) |+ ("Result",Scalar (i - j))
          else
            FEMPTY |+ ("j",Scalar j) |+ ("i",Scalar i) |+ ("k",Scalar 0) |+
            ("result",Scalar (i - j)) |+ ("Result",Scalar (i - j))) : thm
---------------------------------------------------------------------------

More details are in comments in SYM_PATH.sml and also in
SYM_PATH_Examples.ml, which is a non-compilable file with examples to
be run interactively (or via the ML function "use").
