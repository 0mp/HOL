(* This file has been generated by java2opSem from /home/helen/Recherche/hol/HOL/examples/opsemTools/java2opsem/testFiles/javaFiles/ConditionnalSum.java*)


open HolKernel Parse boolLib
stringLib IndDefLib IndDefRules
finite_mapTheory relationTheory
newOpsemTheory
computeLib bossLib;

val _ = new_theory "ConditionnalSum";

(* Method sum*)
val MAIN_def =
  Define `MAIN =
    RSPEC
    (\state.
      ((ScalarOf (state ' "n")>=0)))
      (Seq
        (Assign "s"
          (Const 0)
        )
        (Seq
          (Cond 
            (Not (Less 
              (Var "n")
              (Var "k")
            ))
            (Assign "s"
              (Plus 
                (Var "n")
                (Var "k")
              )
            )
            (Seq
              (Assign "i"
                (Const 0)
              )
              (While 
                (LessEq 
                  (Var "i")
                  (Var "n")
                )
                (Seq
                  (Assign "s"
                    (Plus 
                      (Var "s")
                      (Var "i")
                    )
                  )
                  (Assign "i"
                    (Plus 
                      (Var "i")
                      (Const 1)
                    )
                  )
                )
              )
            )
          )
          (Assign "Result"
            (Var "s")
          )
        )
      )
    (\state1 state2.
      ((((ScalarOf (state1 ' "n")<ScalarOf (state1 ' "k")))) ==> (((ScalarOf (state2 ' "Result")=(ScalarOf (state1 ' "n")*(ScalarOf (state1 ' "n")+1))/2))))/\((~((ScalarOf (state1 ' "n")<ScalarOf (state1 ' "k")))) ==> (((ScalarOf (state2 ' "Result")=ScalarOf (state1 ' "n")+ScalarOf (state1 ' "k"))))))
    `

    val intVar_def =
  	     Define `intVar =["n";"k";"s";"i";"Result"]  `

    val arrVar_def =
  	     Define `arrVar =[]  `

  val _ = export_theory();
