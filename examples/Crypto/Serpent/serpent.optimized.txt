From: Jianjun Duan <jjduan@cs.utah.edu>
Date: July 17, 2005 4:32:52 PM MDT
To: Konrad Slind <slind@cs.utah.edu>
Subject: serpent optimized

Hi Konrad,
     Here are the files for the optimized version of Serpent in HOL. Since I had problem with file dependencies, I didn't break it. Inside two .txt files are the test results from HOL and C versions. In the optimized version, a 128-bit word is represented with a 4-tuple of word32 in this manner: (BITS 31 0,BITS 63 42,BITS 95 64, BITS 127 96).

Jianjun    
(*formalization and verification of the optimized Serpent algorithm 
based on the optimized code in the original submission package.

a 128bit block is represented using a tuple of 4 word32,
the correspondence between the tuple in HOL and array in C is:
(w0,w1,w2,w3)
<==>
w[0],w[1],w[2],w[3],
while w[0] is the least significant word32


Jianjun Duan,
School of Computing, University of Utah
*)
app load ["listTheory", "rich_listTheory", "word32Theory", "word128Theory", 
"word256Theory","metisLib"]; 
quietdec := true;
open listTheory rich_listTheory word32Theory word128Theory word256Theory bitsTheory markerTheory metisLib pairTheory arithmeticTheory;
quietdec := false;


(**********************************************ROUNDS******************************)

val RND00_def = Define 
	`RND00  (a:word32,b:word32,c:word32,d:word32)= 
	let t01 =  b # c
	in
	let t02 =  a   | d 
	in
	let t03 =   a  #  b 
	in
	let z =   t02  # t01
	in
	let t05 =  c   | z
	in
	let t06 =  a   # d  
	in
	let t07 =  b   |  c 
	in
	let t08 =  d   & t05
	in
	let t09 =  t03 & t07
	in 
	let y =     t09 # t08
	in
	let t11 = t09 & y  
	in
	let t12 =  c # d 
	in
	let t13=  t07 # t11
	in 
	let t14= b &  t06
	in
	let t15= t06 #  t13
	in
	let w = NOT  t15
	in
	let t17= w  #  t14
	in
	let  x=  t12 # t17
	in
	
	(w,x,y,z)`;



val InvRND00_def = Define 
	`InvRND00  (a:word32,b:word32,c:word32,d:word32)=  
	
	let t01 =    c # d
	in 
	let t02 =   a  |  b 
	in 
	let t03 =   b | c 
	in
	let t04 =   c & t01
	in 
	let t05 =   t02 # t01
	in
	let t06 =   a | t04
	in
	let y   =   NOT  t05
	in
	let t08 =   b # d
	in
	let t09 =  t03  & t08
	in 
	let t10 =  d | y  
	in 
	let x   =    t09 # t06
	in 
	let t12 =    a  | t05
	in 
	let t13 =    x # t12
	in 
	let t14 =    t03 # t10
	in 
	let t15 =    a # c  
	in 
	let z   =    t14 # t13
	in 
	let t17 =   t05 & t13
	in 
	let t18 =  t14 | t17
	in 
	let w   = t15 # t18
	in
	
	(w,x,y,z)`;


val RND01_def= Define
	`RND01  (a:word32,b:word32,c:word32,d:word32)=  
	
	let t01 =  a | d  
	in
	let t02 =  c # d  
	in 
	let t03 =  NOT b  
	in 
	let t04 =  a # c 
	in 
	let t05 =  a | t03
	in 
	let t06 = d & t04
	in
	let t07 = t01 & t02
	in 
	let t08 =  b | t06
	in
	let y   =  t02 # t05
	in
	let t10 = t07 # t08
	in 
	let t11 = t01 # t10
	in 
	let t12 =  y # t11
	in 
	let t13 =  b & d  
	in 
	let z   =  NOT  t10
	in 
	let x   = t13 # t12
	in 
	let t16 = t10 | x  
	in 
	let t17 =  t05 & t16
	in 
	let w   =  c # t17
	in (w,x,y,z)`;

val InvRND01_def = Define
	`InvRND01  (a:word32,b:word32,c:word32,d:word32)=  
	let t01 =     a # b  
	in 
	let t02 =   b  | d  
	in 
	let t03 =   a & c  
	in 
	let t04 =   c # t02
	in 
	let t05 =   a  | t04
	in 
	let t06 =   t01 & t05
	in 
	let t07 =  d  | t03
	in 
	let t08 =  b  # t06
	in 
	let t09 =  t07 # t06
	in 
	let t10 =  t04  | t03
	in 
	let t11 =  d  &  t08
	in 
	let y   =  NOT t09
	in 
	let x   =  t10 # t11
	in 
	let t14 =   a | y  
	in 
	let t15 =   t06 # x  
	in 
	let z   =   t01 # t04
	in 
	let t17 =   c  # t15
	in 
	let w   =  t14  # t17
	in (w,x,y,z)`;


val  RND02_def = Define 
	`RND02  (a:word32,b:word32,c:word32,d:word32)=  
	
	let t01 =   a | c  
	in 
	let t02 =    a # b  
	in 
	let t03 =   d # t01
	in 
	let w   =   t02  # t03
	in 
	let t05 =   c # w  
	in 
	let t06 =   b # t05
	in 
	let t07 =   b | t05
	in 
	let t08 =   t01 & t06
	in 
	let t09 =   t03 # t07
	in 
	let t10 =   t02 | t09
	in 
	let x   =   t10 # t08
	in 
	let t12 =   a | d  
	in 
	let t13 =  t09  # x  
	in 
	let t14 =  b # t13
	in 
	let z   =  NOT t09
	in 
	let y   =  t12 # t14
	in (w,x,y,z)`;


val InvRND02_def = Define
	`InvRND02  (a:word32,b:word32,c:word32,d:word32)=  
	
	let t01 =  a # d  
	in 
	let t02 =  c # d  
	in 
	let t03 =  a & c  
	in 
	let t04 =  b | t02
	in 
	let w   =  t01 # t04
	in 
	let t06 = a  |  c  
	in 
	let t07 = d | w  
	in 
	let t08 =     NOT d  
	in 
	let t09 =   b  & t06
	in 
	let t10 =  t08 | t03
	in 
	let t11 =   b & t07
	in 
	let t12 =   t06 & t02
	in 
	let z   =   t09 # t10
	in 
	let x   =   t12 # t11
	in 
	let t15 =   c & z  
	in 
	let t16 =   w # x  
	in 
	let t17 =   t10 # t15
	in 
	let y   =   t16 # t17
	in (w,x,y,z)`;


val  RND03_def = Define 
	`RND03  (a:word32,b:word32,c:word32,d:word32)=  
	let  t01 =  a   #  c  
	in 
	let   t02 = a | d  
	in 
	let   t03 = a & d  
	in 
	let   t04 =t01  & t02
	in 
	let t05 =   b | t03
	in 
	let   t06 = a & b  
	in 
	let   t07 = d # t04
	in 
	let   t08 = c | t06
	in 
	let   t09 = b #  t07
	in 
	let   t10 = d  & t05
	in 
	let   t11 = t02 # t10
	in 
	let   z   = t08 # t09
	in 
	let   t13 = d | z  
	in 
	let   t14 = a | t07
	in 
	let   t15 = b & t13
	in 
	let   y   =t08  # t11
	in 
	let   w   = t14 # t15
	in 
	let   x   = t05 # t04
	in (w,x,y,z)`;

val  InvRND03_def = Define
	`InvRND03  (a:word32,b:word32,c:word32,d:word32)=  
		
	let  t01 =   c | d  
	in 
	let   t02 =a | d  
	in 
	let   t03 = c # t02
	in 
	let   t04 = b # t02
	in 
	let   t05 = a  # d  
	in 
	let   t06 =  t04 & t03
	in 
	let   t07 = b & t01
	in 
	let   y   = t05 # t06
	in 
	let   t09 = a # t03
	in 
	let   w   = t07 # t03
	in 
	let   t11 = w | t05
	in 
	let   t12 = t09 & t11
	in 
	let   t13 = a & y  
	in 
	let   t14 = t01 # t05
	in 
	let   x   =b # t12
	in 
	let   t16 = b | t13
	in 
	let   z   =t14 # t16
	in (w,x,y,z)`;




val  RND04_def = Define
	`RND04  (a:word32,b:word32,c:word32,d:word32)=  
	let t01 =  a | b  
	in 
	let t02 =   b | c  
	in 
	let t03 =   a # t02
	in 
	let   t04 = b #  d  
	in 
	let   t05 = d  | t03
	in 
	let   t06 = d  & t01
	in 
	let   z   = t03 # t06
	in 
	let   t08 = z &  t04
	in 
	let   t09 =t04 & t05
	in 
	let   t10 = c  # t06
	in 
	let   t11 = b & c  
	in 
	let   t12 = t04  # t08
	in 
	let   t13 = t11 | t03
	in 
	let   t14 =t10 # t09
	in 
	let   t15 = a & t05
	in 
	let   t16 = t11 | t12
	in 
	let   y   = t13 # t08
	in 
	let   x   = t15 # t16
	in 
	let   w   =NOT t14
	in (w,x,y,z)`;

val  InvRND04_def = Define 
	`InvRND04  (a:word32,b:word32,c:word32,d:word32)=  
	let  t01 =  b | d  
	in 
	let   t02 =  c | d  
	in 
	let   t03 =  a & t01
	in 
	let   t04 =  b # t02
	in 
	let   t05 =  c # d  
	in 
	let   t06 =  NOT t03
	in 
	let   t07 =  a & t04
	in 
	let   x   =  t05 # t07
	in 
	let   t09 =  x | t06
	in 
	let   t10 =  a # t07
	in 
	let   t11 =  t01 # t09
	in 
	let   t12 =  d # t04
	in 
	let   t13 =  c | t10
	in 
	let   z   =  t03 # t12
	in 
	let   t15 =  a # t04
	in 
	let   y   =  t11 # t13
	in 
	let   w   =  t15 # t09
	in (w,x,y,z)`;

val  RND05_def = Define
	`RND05  (a:word32,b:word32,c:word32,d:word32)=  
	let  t01 =   b #  d  
	in 
	let   t02 = b  | d  
	in 
	let   t03 =  a & t01
	in 
	let   t04 =  c # t02
	in 
	let   t05 =   t03 # t04
	in 
	let   w   =   NOT  t05
	in 
	let   t07 =   a  # t01
	in 
	let   t08 =   d | w  
	in 
	let   t09 =  b | t05
	in 
	let   t10 =   d #t08
	in 
	let   t11 =   b | t07
	in 
	let   t12 =  t03 | w  
	in 
	let   t13 =   t07 | t10
	in 
	let   t14 =   t01 # t11
	in 
	let   y   =  t09 # t13
	in 
	let   x   =  t07 # t08
	in 
	let   z   =  t12 # t14
	in (w,x,y,z)`;


val  InvRND05_def = Define
	`InvRND05  (a:word32,b:word32,c:word32,d:word32)=  
	let  t01 = a & d  
	in 
	let   t02 =   c  #  t01
	in 
	let   t03 =   a # d  
	in 
	let   t04 =   b  & t02
	in 
	let   t05 =   a & c  
	in 
	let   w   =   t03 # t04
	in 
	let   t07 =  a &  w  
	in 
	let   t08 =    t01 # w  
	in 
	let   t09 =    b | t05
	in 
	let   t10 =    NOT b  
	in 
	let   x   =  t08 # t09
	in 
	let   t12 =  t10 | t07
	in 
	let   t13 =  w | x  
	in 
	let   z   =  t02 # t12
	in 
	let   t15 =  t02 # t13
	in 
	let   t16 =  b # d  
	in 
	let   y   = t16 # t15
	in 
	(w,x,y,z)`;

val  RND06_def = Define
	`RND06  (a:word32,b:word32,c:word32,d:word32)=  
	let  t01 =  a & d  
	in 
	let   t02 =  b # c  
	in 
	let   t03 =  a  # d  
	in 
	let   t04 = t01  # t02
	in 
	let   t05 =  b | c  
	in 
	let   x   =  NOT t04
	in 
	let   t07 =  t03 & t05
	in 
	let   t08 =  b & x  
	in 
	let   t09 =  a | c  
	in 
	let   t10 =  t07  # t08
	in 
	let   t11 =  b |  d  
	in 
	let   t12 =  c # t11
	in 
	let   t13 = t09 # t10
	in 
	let   y   =  NOT t13
	in 
	let   t15 =  x  &  t03
	in 
	let   z   = t12 # t07
	in 
	let   t17 =  a # b  
	in 
	let   t18 =  y # t15
	in 
	let   w   =   t17 # t18
	in (w,x,y,z)`;

val InvRND06_def= Define 
	`InvRND06  (a:word32,b:word32,c:word32,d:word32)=  
	let  t01 =   a # c  
	in 
	let   t02 = NOT c  
	in 
	let   t03 =  b &  t01
	in 
	let   t04 = b  | t02
	in 
	let   t05 =  d | t03
	in 
	let   t06 =  b # d  
	in 
	let   t07 =  a & t04
	in 
	let   t08 =  a | t02
	in 
	let   t09 =  t07 # t05
	in 
	let   x   =  t06  # t08
	in 
	let   w   =  NOT t09
	in 
	let   t12 =  b & w  
	in 
	let   t13 =  t01 & t05
	in 
	let   t14 = t01 # t12
	in 
	let   t15 =   t07 # t13
	in 
	let   t16 =   d | t02
	in 
	let   t17 =   a # x  
	in 
	let   z   =    t17 # t15
	in 
	let   y   =   t16 # t14
	in (w,x,y,z)`;
	

val RND07_def=Define
	`RND07  (a:word32,b:word32,c:word32,d:word32)=  
	
	let  t01 = a & c  
	in 
	let   t02 = NOT d  
	in 
	let   t03 = a &  t02
	in 
	let   t04 = b | t01
	in 
	let   t05 = a &  b  
	in 
	let   t06 =  c  # t04
	in 
	let   z   =  t03 # t06
	in 
	let   t08 =  c | z  
	in 
	let   t09 =  d  | t05
	in 
	let   t10 =  a  # t08
	in 
	let   t11 =  t04 & z  
	in 
	let   x   =  t09 # t10
	in 
	let   t13 =  b  # x  
	in
	let  t14 =  t01 # x  
	in 
	let   t15 =  c # t05
	in 
	let   t16 = t11 | t13
	in 
	let   t17 = t02 | t14
	in 
	let   w   = t15  # t17
	in 
	let   y   = a # t16
	in 
	(w,x,y,z)`;

val InvRND07_def= Define
	`InvRND07  (a:word32,b:word32,c:word32,d:word32)=  
	
	let  t01 =  a &  b  
	in 
	let  t02 =  a   | b  
	in 
	let  t03 = c | t01
	in 
	let   t04 = d & t02
	in 
	let   z   = t03 # t04
	in 
	let   t06 =b # t04
	in 
	let   t07 = d  # z  
	in 
	let   t08 = NOT t07
	in 
	let   t09 =  t06 | t08
	in 
	let   t10 = b #  d 
	in 
	let   t11 = a | d 
	in 
	let   x   =  a # t09
	in 
	let   t13 =  c # t06
	in 
	let   t14 =  c & t11
	in 
	let   t15 =  d  | x  
	in 
	let   t16 = t01 | t10
	in 
	let   w   =   t13 # t15
	in 
	let   y   =   t14  # t16
	in (w,x,y,z)`;


val RND08_def = Define 
	`RND08  b128=RND00  b128`;
val RND09_def = Define 
	`RND09  b128=RND01  b128`;
val RND10_def = Define 
	`RND10  b128=RND02  b128`;
val RND11_def = Define 
	`RND11  b128=RND03  b128`;
val RND12_def = Define 
	`RND12  b128=RND04  b128`;
val RND13_def = Define 
	`RND13  b128=RND05  b128`;
val RND14_def = Define 
	`RND14  b128=RND06  b128`;
val RND15_def = Define 
	`RND15  b128=RND07  b128`;
val RND16_def = Define 
	`RND16  b128=RND00  b128`;
val RND17_def = Define 
	`RND17  b128=RND01  b128`;
val RND18_def = Define 
	`RND18  b128=RND02  b128`;
val RND19_def = Define 
	`RND19  b128=RND03  b128`;
val RND20_def = Define 
	`RND20  b128=RND04  b128`;
val RND21_def = Define 
	`RND21  b128=RND05  b128`;
val RND22_def = Define 
	`RND22  b128=RND06  b128`;
val RND23_def = Define 
	`RND23  b128=RND07  b128`;
val RND24_def = Define 
	`RND24  b128=RND00  b128`;
val RND25_def = Define 
	`RND25  b128=RND01  b128`;
val RND26_def = Define 
	`RND26  b128=RND02  b128`;
val RND27_def = Define 
	`RND27  b128=RND03  b128`;
val RND28_def = Define 
	`RND28  b128=RND04  b128`;
val RND29_def = Define 
	`RND29  b128=RND05  b128`;
val RND30_def = Define 
	`RND30  b128=RND06  b128`;
val RND31_def = Define 
	`RND31  b128=RND07  b128`;

val InvRND08_def = Define
	`InvRND08  b128=InvRND00  b128`;
val InvRND09_def = Define
	`InvRND09  b128=InvRND01  b128`;
val InvRND10_def = Define
	`InvRND10  b128=InvRND02  b128`;
val InvRND11_def = Define
	`InvRND11  b128=InvRND03  b128`;
val InvRND12_def = Define
	`InvRND12  b128=InvRND04  b128`;
val InvRND13_def = Define
	`InvRND13  b128=InvRND05  b128`;
val InvRND14_def = Define
	`InvRND14  b128=InvRND06  b128`;
val InvRND15_def = Define
	`InvRND15  b128=InvRND07  b128`;
val InvRND16_def = Define
	`InvRND16  b128=InvRND00  b128`;
val InvRND17_def = Define
	`InvRND17  b128=InvRND01  b128`;
val InvRND18_def = Define
	`InvRND18  b128=InvRND02  b128`;
val InvRND19_def = Define
	`InvRND19  b128=InvRND03  b128`;
val InvRND20_def = Define
	`InvRND20  b128=InvRND04  b128`;
val InvRND21_def = Define
	`InvRND21  b128=InvRND05  b128`;
val InvRND22_def = Define
	`InvRND22  b128=InvRND06  b128`;
val InvRND23_def = Define
	`InvRND23  b128=InvRND07  b128`;
val InvRND24_def = Define
	`InvRND24  b128=InvRND00  b128`;
val InvRND25_def = Define
	`InvRND25  b128=InvRND01  b128`;
val InvRND26_def = Define
	`InvRND26  b128=InvRND02  b128`;
val InvRND27_def = Define
	`InvRND27  b128=InvRND03  b128`;
val InvRND28_def = Define
	`InvRND28  b128=InvRND04  b128`;
val InvRND29_def = Define
	`InvRND29  b128=InvRND05  b128`;
val InvRND30_def = Define
	`InvRND30  b128=InvRND06  b128`;
val InvRND31_def = Define
	`InvRND31  b128=InvRND07  b128`;



(*******************************TRANSFORMATION*************************************************)
val transform_def=Define 
	`transform (x0:word32, x1:word32, x2:word32, x3:word32)=
	
	let  y0 =  x0 #>> (32-13)
	in
	let  y2 =  x2 #>> (32-3)
	in
	let  y1 = ( x1 # y0) # y2
	
	in 
	let  y3 = ( x3 # y2) # ( y0 << 3)
	in
	let  y11 =  y1 #>> (32-1)
	in
	let  y31 =  y3 #>> (32-7)
	in
	let  y01 = ( y0 # y11) # y31
	in
	let  y21 = ( y2 # y31) # ( y11 << 7)
	in 
	let  y02 = y01 #>> (32-5)
	in
	let  y22 = y21 #>>(32-22)
	in (y02,y11,y22,y31)`;

val inv_transform_def=Define
	`inv_transform (x0:word32, x1:word32, x2:word32, x3:word32)=
	let y2 =  x2 #>> 22
	in 
	let y0 =  x0 #>> 5
	in 
	let y21 = ( y2 # x3) # ( x1 << 7)
	in 
	let y01 = ( y0 # x1) # x3
	in 
	let y3 = x3 #>> 7
	in 
	let y1 =  x1 #>> 1
	in 
	let y31 = (y3 # y21) # (y01 << 3)
	in 
	let y11 = (y1 # y01) # y21
	in 
	let y22 = y21 #>>3
	in 
	let y02 = y01 #>> 13
	in (y02,y11,y22,y31)`;

(********************************APPLYING KEYING**************************)
val keying_def=Define
	`keying (x0:word32, x1:word32, x2:word32, x3:word32) (subkey0:word32, subkey1:word32, subkey2:word32, subkey3:word32)=
	
	(x0 # subkey0, x1 # subkey1, x2 # subkey2,x3 # subkey3)`;

(******************************KEY SCHEDULE*************************************)		
val word128to32l_def =Define 
`word128to32l (w128:word128) = 
 [(n2w:num->word32) (w2n (w128 >>> 96)); (n2w:num->word32) (w2n ((w128 <<32) >>> 96));
 (n2w:num->word32) (w2n ((w128<<64) >>> 96)); (n2w:num->word32) (w2n ((w128<<96) >>> 96))]`;
val word256to128l_def = Define
`word256to128l (w256:word256) = [(n2w:num->word128) (w2n (w256 >>> 128)); (n2w:num->word128) (w2n ((w256 <<128) >>> 128))]`;

val word256to32l_def = Define
`word256to32l (w256:word256) = FLAT ( MAP word128to32l (word256to128l w256))`;



val (myFIRSTN_def,myFIRSTN_termi) =Defn.tprove(
 Defn.Hol_defn "myBUTLASTN"
`myFIRSTN n l = if n=0 then []
else if l=[] then []
else (HD l)::(myFIRSTN (n-1) (TL l))`,

WF_REL_TAC `measure (LENGTH o SND)` THEN
RW_TAC list_ss [] THEN
Cases_on `l` THENL [
	FULL_SIMP_TAC list_ss [],
	RW_TAC list_ss []]);

val myBUTLASTN_def = Define
`myBUTLASTN n l = let len=LENGTH l in
if len>=n then myFIRSTN (LENGTH l-n) l
else []
`;

val LENGTH_myFIRSTN=prove(
``!n l. 
	n <= LENGTH l 
	==> 
	(LENGTH (myFIRSTN n l) = n)``,

Induct_on `n` THENL [
	RW_TAC list_ss [] THEN
	`myFIRSTN 0 l=[]` by METIS_TAC  [myFIRSTN_def] THEN
	RW_TAC list_ss [],
	RW_TAC list_ss [] THEN
	Cases_on `l` THENL [
		FULL_SIMP_TAC list_ss [],
		`~(SUC n=0)` by RW_TAC arith_ss [] THEN
		`~((h::t) =[])` by RW_TAC list_ss [] THEN
		`myFIRSTN (SUC n) (h::t)= (HD (h::t))::(myFIRSTN (SUC n-1) (TL (h::t)))` by  METIS_TAC  [myFIRSTN_def] THEN
		FULL_SIMP_TAC list_ss []]]);
	



val LENGTH_myBUTLASTN=prove(
``!n l. 
	n <= LENGTH l 
	==> 
	(LENGTH (myBUTLASTN n l) = LENGTH l - n)``,

RW_TAC arith_ss [myBUTLASTN_def,LENGTH_myFIRSTN,LET_THM]);	


val LENGTH_GREATER_EQ_CONS=prove(
``!l n. 
	(LENGTH l >=SUC n) 
	==>
	?x l'. (LENGTH l' >= n) /\ (l = x::l')``,

Induct_on `l` THENL [
	SIMP_TAC arith_ss [LENGTH],
	RW_TAC std_ss [] THEN
	FULL_SIMP_TAC arith_ss [LENGTH]]);
		   
val listInstGreaterEq8=prove(
``!l. 
	(LENGTH l>=8) 
	==> 
	?v_1 v_2 v_3 v_4 v_5 v_6 v_7 v_8 t. l = (v_1::v_2::v_3::v_4::v_5::v_6::v_7::v_8::t)``,
	     
REWRITE_TAC [DECIDE ``8 = SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))``] THEN
METIS_TAC  [LENGTH_GREATER_EQ_CONS, LENGTH_NIL]);	
	               
val R_def=Define 
`R=32`;
(* PHI: Constant used in the key schedule *)

val PHI_def=Define 
`PHI=(n2w:num->word32) 0x9e3779b9`;

val short2longKey_def = Define 
`short2longKey k kl = let nw256 = (n2w:num->word256) (k MOD  (2**kl)) in
nw256 | (1w<<kl)`;

val (makeSubKeyBitSlice_def,makeSubKeyBitSlice_termi)=Defn.tprove(
Hol_defn "makeSubKeyBitSlice"
`makeSubKeyBitSlice (w_1::w_2::w_3::w_4::w_5::w_6::w_7::w_8::t) i = let nl =((w_1 # w_3 #  w_5 # w_8 #PHI# (n2w:num->word32) (131-i)) #>> (32-11)) ::(w_1::w_2::w_3::w_4::w_5::w_6::w_7::w_8::t) in
if i=0 then nl
else makeSubKeyBitSlice nl (i-1)`,

 WF_REL_TAC `measure SND`);

val makeRevPreKey_def= Define
`makeRevPreKey longKey=let keySlices = word256to32l longKey in
myBUTLASTN 8 (makeSubKeyBitSlice keySlices 131)`;

val revPreKey2SubKey_def = Define
`revPreKey2SubKey revPreKey= let w = REVERSE revPreKey in

 RND03 (EL 0 w, EL 1 w, EL 2 w, EL 3 w)::
  RND02(EL 4 w, EL 5 w, EL 6 w, EL 7 w)::
  RND01(EL  8 w, EL  9 w, EL 10 w, EL 11 w)::
  RND00(EL 12 w, EL 13 w, EL 14 w, EL 15 w)::
  RND31(EL 16 w, EL 17 w, EL 18 w, EL 19 w)::
  RND30(EL 20 w, EL 21 w, EL 22 w, EL 23 w)::
  RND29(EL 24 w, EL 25 w, EL 26 w, EL 27 w)::
  RND28(EL 28 w, EL 29 w, EL 30 w, EL 31 w)::
  RND27(EL 32 w, EL 33 w, EL 34 w, EL 35 w)::
  RND26(EL 36 w, EL 37 w, EL 38 w, EL 39 w)::
  RND25(EL 40 w, EL 41 w, EL 42 w, EL 43 w)::
  RND24(EL 44 w, EL 45 w, EL 46 w, EL 47 w)::
  RND23(EL 48 w, EL 49 w, EL 50 w, EL 51 w)::
  RND22(EL 52 w, EL 53 w, EL 54 w, EL 55 w)::
  RND21(EL 56 w, EL 57 w, EL 58 w, EL 59 w)::
  RND20(EL 60 w, EL 61 w, EL 62 w, EL 63 w)::
  RND19(EL 64 w, EL 65 w, EL 66 w, EL 67 w)::
  RND18(EL 68 w, EL 69 w, EL 70 w, EL 71 w)::
  RND17(EL 72 w, EL 73 w, EL 74 w, EL 75 w)::
  RND16(EL 76 w, EL 77 w, EL 78 w, EL 79 w)::
  RND15(EL 80 w, EL 81 w, EL 82 w, EL 83 w)::
  RND14(EL 84 w, EL 85 w, EL 86 w, EL 87 w)::
  RND13(EL 88 w, EL 89 w, EL 90 w, EL 91 w)::
  RND12(EL 92 w, EL 93 w, EL 94 w, EL 95 w)::
  RND11(EL 96 w, EL 97 w, EL 98 w, EL 99 w)::
  RND10(EL 100 w, EL 101 w, EL 102 w, EL 103 w)::
  RND09(EL 104 w, EL 105 w, EL 106 w, EL 107 w)::
  RND08(EL 108 w, EL 109 w, EL 110 w, EL 111 w)::
  RND07(EL 112 w, EL 113 w, EL 114 w, EL 115 w)::
  RND06(EL 116 w, EL 117 w, EL 118 w, EL 119 w)::
  RND05(EL 120 w, EL 121 w, EL 122 w, EL 123 w)::
  RND04(EL 124 w, EL 125 w, EL 126 w, EL 127 w)::
  RND03(EL 128 w, EL 129 w, EL 130 w, EL 131 w)::[]`;


val makeKey_def= Define  
`makeKey userKey kl =let longKey =short2longKey userKey kl in
let revPreKey=makeRevPreKey longKey in 
revPreKey2SubKey revPreKey`;
	 

val word256to32lLength = prove (
``!w. 
	LENGTH (word256to32l w) =8``,

EVAL_TAC THEN METIS_TAC []);

val makeSubKeyBitSliceLength=prove(
``!longKey n. 
	(LENGTH longKey>=8)
	==> 
	(LENGTH (makeSubKeyBitSlice longKey n )= n+LENGTH longKey+1)``,

Induct_on `n` THENL [
	FULL_SIMP_TAC list_ss [makeSubKeyBitSlice_def,LENGTH,Abbrev_def] THEN
	RW_TAC std_ss [] THEN
	`?v_1 v_2 v_3 v_4 v_5 v_6 v_7 v_8 t. longKey = (v_1::v_2::v_3::v_4::v_5::v_6::v_7::v_8::t)` by METIS_TAC [listInstGreaterEq8] THEN
	FULL_SIMP_TAC list_ss [makeSubKeyBitSlice_def] THEN
	METIS_TAC [LENGTH,SUC_ONE_ADD,ADD_COMM],
	RW_TAC std_ss [] THEN
	`?v_1 v_2 v_3 v_4 v_5 v_6 v_7 v_8 t. longKey = (v_1::v_2::v_3::v_4::v_5::v_6::v_7::v_8::t)` by METIS_TAC [listInstGreaterEq8] THEN
	FULL_SIMP_TAC list_ss [makeSubKeyBitSlice_def] THEN
	RW_TAC list_ss [] THEN
	FULL_SIMP_TAC list_ss [Abbrev_def]]);

val makeRevPreKeyLength=prove(
``!userKey. 
	LENGTH (makeRevPreKey userKey)=132``,

RW_TAC std_ss [makeRevPreKey_def,LET_THM] THEN
`LENGTH (word256to32l userKey)=8` by METIS_TAC [word256to32lLength] THEN
`LENGTH (word256to32l userKey)>=8` by RW_TAC arith_ss [] THEN
`LENGTH  (makeSubKeyBitSlice (word256to32l userKey) 131)=131+LENGTH (word256to32l userKey) +1` by METIS_TAC [makeSubKeyBitSliceLength,LENGTH_REVERSE] THEN
`8 <=  LENGTH (makeSubKeyBitSlice (word256to32l userKey) 131)` by FULL_SIMP_TAC arith_ss [] THEN
FULL_SIMP_TAC list_ss [LENGTH_myBUTLASTN,LENGTH_REVERSE]);


val makeKeyLength=prove(``
!userKey kl. 
	LENGTH (makeKey userKey kl) =33``,
	
RW_TAC list_ss [makeKey_def,revPreKey2SubKey_def,LET_THM]);
(********************************BLOCK ENCRYPTION************************************)
val f_def= Define
	`f a (op,sk) = op a sk`;


val encryptRnd00_def = Define 
	`encryptRnd00 a b =transform (RND00 (keying a b))`;
val encryptRnd01_def = Define 
	`encryptRnd01 a b =transform (RND01 (keying a b))`;
val encryptRnd02_def = Define 
	`encryptRnd02 a b =transform (RND02 (keying a b))`;
val encryptRnd03_def = Define 
	`encryptRnd03 a b =transform (RND03 (keying a b))`;
val encryptRnd04_def = Define 
	`encryptRnd04 a b =transform (RND04 (keying a b))`;
val encryptRnd05_def = Define 
	`encryptRnd05 a b =transform (RND05 (keying a b))`;
val encryptRnd06_def = Define 
	`encryptRnd06 a b =transform (RND06 (keying a b))`;
val encryptRnd07_def = Define 
	`encryptRnd07 a b =transform (RND07 (keying a b))`;
val encryptRnd08_def = Define 
	`encryptRnd08 a b =transform (RND08 (keying a b))`;
val encryptRnd09_def = Define 
	`encryptRnd09 a b =transform (RND09 (keying a b))`;
val encryptRnd10_def = Define 
	`encryptRnd10 a b =transform (RND10 (keying a b))`;
val encryptRnd11_def = Define 
	`encryptRnd11 a b =transform (RND11 (keying a b))`;
val encryptRnd12_def = Define 
	`encryptRnd12 a b =transform (RND12 (keying a b))`;
val encryptRnd13_def = Define 
	`encryptRnd13 a b =transform (RND13 (keying a b))`;
val encryptRnd14_def = Define 
	`encryptRnd14 a b =transform (RND14 (keying a b))`;
val encryptRnd15_def = Define 
	`encryptRnd15 a b =transform (RND15 (keying a b))`;
val encryptRnd16_def = Define 
	`encryptRnd16 a b =transform (RND16 (keying a b))`;
val encryptRnd17_def = Define 
	`encryptRnd17 a b =transform (RND17 (keying a b))`;
val encryptRnd18_def = Define 
	`encryptRnd18 a b =transform (RND18 (keying a b))`;
val encryptRnd19_def = Define 
	`encryptRnd19 a b =transform (RND19 (keying a b))`;
val encryptRnd20_def = Define 
	`encryptRnd20 a b =transform (RND20 (keying a b))`;
val encryptRnd21_def = Define 
	`encryptRnd21 a b =transform (RND21 (keying a b))`;
val encryptRnd22_def = Define 
	`encryptRnd22 a b =transform (RND22 (keying a b))`;
val encryptRnd23_def = Define 
	`encryptRnd23 a b =transform (RND23 (keying a b))`;
val encryptRnd24_def = Define 
	`encryptRnd24 a b =transform (RND24 (keying a b))`;
val encryptRnd25_def = Define 
	`encryptRnd25 a b =transform (RND25 (keying a b))`;
val encryptRnd26_def = Define 
	`encryptRnd26 a b =transform (RND26 (keying a b))`;
val encryptRnd27_def = Define 
	`encryptRnd27 a b =transform (RND27 (keying a b))`;
val encryptRnd28_def = Define 
	`encryptRnd28 a b =transform (RND28 (keying a b))`;
val encryptRnd29_def = Define 
	`encryptRnd29 a b =transform (RND29 (keying a b))`;
val encryptRnd30_def = Define 
	`encryptRnd30 a b =transform (RND30 (keying a b))`;
val encryptRnd31_1_def = Define 
	`encryptRnd31_1 a b31 =RND31 (keying a b31)`;
val encryptRnd31_2_def = Define 
	`encryptRnd31_2 a b32 =keying a b32`;

val decryptRnd00_1_def = Define 
	`decryptRnd00_1 a b32 = keying a b32`;
val decryptRnd00_2_def = Define 
	`decryptRnd00_2 a b31 = keying (InvRND31 a) b31`;
val decryptRnd01_def = Define 
	`decryptRnd01 a b = keying (InvRND30 (inv_transform a)) b`;  
val decryptRnd02_def = Define 
	`decryptRnd02 a b = keying (InvRND29 (inv_transform a)) b`;  
val decryptRnd03_def = Define 
	`decryptRnd03 a b = keying (InvRND28 (inv_transform a)) b`;  
val decryptRnd04_def = Define 
	`decryptRnd04 a b = keying (InvRND27 (inv_transform a)) b`;  
val decryptRnd05_def = Define 
	`decryptRnd05 a b = keying (InvRND26 (inv_transform a)) b`;  
val decryptRnd06_def = Define 
	`decryptRnd06 a b = keying (InvRND25 (inv_transform a)) b`;
val decryptRnd07_def = Define 
	`decryptRnd07 a b = keying (InvRND24 (inv_transform a)) b`;  
val decryptRnd08_def = Define 
	`decryptRnd08 a b = keying (InvRND23 (inv_transform a)) b`;  
val decryptRnd09_def = Define 
	`decryptRnd09 a b = keying (InvRND22 (inv_transform a)) b`;  
val decryptRnd10_def = Define 
	`decryptRnd10 a b = keying (InvRND21 (inv_transform a)) b`;  
val decryptRnd11_def = Define 
	`decryptRnd11 a b = keying (InvRND20 (inv_transform a)) b`;  
val decryptRnd12_def = Define 
	`decryptRnd12 a b = keying (InvRND19 (inv_transform a)) b`;  
val decryptRnd13_def = Define 
	`decryptRnd13 a b = keying (InvRND18 (inv_transform a)) b`;  
val decryptRnd14_def = Define 
	`decryptRnd14 a b = keying (InvRND17 (inv_transform a)) b`;  
val decryptRnd15_def = Define 
	`decryptRnd15 a b = keying (InvRND16 (inv_transform a)) b`;  
val decryptRnd16_def = Define 
	`decryptRnd16 a b = keying (InvRND15 (inv_transform a)) b`;
val decryptRnd17_def = Define 
	`decryptRnd17 a b = keying (InvRND14 (inv_transform a)) b`;  
val decryptRnd18_def = Define 
	`decryptRnd18 a b = keying (InvRND13 (inv_transform a)) b`;  
val decryptRnd19_def = Define 
	`decryptRnd19 a b = keying (InvRND12 (inv_transform a)) b`;  
val decryptRnd20_def = Define 
	`decryptRnd20 a b = keying (InvRND11 (inv_transform a)) b`;  
val decryptRnd21_def = Define 
	`decryptRnd21 a b = keying (InvRND10 (inv_transform a)) b`;
val decryptRnd22_def = Define 
	`decryptRnd22 a b = keying (InvRND09 (inv_transform a)) b`;  
val decryptRnd23_def = Define 
	`decryptRnd23 a b = keying (InvRND08 (inv_transform a)) b`;  
val decryptRnd24_def = Define 
	`decryptRnd24 a b = keying (InvRND07 (inv_transform a)) b`;  
val decryptRnd25_def = Define 
	`decryptRnd25 a b = keying (InvRND06 (inv_transform a)) b`;  
val decryptRnd26_def = Define 
	`decryptRnd26 a b = keying (InvRND05 (inv_transform a)) b`;
val decryptRnd27_def = Define 
	`decryptRnd27 a b = keying (InvRND04 (inv_transform a)) b`;  
val decryptRnd28_def = Define 
	`decryptRnd28 a b = keying (InvRND03 (inv_transform a)) b`;  
val decryptRnd29_def = Define 
	`decryptRnd29 a b = keying (InvRND02 (inv_transform a)) b`;  
val decryptRnd30_def = Define 
	`decryptRnd30 a b = keying (InvRND01 (inv_transform a)) b`;  
val decryptRnd31_def = Define 
	`decryptRnd31 a b = keying (InvRND00 (inv_transform a)) b`;  


val encryptSchedule_def =Define
`encryptSchedule=encryptRnd00::encryptRnd01::encryptRnd02::encryptRnd03::
	encryptRnd04::encryptRnd05::encryptRnd06::encryptRnd07::
	encryptRnd08::encryptRnd09::encryptRnd10::encryptRnd11::
	encryptRnd12::encryptRnd13::encryptRnd14::encryptRnd15::
	encryptRnd16::encryptRnd17::encryptRnd18::encryptRnd19::
	encryptRnd20::encryptRnd21::encryptRnd22::encryptRnd23::
	encryptRnd24::encryptRnd25::encryptRnd26::encryptRnd27::
	encryptRnd28::encryptRnd29::encryptRnd30::encryptRnd31_1::encryptRnd31_2::[]`;



 val decryptSchedule_def=Define
`decryptSchedule=decryptRnd00_1::decryptRnd00_2::decryptRnd01::decryptRnd02::decryptRnd03::
	decryptRnd04::decryptRnd05::decryptRnd06::decryptRnd07::
	decryptRnd08::decryptRnd09::decryptRnd10::decryptRnd11::
	decryptRnd12::decryptRnd13::decryptRnd14::decryptRnd15::
	decryptRnd16::decryptRnd17::decryptRnd18::decryptRnd19::
	decryptRnd20::decryptRnd21::decryptRnd22::decryptRnd23::
	decryptRnd24::decryptRnd25::decryptRnd26::decryptRnd27::
	decryptRnd28::decryptRnd29::decryptRnd30::decryptRnd31::[]`;



			 
val serpent_encrypt_def = Define
	`serpent_encrypt plaintext subkeys=
	let opKey =ZIP (encryptSchedule, subkeys)
	in 
	FOLDL f plaintext opKey`;




val serpent_decrypt_def = Define
	`serpent_decrypt ciphertext subkeys=
	let opKey =ZIP (decryptSchedule, REVERSE subkeys)
	in 
	FOLDL f ciphertext opKey`;


(*********************FUNCTIONAL CORRECTNESS********************)	
val ONE_COMP_BITWISE_LEM = Q.prove (`!a. word32$ONE_COMP a = BITWISE word32$WL (\x y. ~x) a a`, 
	METIS_TAC[word32Theory.BITWISE_ONE_COMP_THM]);
val WORD_BITWISE_EQ_PROVE_TAC=SIMP_TAC std_ss [word32Theory.ONE_COMP_EVAL, word32Theory.AND_EVAL, word32Theory.OR_EVAL, word32Theory.EOR_EVAL] THEN
	SIMP_TAC std_ss [word32Theory.n2w_11,GSYM word32Theory.EQUIV_def] THEN
	RW_TAC bool_ss [word32Theory.EOR_def, word32Theory.AND_def, word32Theory.OR_def, ONE_COMP_BITWISE_LEM, GSYM word32Theory.BITWISE_THM2, BITWISE_THM] THEN
	tautLib.TAUT_TAC;
			  
			  
(*use ^x to refer to concrete x, not virtual par
*)			  
(*g `serpent_decrypt (serpent_encrypt pt ^encryptSchedule subkey) ^ecryptSchedule subkey =pt`;*)


val RND00_THM=prove (``!v. InvRND00 (RND00 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND00_def] THEN 
	RW_TAC std_ss [InvRND00_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
	
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				WORD_BITWISE_EQ_PROVE_TAC]);
			  
val RND01_THM=prove (``!v. InvRND01 (RND01 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND01_def] THEN 
	RW_TAC std_ss [InvRND01_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
	
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				WORD_BITWISE_EQ_PROVE_TAC]);			  
				
			  
val RND02_THM=prove (``!v. InvRND02 (RND02 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND02_def] THEN 
	RW_TAC std_ss [InvRND02_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
	
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				WORD_BITWISE_EQ_PROVE_TAC]);	
						  
val RND03_THM=prove (``!v. InvRND03 (RND03 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND03_def] THEN 
	RW_TAC std_ss [InvRND03_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
	
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				WORD_BITWISE_EQ_PROVE_TAC]);			  
				
			  
			  
val RND04_THM=prove (``!v. InvRND04 (RND04 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND04_def] THEN 
	RW_TAC std_ss [InvRND04_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
	
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				
				WORD_BITWISE_EQ_PROVE_TAC]);		
				
			  
val RND05_THM=prove (``!v. InvRND05 (RND05 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND05_def] THEN 
	RW_TAC std_ss [InvRND05_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
		                RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				WORD_BITWISE_EQ_PROVE_TAC]);			  
				
			  
			  
val RND06_THM=prove (``!v. InvRND06 (RND06 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND06_def] THEN 
	RW_TAC std_ss [InvRND06_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				WORD_BITWISE_EQ_PROVE_TAC]);			  
		  
			  
			  
val RND07_THM=prove (``!v. InvRND07 (RND07 v) = v``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN 
	RW_TAC std_ss [RND07_def] THEN 
	RW_TAC std_ss [InvRND07_def] THEN
	FULL_SIMP_TAC std_ss [Abbrev_def] THEN 
	RW_TAC std_ss [] THENL [
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
				WORD_BITWISE_EQ_PROVE_TAC]);			  
			  
			  
val RND08_THM=prove (``!v. InvRND08 (RND08 v)= v``,
    	METIS_TAC [RND08_def,InvRND08_def,RND00_THM]);			  
			  
val RND09_THM=prove (``!v. InvRND09 (RND09 v)= v``,
   	METIS_TAC [RND09_def,InvRND09_def,RND01_THM]);			  
			  
val RND10_THM=prove (``!v. InvRND10 (RND10 v)= v``,
   	METIS_TAC [RND10_def,InvRND10_def,RND02_THM]);		
   	  
val RND11_THM=prove (``!v. InvRND11 (RND11 v)= v``,
    	METIS_TAC [RND11_def,InvRND11_def,RND03_THM]);	
   		  
val RND12_THM=prove (``!v. InvRND12 (RND12 v)= v``,
    	METIS_TAC [RND12_def,InvRND12_def,RND04_THM]);	

val RND13_THM=prove (``!v. InvRND13 (RND13 v)= v``,
    	METIS_TAC [RND13_def,InvRND13_def,RND05_THM]);	

val RND14_THM=prove (``!v. InvRND14 (RND14 v)= v``,
    	METIS_TAC [RND14_def,InvRND14_def,RND06_THM]);	

val RND15_THM=prove (``!v. InvRND15 (RND15 v)= v``,
    	METIS_TAC [RND15_def,InvRND15_def,RND07_THM]);	

			  
val RND16_THM=prove (``!v. InvRND16 (RND16 v)= v``,
    	METIS_TAC [RND16_def,InvRND16_def,RND00_THM]);			  
			  
val RND17_THM=prove (``!v. InvRND17 (RND17 v)= v``,
    	METIS_TAC [RND17_def,InvRND17_def,RND01_THM]);			  
			  
val RND18_THM=prove (``!v. InvRND18 (RND18 v)= v``,
    	METIS_TAC [RND18_def,InvRND18_def,RND02_THM]);		
   	  
val RND19_THM=prove (``!v. InvRND19 (RND19 v)= v``,
    	METIS_TAC [RND19_def,InvRND19_def,RND03_THM]);	
   		  
val RND20_THM=prove (``!v. InvRND20 (RND20 v)= v``,
    	METIS_TAC [RND20_def,InvRND20_def,RND04_THM]);	

val RND21_THM=prove (``!v. InvRND21 (RND21 v)= v``,
    	METIS_TAC [RND21_def,InvRND21_def,RND05_THM]);	

val RND22_THM=prove (``!v. InvRND22 (RND22 v)= v``,
    	METIS_TAC [RND22_def,InvRND22_def,RND06_THM]);	

val RND23_THM=prove (``!v. InvRND23 (RND23 v)= v``,
    	METIS_TAC [RND23_def,InvRND23_def,RND07_THM]);	
   		  
			  
val RND24_THM=prove (``!v. InvRND24 (RND24 v)= v``,
    	METIS_TAC [RND24_def,InvRND24_def,RND00_THM]);			  
			  
val RND25_THM=prove (``!v. InvRND25 (RND25 v)= v``,
    	METIS_TAC [RND25_def,InvRND25_def,RND01_THM]);			  
			  
val RND26_THM=prove (``!v. InvRND26 (RND26 v)= v``,
   	METIS_TAC [RND26_def,InvRND26_def,RND02_THM]);		
   	  
val RND27_THM=prove (``!v. InvRND27 (RND27 v)= v``,
    	METIS_TAC [RND27_def,InvRND27_def,RND03_THM]);	
   		  
val RND28_THM=prove (``!v. InvRND28 (RND28 v)= v``,
  	METIS_TAC [RND28_def,InvRND28_def,RND04_THM]);	

val RND29_THM=prove (``!v. InvRND29 (RND29 v)= v``,
    	METIS_TAC [RND29_def,InvRND29_def,RND05_THM]);	

val RND30_THM=prove (``!v. InvRND30 (RND30 v)= v``,
    	METIS_TAC [RND30_def,InvRND30_def,RND06_THM]);	

val RND31_THM=prove (``!v. InvRND31 (RND31 v)= v``,
    	METIS_TAC [RND31_def,InvRND31_def,RND07_THM]);	



val keying_THM= prove (`` ! d sk. keying (keying d sk) sk = d``,
	SIMP_TAC std_ss [FORALL_PROD,word32Theory.FORALL_WORD] THEN  
	RW_TAC std_ss [keying_def] THENL [
					  RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
					  RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
					  RW_TAC std_ss [] THEN WORD_BITWISE_EQ_PROVE_TAC,
					  WORD_BITWISE_EQ_PROVE_TAC]);

val rot_wl_lem= prove (``!a:word32. a #>>word32$WL =a``,
	METIS_TAC [MULT_CLAUSES,word32Theory.ROR_CYCLE]);	

val WORD_EOR_REDUCTION = prove(``!(a:word32) b. a #b # a # b =0w``,
	METIS_TAC [word32Theory.WORD_EOR_COMM,word32Theory.WORD_EOR_ASSOC,word32Theory.WORD_EOR_ID,word32Theory.WORD_EOR_INV]);

val WORD_EOR_ID2 = prove(``!(a:word32) b c. c#a #b # a # b =c``,
	METIS_TAC [word32Theory.WORD_EOR_COMM,word32Theory.WORD_EOR_ASSOC,word32Theory.WORD_EOR_ID,word32Theory.WORD_EOR_INV]);

val ror_32_lem=prove (``!(a:word32). a #>>32 =a ``,
	`32=word32$WL` by RW_TAC std_ss [word32Theory.WL_def,word32Theory.HB_def] THEN
	 METIS_TAC [MULT_CLAUSES,word32Theory.ROR_CYCLE]);
			    
val transform_THM=prove (`` !v. inv_transform (transform v) = v``,
    	SIMP_TAC std_ss [FORALL_PROD] THEN
    	RW_TAC std_ss [transform_def] THEN
    	RW_TAC std_ss [inv_transform_def] THEN
    	FULL_SIMP_TAC arith_ss [Abbrev_def,word32Theory.ROR_ADD,ror_32_lem,WORD_EOR_ID2,WORD_EOR_REDUCTION ]);
				  
val listInstEq33 =prove(`` !l.
        (LENGTH l = 33) ==>
        ?v_0 v_1 v_2 v_3 v_4 v_5 v_6 v_7 v_8 v_9 v_10 v_11 v_12 v_13 v_14
           v_15 v_16 v_17 v_18 v_19 v_20 v_21 v_22 v_23 v_24 v_25 v_26 v_27
           v_28 v_29 v_30 v_31 v_32.
        l =
          [v_0; v_1; v_2; v_3; v_4; v_5; v_6; v_7; v_8; v_9; v_10; v_11;
           v_12; v_13; v_14; v_15; v_16; v_17; v_18; v_19; v_20; v_21; v_22;
           v_23; v_24; v_25; v_26; v_27; v_28; v_29; v_30; v_31; v_32]``,

	      
	       
	REWRITE_TAC [LENGTH_CONS, LENGTH_NIL, DECIDE `` 33 =
       SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC
       (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC
        0)))))))))))))))))))))))))))))))) ``] THEN
	METIS_TAC []); 

val serpent_THM=prove(
``!pt sk. 
	(LENGTH sk=33)
	==>
	(serpent_decrypt (serpent_encrypt pt sk) sk =pt)``,

RW_TAC list_ss [serpent_decrypt_def,serpent_encrypt_def,LET_THM] THEN
`?v_0 v_1 v_2 v_3 v_4 v_5 v_6 v_7 v_8 v_9 v_10 v_11
  v_12 v_13 v_14 v_15 v_16 v_17 v_18 v_19 v_20 v_21 v_22 
  v_23 v_24 v_25 v_26 v_27 v_28 v_29 v_30 v_31 v_32.
 sk=[v_0; v_1; v_2; v_3; v_4; v_5; v_6; v_7; v_8; v_9; v_10; v_11; 
     v_12; v_13; v_14; v_15; v_16; v_17; v_18; v_19; v_20; v_21; v_22; 
     v_23; v_24; v_25; v_26; v_27; v_28; v_29; v_30; v_31; v_32]` 
     by METIS_TAC [listInstEq33] THEN
RW_TAC list_ss [encryptSchedule_def, decryptSchedule_def,f_def,
	encryptRnd00_def,encryptRnd01_def,encryptRnd02_def,encryptRnd03_def,
	encryptRnd04_def,encryptRnd05_def,encryptRnd06_def,encryptRnd07_def,
	encryptRnd08_def,encryptRnd09_def,encryptRnd10_def,encryptRnd11_def,
	encryptRnd12_def,encryptRnd13_def,encryptRnd14_def,encryptRnd15_def,
	encryptRnd16_def,encryptRnd17_def,encryptRnd18_def,encryptRnd19_def,
	encryptRnd20_def,encryptRnd21_def,encryptRnd22_def,encryptRnd23_def,
	encryptRnd24_def,encryptRnd25_def,encryptRnd26_def,encryptRnd27_def,
	encryptRnd28_def,encryptRnd29_def,encryptRnd30_def,encryptRnd31_1_def,
	encryptRnd31_2_def,
	decryptRnd00_1_def,decryptRnd00_2_def,decryptRnd01_def,decryptRnd02_def,
	decryptRnd03_def,decryptRnd04_def,decryptRnd05_def,decryptRnd06_def,
	decryptRnd07_def,decryptRnd08_def,decryptRnd09_def,decryptRnd10_def,
	decryptRnd11_def,decryptRnd12_def,decryptRnd13_def,decryptRnd14_def,
	decryptRnd15_def,decryptRnd16_def,decryptRnd17_def,decryptRnd18_def,
	decryptRnd19_def,decryptRnd20_def,decryptRnd21_def,decryptRnd22_def,
	decryptRnd23_def,decryptRnd24_def,decryptRnd25_def,decryptRnd26_def,
	decryptRnd27_def,decryptRnd28_def,decryptRnd29_def,decryptRnd30_def,
	decryptRnd31_def,
	
	RND00_THM,RND01_THM,RND02_THM,RND03_THM,
	RND04_THM,RND05_THM,RND06_THM,RND07_THM,
	RND08_THM,RND09_THM,RND10_THM,RND11_THM,
	RND12_THM,RND13_THM,RND14_THM,RND15_THM,
	RND16_THM,RND17_THM,RND18_THM,RND19_THM,
	RND20_THM,RND21_THM,RND22_THM,RND23_THM,
	RND24_THM,RND25_THM,RND26_THM,RND27_THM,
	RND28_THM,RND29_THM,RND30_THM,RND31_THM,
	keying_THM,transform_THM]);  userkey 0
userkey length 256
plain text 0x00000000000000000000000000000000

sk [0]=6f5795d0
sk [1]=a7e3a3ce
sk [2]=f2d998ed
sk [3]=8ed77390
sk [4]=8092730a
sk [5]=ece6554a
sk [6]=60a3ebd1
sk [7]=4113a999
sk [8]=fa49ca68
sk [9]=86e649c3
sk [10]=ef402a3c
sk [11]=5108d22a
sk [12]=99eebc8b
sk [13]=8280a673
sk [14]=2e1905b0
sk [15]=fa9026f
sk [16]=3413b4b0
sk [17]=2913e20
sk [18]=ea3f3d7a
sk [19]=8f27bbf2
sk [20]=fca3985a
sk [21]=238dc99c
sk [22]=610536d2
sk [23]=87d980af
sk [24]=35f660f8
sk [25]=5d8751bb
sk [26]=fe9b100c
sk [27]=415297c6
sk [28]=ee42d6ed
sk [29]=d6766ceb
sk [30]=41b4f7d7
sk [31]=e97fd458
sk [32]=f6c9cca8
sk [33]=ea423134
sk [34]=d4ec2645
sk [35]=bcf648c7
sk [36]=46d1e86c
sk [37]=b566124
sk [38]=6b736db9
sk [39]=ec2d2132
sk [40]=32b84c52
sk [41]=ab5da91e
sk [42]=7bff737f
sk [43]=acec090b
sk [44]=8482bb59
sk [45]=d7a0187a
sk [46]=b89dd673
sk [47]=7ed5ea77
sk [48]=d8e083a1
sk [49]=106f0679
sk [50]=f555c276
sk [51]=2b2a6df9
sk [52]=6a3eb570
sk [53]=7eda461c
sk [54]=74b0765
sk [55]=d3692b4f
sk [56]=ab5fe41
sk [57]=ecde7ce5
sk [58]=f9d5d5b0
sk [59]=d7fa42e1
sk [60]=d2442936
sk [61]=eeb113ff
sk [62]=1d07f106
sk [63]=5e4f43de
sk [64]=ce636762
sk [65]=8365cd79
sk [66]=62773b2f
sk [67]=a3fbcb18
sk [68]=a7dd8d94
sk [69]=d72c46c8
sk [70]=e8acd046
sk [71]=31b4bfdb
sk [72]=e15fa63e
sk [73]=56abce9
sk [74]=16d671b
sk [75]=81f0ff69
sk [76]=9dd3267b
sk [77]=8e142c05
sk [78]=3f29596e
sk [79]=6b152640
sk [80]=9b0b05a4
sk [81]=32fce59a
sk [82]=aa5a880f
sk [83]=3722fb5
sk [84]=d6d3ac8a
sk [85]=227497f1
sk [86]=e1f9b18d
sk [87]=e135ba06
sk [88]=69e65c17
sk [89]=59ee3713
sk [90]=8d26c9bb
sk [91]=cab80081
sk [92]=d2a92687
sk [93]=cb6e4c54
sk [94]=6bb274ee
sk [95]=576a5c11
sk [96]=82b76e53
sk [97]=dc644af
sk [98]=58b92c6d
sk [99]=e6712892
sk [100]=49786166
sk [101]=1c008534
sk [102]=e9e89f05
sk [103]=53a44454
sk [104]=5c7d40d9
sk [105]=7d1054a5
sk [106]=e45422e5
sk [107]=fd9652a6
sk [108]=fb9cffb0
sk [109]=44b250c1
sk [110]=49ddf9e
sk [111]=307836d4
sk [112]=4e25ca80
sk [113]=ec3b40c6
sk [114]=7d89514d
sk [115]=2e67f4d9
sk [116]=c5028ed
sk [117]=dce119ec
sk [118]=e1258a5c
sk [119]=614cf840
sk [120]=a9031cc4
sk [121]=efe0e087
sk [122]=5c02cc6e
sk [123]=566d1dcb
sk [124]=3a247410
sk [125]=3d862ba3
sk [126]=8e1e2b0
sk [127]=441d77a7
sk [128]=7bebc481
sk [129]=2f572675
sk [130]=84a2550d
sk [131]=60b526d6
Plaintext          = 00000000000000000000000000000000
Key                = 0000000000000000000000000000000000000000000000000000000000000000
Ciphertext^      1 = 8910494504181950F98DD998A82B6749

**************************************************************
userkey  0x0123456789abcdef0000111122223333
userkey length 128
plain text 0x112233445566778899AABBCCDDEEFFw

sk [0]=f27564bb
sk [1]=512800a6
sk [2]=16881ad0
sk [3]=e7cb330f
sk [4]=f99bf4d9
sk [5]=2fa454a2
sk [6]=dffb26b3
sk [7]=dfdf7703
sk [8]=a2d5eccb
sk [9]=8088f510
sk [10]=4b1c3e1a
sk [11]=34282b53
sk [12]=bfdbdfca
sk [13]=58a5a591
sk [14]=751df570
sk [15]=1837ed03
sk [16]=21354aba
sk [17]=1e720b39
sk [18]=cfb73271
sk [19]=c45073e4
sk [20]=19c9c2d7
sk [21]=d1ad32
sk [22]=97bb9611
sk [23]=bbd7450f
sk [24]=ae5c7175
sk [25]=5b99f4b6
sk [26]=4d62661e
sk [27]=e91f9341
sk [28]=540b35e8
sk [29]=48c60857
sk [30]=48ffe9ce
sk [31]=35e063c4
sk [32]=680d164b
sk [33]=daa821a3
sk [34]=2ca389f9
sk [35]=c8422b66
sk [36]=50968844
sk [37]=5716e9a9
sk [38]=7fbc6462
sk [39]=c9e83dfd
sk [40]=13dde775
sk [41]=f5f31b69
sk [42]=8ab3bc6e
sk [43]=d21993d5
sk [44]=b85d4bc4
sk [45]=fe460d
sk [46]=d4329e83
sk [47]=ed35e050
sk [48]=cf3f5393
sk [49]=2f84b219
sk [50]=34945156
sk [51]=539d02ab
sk [52]=c3005640
sk [53]=5433ca7d
sk [54]=b233d1dd
sk [55]=436de660
sk [56]=3c32fb42
sk [57]=9d22ad2d
sk [58]=d1e6c577
sk [59]=54b3a7b5
sk [60]=dc4fd388
sk [61]=be142cae
sk [62]=7be1ed68
sk [63]=b2ce050d
sk [64]=13e88af4
sk [65]=4b92a49e
sk [66]=30f16390
sk [67]=7cc2ae63
sk [68]=e09b7810
sk [69]=fa81d698
sk [70]=bea768e2
sk [71]=a1f8296c
sk [72]=865dba68
sk [73]=b99f64bd
sk [74]=d978fb8c
sk [75]=e3e4da06
sk [76]=49f33ff
sk [77]=249513d2
sk [78]=5ba39738
sk [79]=3ff61bd7
sk [80]=448002f7
sk [81]=f0ce14f5
sk [82]=f5a14ecd
sk [83]=3866b7a5
sk [84]=be6afc6a
sk [85]=dc00257a
sk [86]=73e2c3e4
sk [87]=b3197a50
sk [88]=9aa2a637
sk [89]=9c61afe7
sk [90]=d19ca640
sk [91]=638eff88
sk [92]=feb140a1
sk [93]=dcce15db
sk [94]=8d081194
sk [95]=a46008bc
sk [96]=2a3f782e
sk [97]=3ea9d5b1
sk [98]=a13f79d6
sk [99]=345b0590
sk [100]=7766af41
sk [101]=3adf9570
sk [102]=1b6299ce
sk [103]=1449e9dd
sk [104]=bc76c376
sk [105]=587e873b
sk [106]=5c669b96
sk [107]=e292d0e7
sk [108]=388d90c
sk [109]=b1d38436
sk [110]=bf04be76
sk [111]=af626d42
sk [112]=4565045d
sk [113]=d8beaa29
sk [114]=2c894a8b
sk [115]=bf3ee3e4
sk [116]=845827e
sk [117]=9f0d9c09
sk [118]=42e0ba94
sk [119]=8e84ec
sk [120]=ca3c6c43
sk [121]=d77fbddf
sk [122]=57a9394d
sk [123]=a6bef0d3
sk [124]=f0df93e9
sk [125]=85412973
sk [126]=faa7a2b1
sk [127]=48156118
sk [128]=2c1acdec
sk [129]=59c783b9
sk [130]=3c5ff73d
sk [131]=f4d0b6b7
Plaintext          = 00112233445566778899AABBCCDDEEFF
Key                = 000000000000000000000000000000000123456789ABCDEF0000111122223333
Ciphertext^      1 = B0C75A6E4D5AC0ABF964D6EBA59CF3A7









userkey 0
userkey length 256
plain text 0x00000000000000000000000000000000

SERPENTOPT_CONV ``makeKey 0 256``;

|- makeKey 0 256 =
       [(0x6F5795D0w,0xA7E3A3CEw,0xF2D998EDw,0x8ED77390w);
        (0x8092730Aw,0xECE6554Aw,0x60A3EBD1w,0x4113A999w);
        (0xFA49CA68w,0x86E649C3w,0xEF402A3Cw,0x5108D22Aw);
        (0x99EEBC8Bw,0x8280A673w,0x2E1905B0w,0xFA9026Fw);
        (0x3413B4B0w,0x2913E20w,0xEA3F3D7Aw,0x8F27BBF2w);
        (0xFCA3985Aw,0x238DC99Cw,0x610536D2w,0x87D980AFw);
        (0x35F660F8w,0x5D8751BBw,0xFE9B100Cw,0x415297C6w);
        (0xEE42D6EDw,0xD6766CEBw,0x41B4F7D7w,0xE97FD458w);
        (0xF6C9CCA8w,0xEA423134w,0xD4EC2645w,0xBCF648C7w);
        (0x46D1E86Cw,0xB566124w,0x6B736DB9w,0xEC2D2132w);
        (0x32B84C52w,0xAB5DA91Ew,0x7BFF737Fw,0xACEC090Bw);
        (0x8482BB59w,0xD7A0187Aw,0xB89DD673w,0x7ED5EA77w);
        (0xD8E083A1w,0x106F0679w,0xF555C276w,0x2B2A6DF9w);
        (0x6A3EB570w,0x7EDA461Cw,0x74B0765w,0xD3692B4Fw);
        (0xAB5FE41w,0xECDE7CE5w,0xF9D5D5B0w,0xD7FA42E1w);
        (0xD2442936w,0xEEB113FFw,0x1D07F106w,0x5E4F43DEw);
        (0xCE636762w,0x8365CD79w,0x62773B2Fw,0xA3FBCB18w);
        (0xA7DD8D94w,0xD72C46C8w,0xE8ACD046w,0x31B4BFDBw);
        (0xE15FA63Ew,0x56ABCE9w,0x16D671Bw,0x81F0FF69w);
        (0x9DD3267Bw,0x8E142C05w,0x3F29596Ew,0x6B152640w);
        (0x9B0B05A4w,0x32FCE59Aw,0xAA5A880Fw,0x3722FB5w);
        (0xD6D3AC8Aw,0x227497F1w,0xE1F9B18Dw,0xE135BA06w);
        (0x69E65C17w,0x59EE3713w,0x8D26C9BBw,0xCAB80081w);
        (0xD2A92687w,0xCB6E4C54w,0x6BB274EEw,0x576A5C11w);
        (0x82B76E53w,0xDC644AFw,0x58B92C6Dw,0xE6712892w);
        (0x49786166w,0x1C008534w,0xE9E89F05w,0x53A44454w);
        (0x5C7D40D9w,0x7D1054A5w,0xE45422E5w,0xFD9652A6w);
        (0xFB9CFFB0w,0x44B250C1w,0x49DDF9Ew,0x307836D4w);
        (0x4E25CA80w,0xEC3B40C6w,0x7D89514Dw,0x2E67F4D9w);
        (0xC5028EDw,0xDCE119ECw,0xE1258A5Cw,0x614CF840w);
        (0xA9031CC4w,0xEFE0E087w,0x5C02CC6Ew,0x566D1DCBw);
        (0x3A247410w,0x3D862BA3w,0x8E1E2B0w,0x441D77A7w);
        (0x7BEBC481w,0x2F572675w,0x84A2550Dw,0x60B526D6w)] : thm
	
SERPENTOPT_CONV `` serpent_encrypt (0x0w, 0x0w,0x0w,0x0w)
[(0x6F5795D0w,0xA7E3A3CEw,0xF2D998EDw,0x8ED77390w);
        (0x8092730Aw,0xECE6554Aw,0x60A3EBD1w,0x4113A999w);
        (0xFA49CA68w,0x86E649C3w,0xEF402A3Cw,0x5108D22Aw);
        (0x99EEBC8Bw,0x8280A673w,0x2E1905B0w,0xFA9026Fw);
        (0x3413B4B0w,0x2913E20w,0xEA3F3D7Aw,0x8F27BBF2w);
        (0xFCA3985Aw,0x238DC99Cw,0x610536D2w,0x87D980AFw);
        (0x35F660F8w,0x5D8751BBw,0xFE9B100Cw,0x415297C6w);
        (0xEE42D6EDw,0xD6766CEBw,0x41B4F7D7w,0xE97FD458w);
        (0xF6C9CCA8w,0xEA423134w,0xD4EC2645w,0xBCF648C7w);
        (0x46D1E86Cw,0xB566124w,0x6B736DB9w,0xEC2D2132w);
        (0x32B84C52w,0xAB5DA91Ew,0x7BFF737Fw,0xACEC090Bw);
        (0x8482BB59w,0xD7A0187Aw,0xB89DD673w,0x7ED5EA77w);
        (0xD8E083A1w,0x106F0679w,0xF555C276w,0x2B2A6DF9w);
        (0x6A3EB570w,0x7EDA461Cw,0x74B0765w,0xD3692B4Fw);
        (0xAB5FE41w,0xECDE7CE5w,0xF9D5D5B0w,0xD7FA42E1w);
        (0xD2442936w,0xEEB113FFw,0x1D07F106w,0x5E4F43DEw);
        (0xCE636762w,0x8365CD79w,0x62773B2Fw,0xA3FBCB18w);
        (0xA7DD8D94w,0xD72C46C8w,0xE8ACD046w,0x31B4BFDBw);
        (0xE15FA63Ew,0x56ABCE9w,0x16D671Bw,0x81F0FF69w);
        (0x9DD3267Bw,0x8E142C05w,0x3F29596Ew,0x6B152640w);
        (0x9B0B05A4w,0x32FCE59Aw,0xAA5A880Fw,0x3722FB5w);
        (0xD6D3AC8Aw,0x227497F1w,0xE1F9B18Dw,0xE135BA06w);
        (0x69E65C17w,0x59EE3713w,0x8D26C9BBw,0xCAB80081w);
        (0xD2A92687w,0xCB6E4C54w,0x6BB274EEw,0x576A5C11w);
        (0x82B76E53w,0xDC644AFw,0x58B92C6Dw,0xE6712892w);
        (0x49786166w,0x1C008534w,0xE9E89F05w,0x53A44454w);
        (0x5C7D40D9w,0x7D1054A5w,0xE45422E5w,0xFD9652A6w);
        (0xFB9CFFB0w,0x44B250C1w,0x49DDF9Ew,0x307836D4w);
        (0x4E25CA80w,0xEC3B40C6w,0x7D89514Dw,0x2E67F4D9w);
        (0xC5028EDw,0xDCE119ECw,0xE1258A5Cw,0x614CF840w);
        (0xA9031CC4w,0xEFE0E087w,0x5C02CC6Ew,0x566D1DCBw);
        (0x3A247410w,0x3D862BA3w,0x8E1E2B0w,0x441D77A7w);
        (0x7BEBC481w,0x2F572675w,0x84A2550Dw,0x60B526D6w)] ``;
	|- serpent_encrypt (0x0w,0x0w,0x0w,0x0w)
         [(0x6F5795D0w,0xA7E3A3CEw,0xF2D998EDw,0x8ED77390w);
          (0x8092730Aw,0xECE6554Aw,0x60A3EBD1w,0x4113A999w);
          (0xFA49CA68w,0x86E649C3w,0xEF402A3Cw,0x5108D22Aw);
          (0x99EEBC8Bw,0x8280A673w,0x2E1905B0w,0xFA9026Fw);
          (0x3413B4B0w,0x2913E20w,0xEA3F3D7Aw,0x8F27BBF2w);
          (0xFCA3985Aw,0x238DC99Cw,0x610536D2w,0x87D980AFw);
          (0x35F660F8w,0x5D8751BBw,0xFE9B100Cw,0x415297C6w);
          (0xEE42D6EDw,0xD6766CEBw,0x41B4F7D7w,0xE97FD458w);
          (0xF6C9CCA8w,0xEA423134w,0xD4EC2645w,0xBCF648C7w);
          (0x46D1E86Cw,0xB566124w,0x6B736DB9w,0xEC2D2132w);
          (0x32B84C52w,0xAB5DA91Ew,0x7BFF737Fw,0xACEC090Bw);
          (0x8482BB59w,0xD7A0187Aw,0xB89DD673w,0x7ED5EA77w);
          (0xD8E083A1w,0x106F0679w,0xF555C276w,0x2B2A6DF9w);
          (0x6A3EB570w,0x7EDA461Cw,0x74B0765w,0xD3692B4Fw);
          (0xAB5FE41w,0xECDE7CE5w,0xF9D5D5B0w,0xD7FA42E1w);
          (0xD2442936w,0xEEB113FFw,0x1D07F106w,0x5E4F43DEw);
          (0xCE636762w,0x8365CD79w,0x62773B2Fw,0xA3FBCB18w);
          (0xA7DD8D94w,0xD72C46C8w,0xE8ACD046w,0x31B4BFDBw);
          (0xE15FA63Ew,0x56ABCE9w,0x16D671Bw,0x81F0FF69w);
          (0x9DD3267Bw,0x8E142C05w,0x3F29596Ew,0x6B152640w);
          (0x9B0B05A4w,0x32FCE59Aw,0xAA5A880Fw,0x3722FB5w);
          (0xD6D3AC8Aw,0x227497F1w,0xE1F9B18Dw,0xE135BA06w);
          (0x69E65C17w,0x59EE3713w,0x8D26C9BBw,0xCAB80081w);
          (0xD2A92687w,0xCB6E4C54w,0x6BB274EEw,0x576A5C11w);
          (0x82B76E53w,0xDC644AFw,0x58B92C6Dw,0xE6712892w);
          (0x49786166w,0x1C008534w,0xE9E89F05w,0x53A44454w);
          (0x5C7D40D9w,0x7D1054A5w,0xE45422E5w,0xFD9652A6w);
          (0xFB9CFFB0w,0x44B250C1w,0x49DDF9Ew,0x307836D4w);
          (0x4E25CA80w,0xEC3B40C6w,0x7D89514Dw,0x2E67F4D9w);
          (0xC5028EDw,0xDCE119ECw,0xE1258A5Cw,0x614CF840w);
          (0xA9031CC4w,0xEFE0E087w,0x5C02CC6Ew,0x566D1DCBw);
          (0x3A247410w,0x3D862BA3w,0x8E1E2B0w,0x441D77A7w);
          (0x7BEBC481w,0x2F572675w,0x84A2550Dw,0x60B526D6w)] =
       (0xA82B6749w,0xF98DD998w,0x4181950w,0x89104945w) : thm
**********************************************************************
userkey  0x0123456789abcdef0000111122223333
userkey length 128
plain text 0x112233445566778899AABBCCDDEEFFw

SERPENTOPT_CONV ``makeKey 0x0123456789abcdef0000111122223333 128``;
 makeKey 1512366075204170928967615590474855219 128 =
       [(0xF27564BBw,0x512800A6w,0x16881AD0w,0xE7CB330Fw);
        (0xF99BF4D9w,0x2FA454A2w,0xDFFB26B3w,0xDFDF7703w);
        (0xA2D5ECCBw,0x8088F510w,0x4B1C3E1Aw,0x34282B53w);
        (0xBFDBDFCAw,0x58A5A591w,0x751DF570w,0x1837ED03w);
        (0x21354ABAw,0x1E720B39w,0xCFB73271w,0xC45073E4w);
        (0x19C9C2D7w,0xD1AD32w,0x97BB9611w,0xBBD7450Fw);
        (0xAE5C7175w,0x5B99F4B6w,0x4D62661Ew,0xE91F9341w);
        (0x540B35E8w,0x48C60857w,0x48FFE9CEw,0x35E063C4w);
        (0x680D164Bw,0xDAA821A3w,0x2CA389F9w,0xC8422B66w);
        (0x50968844w,0x5716E9A9w,0x7FBC6462w,0xC9E83DFDw);
        (0x13DDE775w,0xF5F31B69w,0x8AB3BC6Ew,0xD21993D5w);
        (0xB85D4BC4w,0xFE460Dw,0xD4329E83w,0xED35E050w);
        (0xCF3F5393w,0x2F84B219w,0x34945156w,0x539D02ABw);
        (0xC3005640w,0x5433CA7Dw,0xB233D1DDw,0x436DE660w);
        (0x3C32FB42w,0x9D22AD2Dw,0xD1E6C577w,0x54B3A7B5w);
        (0xDC4FD388w,0xBE142CAEw,0x7BE1ED68w,0xB2CE050Dw);
        (0x13E88AF4w,0x4B92A49Ew,0x30F16390w,0x7CC2AE63w);
        (0xE09B7810w,0xFA81D698w,0xBEA768E2w,0xA1F8296Cw);
        (0x865DBA68w,0xB99F64BDw,0xD978FB8Cw,0xE3E4DA06w);
        (0x49F33FFw,0x249513D2w,0x5BA39738w,0x3FF61BD7w);
        (0x448002F7w,0xF0CE14F5w,0xF5A14ECDw,0x3866B7A5w);
        (0xBE6AFC6Aw,0xDC00257Aw,0x73E2C3E4w,0xB3197A50w);
        (0x9AA2A637w,0x9C61AFE7w,0xD19CA640w,0x638EFF88w);
        (0xFEB140A1w,0xDCCE15DBw,0x8D081194w,0xA46008BCw);
        (0x2A3F782Ew,0x3EA9D5B1w,0xA13F79D6w,0x345B0590w);
        (0x7766AF41w,0x3ADF9570w,0x1B6299CEw,0x1449E9DDw);
        (0xBC76C376w,0x587E873Bw,0x5C669B96w,0xE292D0E7w);
        (0x388D90Cw,0xB1D38436w,0xBF04BE76w,0xAF626D42w);
        (0x4565045Dw,0xD8BEAA29w,0x2C894A8Bw,0xBF3EE3E4w);
        (0x845827Ew,0x9F0D9C09w,0x42E0BA94w,0x8E84ECw);
        (0xCA3C6C43w,0xD77FBDDFw,0x57A9394Dw,0xA6BEF0D3w);
        (0xF0DF93E9w,0x85412973w,0xFAA7A2B1w,0x48156118w);
        (0x2C1ACDECw,0x59C783B9w,0x3C5FF73Dw,0xF4D0B6B7w)] : thm

SERPENTOPT_CONV ``serpent_encrypt 
        (0xCCDDEEFFw, 0x8899AABBw, 0x44556677w, 0x112233w)
        [(0xF27564BBw,0x512800A6w,0x16881AD0w,0xE7CB330Fw);
        (0xF99BF4D9w,0x2FA454A2w,0xDFFB26B3w,0xDFDF7703w);
        (0xA2D5ECCBw,0x8088F510w,0x4B1C3E1Aw,0x34282B53w);
        (0xBFDBDFCAw,0x58A5A591w,0x751DF570w,0x1837ED03w);
        (0x21354ABAw,0x1E720B39w,0xCFB73271w,0xC45073E4w);
        (0x19C9C2D7w,0xD1AD32w,0x97BB9611w,0xBBD7450Fw);
        (0xAE5C7175w,0x5B99F4B6w,0x4D62661Ew,0xE91F9341w);
        (0x540B35E8w,0x48C60857w,0x48FFE9CEw,0x35E063C4w);
        (0x680D164Bw,0xDAA821A3w,0x2CA389F9w,0xC8422B66w);
        (0x50968844w,0x5716E9A9w,0x7FBC6462w,0xC9E83DFDw);
        (0x13DDE775w,0xF5F31B69w,0x8AB3BC6Ew,0xD21993D5w);
        (0xB85D4BC4w,0xFE460Dw,0xD4329E83w,0xED35E050w);
        (0xCF3F5393w,0x2F84B219w,0x34945156w,0x539D02ABw);
        (0xC3005640w,0x5433CA7Dw,0xB233D1DDw,0x436DE660w);
        (0x3C32FB42w,0x9D22AD2Dw,0xD1E6C577w,0x54B3A7B5w);
        (0xDC4FD388w,0xBE142CAEw,0x7BE1ED68w,0xB2CE050Dw);
        (0x13E88AF4w,0x4B92A49Ew,0x30F16390w,0x7CC2AE63w);
        (0xE09B7810w,0xFA81D698w,0xBEA768E2w,0xA1F8296Cw);
        (0x865DBA68w,0xB99F64BDw,0xD978FB8Cw,0xE3E4DA06w);
        (0x49F33FFw,0x249513D2w,0x5BA39738w,0x3FF61BD7w);
        (0x448002F7w,0xF0CE14F5w,0xF5A14ECDw,0x3866B7A5w);
        (0xBE6AFC6Aw,0xDC00257Aw,0x73E2C3E4w,0xB3197A50w);
        (0x9AA2A637w,0x9C61AFE7w,0xD19CA640w,0x638EFF88w);
        (0xFEB140A1w,0xDCCE15DBw,0x8D081194w,0xA46008BCw);
        (0x2A3F782Ew,0x3EA9D5B1w,0xA13F79D6w,0x345B0590w);
        (0x7766AF41w,0x3ADF9570w,0x1B6299CEw,0x1449E9DDw);
        (0xBC76C376w,0x587E873Bw,0x5C669B96w,0xE292D0E7w);
        (0x388D90Cw,0xB1D38436w,0xBF04BE76w,0xAF626D42w);
        (0x4565045Dw,0xD8BEAA29w,0x2C894A8Bw,0xBF3EE3E4w);
        (0x845827Ew,0x9F0D9C09w,0x42E0BA94w,0x8E84ECw);
        (0xCA3C6C43w,0xD77FBDDFw,0x57A9394Dw,0xA6BEF0D3w);
        (0xF0DF93E9w,0x85412973w,0xFAA7A2B1w,0x48156118w);
        (0x2C1ACDECw,0x59C783B9w,0x3C5FF73Dw,0xF4D0B6B7w)]``;
	
 serpent_encrypt (0xCCDDEEFFw,0x8899AABBw,0x44556677w,0x112233w)
         [(0xF27564BBw,0x512800A6w,0x16881AD0w,0xE7CB330Fw);
          (0xF99BF4D9w,0x2FA454A2w,0xDFFB26B3w,0xDFDF7703w);
          (0xA2D5ECCBw,0x8088F510w,0x4B1C3E1Aw,0x34282B53w);
          (0xBFDBDFCAw,0x58A5A591w,0x751DF570w,0x1837ED03w);
          (0x21354ABAw,0x1E720B39w,0xCFB73271w,0xC45073E4w);
          (0x19C9C2D7w,0xD1AD32w,0x97BB9611w,0xBBD7450Fw);
          (0xAE5C7175w,0x5B99F4B6w,0x4D62661Ew,0xE91F9341w);
          (0x540B35E8w,0x48C60857w,0x48FFE9CEw,0x35E063C4w);
          (0x680D164Bw,0xDAA821A3w,0x2CA389F9w,0xC8422B66w);
          (0x50968844w,0x5716E9A9w,0x7FBC6462w,0xC9E83DFDw);
          (0x13DDE775w,0xF5F31B69w,0x8AB3BC6Ew,0xD21993D5w);
          (0xB85D4BC4w,0xFE460Dw,0xD4329E83w,0xED35E050w);
          (0xCF3F5393w,0x2F84B219w,0x34945156w,0x539D02ABw);
          (0xC3005640w,0x5433CA7Dw,0xB233D1DDw,0x436DE660w);
          (0x3C32FB42w,0x9D22AD2Dw,0xD1E6C577w,0x54B3A7B5w);
          (0xDC4FD388w,0xBE142CAEw,0x7BE1ED68w,0xB2CE050Dw);
          (0x13E88AF4w,0x4B92A49Ew,0x30F16390w,0x7CC2AE63w);
          (0xE09B7810w,0xFA81D698w,0xBEA768E2w,0xA1F8296Cw);
          (0x865DBA68w,0xB99F64BDw,0xD978FB8Cw,0xE3E4DA06w);
          (0x49F33FFw,0x249513D2w,0x5BA39738w,0x3FF61BD7w);
          (0x448002F7w,0xF0CE14F5w,0xF5A14ECDw,0x3866B7A5w);
          (0xBE6AFC6Aw,0xDC00257Aw,0x73E2C3E4w,0xB3197A50w);
          (0x9AA2A637w,0x9C61AFE7w,0xD19CA640w,0x638EFF88w);
          (0xFEB140A1w,0xDCCE15DBw,0x8D081194w,0xA46008BCw);
          (0x2A3F782Ew,0x3EA9D5B1w,0xA13F79D6w,0x345B0590w);
          (0x7766AF41w,0x3ADF9570w,0x1B6299CEw,0x1449E9DDw);
          (0xBC76C376w,0x587E873Bw,0x5C669B96w,0xE292D0E7w);
          (0x388D90Cw,0xB1D38436w,0xBF04BE76w,0xAF626D42w);
          (0x4565045Dw,0xD8BEAA29w,0x2C894A8Bw,0xBF3EE3E4w);
          (0x845827Ew,0x9F0D9C09w,0x42E0BA94w,0x8E84ECw);
          (0xCA3C6C43w,0xD77FBDDFw,0x57A9394Dw,0xA6BEF0D3w);
          (0xF0DF93E9w,0x85412973w,0xFAA7A2B1w,0x48156118w);
          (0x2C1ACDECw,0x59C783B9w,0x3C5FF73Dw,0xF4D0B6B7w)] =
       (0xA59CF3A7w,0xF964D6EBw,0x4D5AC0ABw,0xB0C75A6Ew) : thm
