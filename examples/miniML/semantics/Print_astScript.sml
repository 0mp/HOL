(* generated by Lem from print_ast.lem *)
open bossLib Theory Parse res_quanTheory
open finite_mapTheory listTheory pairTheory pred_setTheory integerTheory
open set_relationTheory sortingTheory stringTheory wordsTheory

val _ = new_theory "Print_ast"

open MiniMLTheory

(*open MiniML*)

val _ = Hol_datatype `
 stree = S of string | A of stree => stree`;


(*val (^^) : stree -> stree -> stree*)

(*val stree_to_string : stree -> string -> string*)
 val stree_to_string_defn = Hol_defn "stree_to_string" `

(stree_to_string (S s) acc = STRCAT  s  acc)
/\
(stree_to_string (A s1 s2) acc = stree_to_string s1 (stree_to_string s2 acc))`;

val _ = Defn.save_defn stree_to_string_defn;

(*val spaces : num -> stree*)
 val spaces_defn = Hol_defn "spaces" `
 
(spaces n =
  if n = 0 then
    S""
  else A 
    (S" ")  (spaces (n - 1)))`;

val _ = Defn.save_defn spaces_defn;

(* TODO: use a built-in int_to_string *)

 val pos_int_to_string_defn = Hol_defn "pos_int_to_string" `
 (pos_int_to_string n =
  if int_gt n (& 0) then
    let n' = int_mod n (& 10) in A 
      (pos_int_to_string (int_div n (& 10))) 
      (if n' = & 0 then S"0"
       else if n' = & 1 then S"1"
       else if n' = & 2 then S"2"
       else if n' = & 3 then S"3"
       else if n' = & 4 then S"4"
       else if n' = & 5 then S"5"
       else if n' = & 6 then S"6"
       else if n' = & 7 then S"7"
       else if n' = & 8 then S"8"
       else S"9")
  else
    S"")`;

val _ = Defn.save_defn pos_int_to_string_defn;

(*val int_to_stree : bool -> Int.int -> stree*)
val _ = Define `
 (int_to_stree sml n =
  if n = & 0 then
    S"0"
  else if int_gt n (& 0) then
    pos_int_to_string n
  else A 
    (if sml then S"~" else S"-")  (pos_int_to_string ((int_sub) (& 0) n)))`;


val _ = Define `
 sml_infixes = ["="; "+"; "-"; "*"; "div"; "mod"; "<"; ">"; "<="; ">="]`;

val _ = Define `
 ocaml_infixes = ["="; "+"; "-"; "*"; "/"; "mod"; "<"; ">"; "<="; ">="]`;


(*val join_strings : stree -> stree list -> stree*)
 val join_strings_defn = Hol_defn "join_strings" `

(join_strings sep [] = S"")
/\
(join_strings sep [x] = x)
/\
(join_strings sep (x::y::l) = A 
  x (A   sep  (join_strings sep (y::l))))`;

val _ = Defn.save_defn join_strings_defn;

val _ = Define `
 (lit_to_stree sml l = (case l of
  (* Rely on the fact that true and false cannot be rebound in SML *)
    Bool T => S"true"
  | Bool F => S"false"
  | IntLit n => int_to_stree sml n
))`;


val _ = Define `
 (var_to_stree sml v =
  if sml /\ MEM v sml_infixes then A 
    (S"op ")  (S v)
  else if ~ sml /\ MEM v ocaml_infixes then A 
    (S"(") (A   (S v)  (S")"))
  else
    S v)`;


 val pat_to_stree_defn = Hol_defn "pat_to_stree" `

(pat_to_stree sml (Pvar v) = var_to_stree sml v)
/\
(pat_to_stree sml (Plit l) = lit_to_stree sml l)
/\
(pat_to_stree sml (Pcon NONE ps) = A  
  (S"(") (A   (join_strings (S",") (MAP (pat_to_stree sml) ps))  (S")")))
/\
(pat_to_stree sml (Pcon (SOME c) []) =
  var_to_stree sml c)
/\
(pat_to_stree sml (Pcon (SOME c) ps) = A 
  (S"(") (A   (var_to_stree sml c) (A   
    (S"(") (A   (join_strings (S",") (MAP (pat_to_stree sml) ps)) (A   (S")")  (S")"))))))`;

val _ = Defn.save_defn pat_to_stree_defn;

 val exp_to_stree_defn = Hol_defn "exp_to_stree" `

(exp_to_stree sml indent (Raise r) =
  if sml then
    S"(raise Bind)"
  else
    S"(raise (Match_failure (string_of_bool true,0,0)))")
/\
(exp_to_stree sml indent (Val (Lit l)) =
  lit_to_stree sml l)
/\
(exp_to_stree sml indent (Val _) =
  (* This shouldn't happen in source *)
  S"")
/\
(exp_to_stree sml indent (Con NONE es) = A  
  (S"(") (A   (join_strings (S",") (MAP (exp_to_stree sml indent) es))  (S")")))
/\
(exp_to_stree sml indent (Con (SOME c) []) =
  var_to_stree sml c)
/\
(exp_to_stree sml indent (Con (SOME c) es) = A 
  (S"(") (A   
  (var_to_stree sml c) (A   
  (S"(") (A   
  (join_strings (S",") (MAP (exp_to_stree sml indent) es))  
  (S"))")))))
/\
(exp_to_stree sml indent (Var v) =
  var_to_stree sml v)
/\
(exp_to_stree sml indent (Fun v e) = A 
  (if sml then S"(fn " else S"(fun ") (A  
  (var_to_stree sml v) (A   
  (if sml then S" =>" else S" ->") (A   
  (S"\n") (A  
  (spaces (indent + 2)) (A  
  (exp_to_stree sml (indent + 2) e) (A   
  (S")\n") 
  (spaces indent))))))))
/\
(exp_to_stree sml indent (App Opapp e1 e2) = A 
  (S"(") (A   
  (exp_to_stree sml indent e1) (A   
  (S" ") (A   
  (exp_to_stree sml indent e2)  
  (S")")))))
/\
(exp_to_stree sml indent (App Equality e1 e2) = A 
  (S"(") (A   
  (exp_to_stree sml indent e1) (A   
  (S" = ") (A   
  (exp_to_stree sml indent e2)  
  (S")")))))
/\
(exp_to_stree sml indent (App (Opn o0) e1 e2) =
  let s = (case o0 of
      Plus => "+"
    | Minus => "-"
    | Times => "*"
    | Divide => if sml then "div" else "/"
    | Modulo => "mod"
  )
  in A 
    (S"(") (A   
    (exp_to_stree sml indent e1) (A   
    (S" ") (A   
    (S s) (A   
    (S" ") (A   
    (exp_to_stree sml indent e2)  
    (S")")))))))
/\
(exp_to_stree sml indent (App (Opb o') e1 e2) =
  let s = (case o' of
      Lt => "<"
    | Gt => ">"
    | Leq => "<="
    | Geq => ">"
  )
  in A 
    (S"(") (A   
    (exp_to_stree sml indent e1) (A   
    (S" ") (A   
    (S s) (A   
    (S" ") (A   
    (exp_to_stree sml indent e2)  
    (S")")))))))
/\
(exp_to_stree sml indent (Log lop e1 e2) = A 
  (S"(") (A   
  (exp_to_stree sml indent e1) (A   
  (if lop = And then 
     if sml then S" andalso " else S" && " 
   else 
     if sml then S" orelse " else S" || ") (A  
  (exp_to_stree sml indent e2)  
  (S")")))))
/\
(exp_to_stree sml indent (If e1 e2 e3) = A 
  (S"(if ") (A   
  (exp_to_stree sml indent e1) (A   
  (S" then\n") (A   
  (spaces (indent+2)) (A  
  (exp_to_stree sml (indent+2) e2) (A  
  (S"\n") (A  
  (spaces indent) (A  
  (S"else\n") (A  
  (spaces (indent+2)) (A  
  (exp_to_stree sml (indent+2) e3) (A   
  (S")\n") 
  (spaces indent))))))))))))
/\
(exp_to_stree sml indent (Mat e pes) = A 
  (if sml then S"(case " else S"(match ") (A   
  (exp_to_stree sml indent e) (A   
  (if sml then S" of" else S" with") (A  
  (spaces (indent + 2)) (A  
  (join_strings ( A (S"\n") (A   (spaces (indent + 2))  (S"| "))) 
               (MAP (pat_exp_to_stree sml (indent + 2)) pes)) (A   
  (S")\n") 
  (spaces indent)))))))
/\
(exp_to_stree sml indent (Let v e1 e2) = A 
  (if sml then S"let val " else S"let ") (A   
  (var_to_stree sml v) (A   
  (S" =\n") (A   
  (spaces (indent + 2)) (A  
  (exp_to_stree sml indent e1) (A   
  (S"\n") (A  
  (spaces indent) (A  
  (S"in\n") (A  
  (spaces (indent+2)) (A  
  (exp_to_stree sml indent e2) (A   
  (S"\n") (A  
  (spaces indent) 
  (if sml then A  (S" end\n")  (spaces indent) else S"")))))))))))))
/\
(exp_to_stree sml indent (Letrec funs e) = A 
  (if sml then S"let fun " else S"let rec") (A   
  (join_strings ( A (S"\n") (A   (spaces indent)  (S"and "))) 
               (MAP (fun_to_stree sml indent) funs)) (A   
  (S"\n") (A  
  (spaces indent) (A  
  (S"in\n") (A  
  (spaces (indent+2)) (A  
  (exp_to_stree sml indent e) (A   
  (S"\n") (A  
  (spaces indent) 
  (if sml then A  (S" end\n")  (spaces indent) else S""))))))))))
/\
(pat_exp_to_stree sml indent (p,e) = A 
  (pat_to_stree sml p) (A   
  (if sml then S" =>\n" else S" ->\n") (A  
  (spaces (indent + 2)) 
  (exp_to_stree sml (indent + 2) e))))
/\
(fun_to_stree sml indent (v1,v2,e) = A 
  (var_to_stree sml v1) (A  
  (S" ") (A   
  (var_to_stree sml v2) (A   
  (S" =\n") (A   
  (spaces (indent + 2)) 
  (exp_to_stree sml (indent + 2) e))))))`;

val _ = Defn.save_defn exp_to_stree_defn;

 val type_to_stree_defn = Hol_defn "type_to_stree" `

(type_to_stree (Tvar tn) =
  S tn)
/\
(type_to_stree (Tapp ts tn) =
  if ts = [] then
    S tn
  else A 
    (S"(") (A   (join_strings (S",") (MAP type_to_stree ts)) (A   (S")")  (S tn))))
/\
(type_to_stree (Tfn t1 t2) = A 
  (S"(") (A   (type_to_stree t1) (A   (S" -> ") (A   (type_to_stree t2)  (S")")))))
/\
(type_to_stree Tnum =
  S"int")
/\
(type_to_stree Tbool =
  S"bool")`;

val _ = Defn.save_defn type_to_stree_defn;

val _ = Define `
 (variant_to_stree sml (c,ts) = A 
  (var_to_stree sml c) (A   (if ts = [] then S"" else S" of ") 
  (join_strings (S" * ") (MAP type_to_stree ts))))`;


(*val typedef_to_stree : bool -> num -> tvarN list * typeN * (conN * t list) list -> stree*)
val _ = Define `
 (typedef_to_stree sml indent (tvs, name, variants) = A 
  (if tvs = [] then 
     S"" 
   else A  
     (S"(") (A   (join_strings (S",") (MAP S tvs))  (S")"))) (A  
  (S name) (A   
  (S "=\n") (A  
  (spaces (indent + 2)) 
  (join_strings ( A (S"\n") (A   (spaces (indent + 2))  (S"| "))) 
               (MAP (variant_to_stree sml) variants))))))`;


val _ = Define `
 (dec_to_stree sml indent d =
  (case d of
      Dlet p e => A 
        (if sml then S"val " else S"let ") (A  
        (pat_to_stree sml p) (A   
        (S" =\n") (A   
        (spaces (indent + 2)) 
        (exp_to_stree sml (indent + 2) e))))
    | Dletrec funs => A 
        (if sml then S"fun " else S"let rec ")  
        (join_strings ( A (S"\n") (A   (spaces indent)  (S"and "))) 
                     (MAP (fun_to_stree sml indent) funs))
    | Dtype types => A 
        (if sml then S"datatype " else S"type ")  
        (join_strings ( A (S"\n") (A   (spaces indent)  (S"and "))) 
                     (MAP (typedef_to_stree sml indent) types))
  ))`;


val _ = Define `
 (dec_to_sml_string d = stree_to_string (dec_to_stree T 0 d) "")`;

val _ = Define `
 (dec_to_ocaml_string d = stree_to_string (dec_to_stree F 0 d) "")`;

val _ = export_theory()

