The code in this directory generates DFAs from regular expressions.
There are two ways to go, with an identical interface.

  1. HOL proof
  2. SML code with no proofs generated

The following are the important ML structures and HOL theories.

Regexp_Type

   * SML definition of the type of regular expressions. This lies at
     the base of both "proof" and "code" paths.

   * The size of the alphabet (default 256) can be set here, and the
     resulting matchers will work properly. Note that large alphabets 
     like Unicode will need a different approach. Also note that the
     interval encodings assume that the alphabet size is 256.

   * There is a regexp parser supplied (entrypoints: fromSubstring,
     fromString, fromQuote). See below for the concrete syntax. The
     files test.ml and test.hol have examples.

Regexp_Match.

   * SML implementation of the regexp match compiler. Does not
     generate proofs. Is close to the algorithms in regexpTheory.

charset{Script,Theory}. 

   * The type of regular expressions uses character sets. Since there
     is more than one way to implement this, we have broken it out
     into a separate theory.

regexp{Script,Theory}.

   * HOL theory of regexps, and regexp compilation to DFAs. The
     Regexp_Match code has been (mostly) hand-translated from this
     theory.

eq_cmp_bmap{Script,Theory}

   * Extension to the balanced_map theory, to support the common case
     where the set of keys mapping to an element is a singleton. This
     is used to relate balanced_mapTheory to finite_mapTheory.

vec_map{Script,Theory}

   * Support theory for translating maps into vector format.

regexp_compiler{Script,Theory}.

   * HOL theory proving correctness of derivative-based compiler 
    from regexps to DFAs.

regexpSyntax.

    * Support for manipulating regexp abstract syntax trees in HOL.
      Also maps between Regexp_Type.regexp and the HOL regexp type.

regexpLib. 

   * HOL evaluator for the regexp compilation and matching functions
     defined in regexpTheory.

   * A general matcher which allows choosing deduction or SML.


test.{hol,ml}

   * Examples of the application of the compiler/DFA evaluator, with,
     and without, proofs.


Concrete syntax of regular expressions.
=======================================

This is implemented by the parser in Regexp_Type. See also the test files.
For now, spaces are significant.

  [...] = character set 
  [^...] = complement char set
  .  = any char
  \d = [0-9]
  \w = [a-zA-Z0-9_] 
  \s = whitespace = [ \n\r\t\f]  (* Note the space character! *)
  \c = escape c, for c in {\,`,.,^,$,*,+,?,|,~,{,},[,],(,)}
  \ddd = ASCII character given in decimal representation (\000 to \255)
  \i{lo,hi,dir} = 
     Interval of numbers between lo and hi inclusive, with dir in {MSB,LSB}. 
     The "dir" field can be omitted (it defaults to LSB). Numbers can be
     unsigned (both lo and hi are positive) or signed twos complement
     (lo is negative, hi can be positive or negative). Currently only 
     binary representation is supported.
    
  r|s = alternation
  r&s = intersection
  r* = Kleene star
  r+ = rr*
  r? = "" | r
  r{n} = r^n
  r{m,n} = r^m | r^{m+1} | ... | r^n (m<=n)
  r{m,} = r{m}r*
  r{,n} = r{0,n}
  rs  = concatenation
  ~r = complement
  (r) = grouping 
