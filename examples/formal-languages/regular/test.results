Test case:

  fun dom q = Regexp_Match.domBrz (Regexp_Type.fromQuote q);
  time dom `\w{1,200}`;

1. pointerEq + reverse Or lists + len_cmp (in regexp_compare)
   runtime: 2m03s,    gctime: 0.06345s,     systime: 0.42500s.

2. remove pointerEq, keep rest
   runtime: 4m37s,    gctime: 0.03372s,     systime: 2.3s.

3. keep pointerEq, reverse Or lists, no len_cmp
   runtime: 2m15s,    gctime: 0.07897s,     systime: 1.1s.

4. keep pointerEq, don't reverse Or lists, len_cmp
   runtime: 2m10s,    gctime: 0.12296s,     systime: 0.54205s.

Winner: 1.
----------

Now, examine the effect of trimming the new elements added to the worklist.

a. No trimming, just add all elements
   runtime: 2m09s,    gctime: 1.0s,     systime: 0.92108s.

b. Trim only newly added element list
   runtime: 2m11s,    gctime: 0.03147s,     systime: 0.79943s.

c. Add new elements to worklist then trim new worklist
   runtime: 2m33s,    gctime: 0.21014s,     systime: 3.5s.

Winner: I chose (b).
---------------------
This choice seems cleaner, and is not much slower in the examples
seen so far.



