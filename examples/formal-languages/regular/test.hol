load "regexpLib";
open regexpLib;

(*---------------------------------------------------------------------------*)
(* Matchers                                                                  *)
(*---------------------------------------------------------------------------*)

fun matcher q = #matchfn(regexpLib.matcher HOL (Regexp_Type.fromQuote q));

val test = matcher `foobar`;
 not (test "fo2b") 
 andalso (test "foobar")
 andalso not(test "foobar1");

val test = matcher `\d*`;
  test"" 
andalso test"1" 
andalso test"11434123412341234235456337467456745675256245"
andalso not(test "a")
andalso not(test "_[");

val test = matcher `.*1`;
test"asdfasdfasd1" 
andalso not(test"")
andalso test"1";

val test = matcher `[0-9]`;
 not(test "")
 andalso test "1"
 andalso test "9"
 andalso test "0"
 andalso not (test "10");

val test = matcher `[0-9]*`;
 test ""
 andalso test "1"
 andalso test "9"
 andalso test "0"
 andalso test "10"
 andalso not(test " a")
 andalso test "1024563735355365673463";

val test = matcher `(.*1)(12)*`;
test "adfasd11212"
andalso not (test"");

val test = matcher `b*|b*(a|ab*a)b*`;
test ""
andalso test "bbbb"
andalso test "bbbbabb"
andalso not (test "apha")
andalso test "a"
andalso test "baa";

val test = matcher `b*ab*ab*`;
test"bbbaa" 
andalso test"aa"
andalso test"bababb";

val test = matcher `[]*|.|..|...`;
test""
andalso test"a"
andalso test"abb"
andalso test"123"
andalso not (test"1234");

val test = matcher `.|(ab)*|(ba)*`;
test""
andalso test"a"
andalso test"7"
andalso not (test"abba")
andalso not (test"abb")
andalso test"ababababab"
andalso not (test"babababab")
andalso test"bababababa";

(* Beware the juxtaposition of * and ) in the quotation for some SML lexers. *)

val test = matcher `~((.*aa.*)|(.*bb.*))`;
             (true  = test ("")) 
   andalso   (true  = test ("a"))
   andalso   (true  = test ("b"))
   andalso   (false = test ("aa")) 
   andalso   (true  = test ("ab")) 
   andalso   (true  = test ("ba")) 
   andalso   (false = test ("bb")) 
   andalso   (true  = test ("ababababababababababababababababababababababababababab"))
   andalso   (false = test ("abababababababababababbababababababababababababababab"));

val test = matcher `(.*00.*)&~(.*01)`;
             (true  = test ("00"))
    andalso  (false = test ("001"))
    andalso  (true  = test ("0111010101010111111000000"))
    andalso  (true  = test ("011101010101011111100000010101000111111111111111111111"))
    andalso  (true  = test ("0011010101010111111000000101010001111111111111111111110"))
    andalso  (false = test ("0011010101010111111000000101010001111111111111111111101"))
   ;

(*---------------------------------------------------------------------------*)
(* All strings with at least three consecutive ones and not ending in 01 or  *)
(*   consisting of all ones.                                                 *)
(*---------------------------------------------------------------------------*)

val test = matcher `(.*111.*)&~((.*01)|1*)`;
            (true  = test "01110")
    andalso (false = test "1")
    andalso (false = test "11")
    andalso (false = test "111")
    andalso (false = test "1111111111111111111111111111111111")
    andalso (false = test "11111111111111111111111111111111111111111111111111111111")
    andalso (false = test "1111111111111111111111111111111111111111111111111111111111111111")
    andalso (true  = test "0111010101010111111000000")
    andalso (true  = test "01101010101011111100000010101000111111111111111111111")
    andalso (true  = test "10001101010101011000000101010001111111111111111111110")
    andalso (false = test "0011010101010111111000000101010001111111111111111111101")
   ;
 
(*---------------------------------------------------------------------------*)
(* CANBUS GPS message format. Taken from                                     *)
(*                                                                           *)
(* http://www.caemax.de/Downloads/QIC/QIC_GPS_DE.pdf                         *)
(*                                                                           *)
(* NB: The regexp for message 1801 is wrong, since it needs data packing to  *)
(* handle bytes 4 and 5 properly.                                            *)
(*---------------------------------------------------------------------------*)
(*
 * CAN ID Name Position (Format) Range of Values Units (Result)
 * Identifier 1800 
 * Time Day Byte 0 (unsigned char) 1 ... 31 
 * Time Month Byte 1 ( unsigned char) 1 ... 12 
 * Time Year Byte 2 ( unsigned char) 0 ... 99 
 * Time Hour Byte 3 ( unsigned char) 0 … 23 
 * Time Minute Byte 4 ( unsigned char) 0 … 59 
 * Time Second Byte 5 ( unsigned char) 0 … 59 
 * Altitude Byte 6, 7 (LSB, MSB) 0 … 17999 "m" (1 m)
 *
 * Identifier 1801 
 * Latitude Degrees Byte 0 (Bit 0 ...7) -90 ... +90 "Deg" (1°)
 * Latitude Minutes Byte 1 (Bit 8 ... 13) 0 ... 59 "Min" (1’)
 * Latitude Seconds Byte 2, 3 (Bit 16 ... 28) 0 ... 5999 "Sec" (0.01“)
 * Longitude Degrees Byte 4 (Bit 32 ... 40) -180 ... +180 "Deg" (1°)
 * Longitude Minutes Byte 5 (Bit 41 ... 46) 0 ... 59 "Min" (1’)
 * Longitude Seconds Byte 6, 7 (Bit 48 ... 60) 0 ... 5999 "Sec" (0.01“)
 * 
 * Identifier 1802 
 * Speed Byte 0, 1 (LSB, MSB) 0 ... 9999 "km/h" (0.1 km/h)
 * Heading Byte 2, 3 (LSB, MSB) 0 ... 3599 "Deg" (0.1°)
 * 
 * Identifier 1803 
 * Number of Active Satellites Byte 0 (Bit 0 ... 3) 0 ... 12 
 *                             Byte 0 (Bit 4 ... 7) 0 
 * Number of Visible Satellites Byte 1 (unsigned char) 0 ... 16 
 * PDOP (vertical accuracy) Byte 2, 3 (LSB, MSB) 0 ... 999 "m" (0.1 m)
 * HDOP (horizontal accuracy) Byte 4, 5 (LSB,MSB) 0 ... 999 "m" (0.1 m)
 * VDOP (positional accuracy) Byte 6, 7 (LSB, MSB) 0 ... 999 "m" (0.1 m)
 *)
 
val test_1800 = matcher `\i{1,31}\i{1,12}\i{0,99}\i{0,23}\i{0,59}\i{0,59}\i{0,17999}`;
val test_1801 = matcher `\i{~90,90}\i{0,59}\i{0,5999}\i{~180,180}\i{0,59}\i{0,5999}`;
val test_1802 = matcher `\i{0,9999}\i{0,3599}.{4}`;
val test_1802_alt = matcher `\i{0,9999}\i{0,3599}\k{0}{4}`;
val test_1803 = matcher `\i{0,12}\i{0,16}\i{0,999}\i{0,999}\i{0,999}`;

val test_18xx = matcher `\i{1,31}\i{1,12}\i{0,99}\i{0,23}\i{0,59}\i{0,59}\i{0,17999}\i{~90,90}\i{0,59}\i{0,5999}\i{~180,180}\i{0,59}\i{0,5999}\i{0,9999}\i{0,3599}\i{0,12}\i{0,16}\i{0,999}\i{0,999}\i{0,999}`;

(*---------------------------------------------------------------------------*)
(* Extracting DFAs from returned theorem                                     *)
(*---------------------------------------------------------------------------*)

(*---------------------------------------------------------------------------*)
(* Timing tests for search-only                                              *)
(*---------------------------------------------------------------------------*)

val regexpEval = computeLib.CBV_CONV (regexpLib.regexp_compset());

fun test_dom q = 
 let val regexp_tm = regexpSyntax.mk_regexp(Regexp_Type.fromQuote q)
 in Count.apply regexpEval 
         ``dom_Brz_alt empty [normalize ^regexp_tm]``
    ;()
 end;

(*
val _ = 
 List.app (fn q => (test_dom q; ()))
  [`1`,
   `.*1`,
   `[0-9]`,
   `[0-9]*`,
   `(.*1)(12)*`,
   `b*|b*(a|ab*a)b*`, 
   `b*ab*ab*`,
   `[]*|.|..|...`, 
   `.?|..|...`, 
   `.|(ab)*|(ba)*`,
   `~(.*(aa|bb).*)`,
   `(.*00.*)&~(.*01)`,
   `(.*111.*)&~(.*01|11*)`
  ];

print "\nDONE.\n"

test_dom `\w{1,6}`;    (* 35.1s *)
test_dom `\w{1,10}`;   (* 127s *)
test_dom `\w{1,15}`;   (* 508s *)
test_dom `\w{1,20}`;   (* 1221s *)

*)
