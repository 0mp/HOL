(* -*-sml-*- *)
(*****************************************************************************)
(* Sanity checking "ExecuteSemantics": a derived executable semantics        *)
(* Not for compiling.                                                        *)
(*****************************************************************************)

loadPath := "../official-semantics" :: "../regexp" :: !loadPath;
app 
 load 
 ["bossLib","metisLib","intLib","stringLib","pred_setLib",
  "regexpLib","ExecuteSemanticsTheory"];

quietdec := true;
open bossLib metisLib intLib stringLib rich_listTheory
open regexpLib FinitePathTheory UnclockedSemanticsTheory ExecuteSemanticsTheory;
quietdec := false;

(******************************************************************************
* Set default parsing to natural numbers rather than integers 
******************************************************************************)
val _ = intLib.deprecate_int();

(******************************************************************************
* Version of Define that doesn't add to the EVAL compset
******************************************************************************)
val pureDefine = with_flag (computeLib.auto_import_definitions, false) Define;

(******************************************************************************
* Evaluating expressions of the form x IN {y1; y2; ...; yn}
******************************************************************************)
val _ = 
 computeLib.add_convs
  [(``$IN``,
    2,
    (pred_setLib.SET_SPEC_CONV ORELSEC pred_setLib.IN_CONV EVAL))];

(******************************************************************************
* Rejected by computeLib.add_funs, but used for simplification.
******************************************************************************)
val SOME_EL_F =
 prove
  (``SOME_EL (\x. F) l = F``,
   Induct_on `l`
    THEN RW_TAC std_ss [SOME_EL]);

(******************************************************************************
* Evaluating Sugar2 formulas
******************************************************************************)
val _ = computeLib.add_funs 
         ([PathTheory.SEL_REC_AUX,
           UF_SEM_F_UNTIL_REC,
           UF_SEM_F_SUFFIX_IMP_FINITE_REC_AUX,
           UF_SEM_F_SUFFIX_IMP_FINITE_REC,
           UF_SEM_F_SUFFIX_IMP_REC,
           B_SEM,
           EVAL_US_SEM]);

(******************************************************************************
* Examples
******************************************************************************)

(******************************************************************************
* [{s0};{s1};{s2}]  |=  [f1 U f2]   (f1, f2 arbitrary formulas)
******************************************************************************)
EVAL ``UF_SEM (FINITE[s0;s1;s2]) (F_UNTIL(f1,f2))``;

(******************************************************************************
* [{s0};{s1};{s2}]  |=  [b1 U b2]   (b1, b2 arbitrary boolean expressions )
******************************************************************************)
EVAL ``UF_SEM (FINITE[s0;s1;s2]) (F_UNTIL(F_BOOL b1, F_BOOL b2))``;

(******************************************************************************
* [{s0};{s1};{s2}]  |=  [p1 U p2]   (p1, p2 arbitrary atomic propositions)
******************************************************************************)
EVAL 
 ``UF_SEM (FINITE[s0;s1;s2]) (F_UNTIL(F_BOOL(B_PROP p1), F_BOOL(B_PROP p2)))``;

(******************************************************************************
* [{s0};{s1};{s2}]  |=  {1}(2) 
******************************************************************************)
EVAL
 ``UF_SEM (FINITE[s0;s1;s2]) (F_UNTIL(F_BOOL(B_PROP 1), F_BOOL(B_PROP 2)))``;

(******************************************************************************
* [{1};{1};{2}]  |=  {1}(2) 
******************************************************************************)
EVAL
 ``UF_SEM (FINITE[{1};{1};{2}]) (F_UNTIL(F_BOOL(B_PROP 1), F_BOOL(B_PROP 2)))``;

(******************************************************************************
* [{1};{3};{2}]  |=  {1}(2) 
******************************************************************************)
EVAL
 ``UF_SEM (FINITE[{1};{3};{2}]) (F_UNTIL(F_BOOL(B_PROP 1), F_BOOL(B_PROP 2)))``;

(* Can't evaluate a variable regular expression
EVAL ``UF_SEM (FINITE[s0;s1;s2]) (F_SUFFIX_IMP(r,f))``;
EVAL ``UF_SEM (FINITE[{1};{3};{2}]) (F_SUFFIX_IMP(r,f))``;
*)

(******************************************************************************
* [{1};{2};{3}]  |=  {n}(f) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3}])
   (F_SUFFIX_IMP (S_BOOL (B_PROP n), f))``;

(******************************************************************************
* [{1};{2};{3}]  |=  {n}(p) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3}])
   (F_SUFFIX_IMP (S_BOOL (B_PROP n), F_BOOL(B_PROP p)))``;

(******************************************************************************
* [{1};{2};{3}]  |=  {[*]}(f) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3}])
   (F_SUFFIX_IMP (S_REPEAT S_TRUE, f))``;

(******************************************************************************
* [{1};{2};{3}]  |=  {[*]}(p) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3}])
   (F_SUFFIX_IMP (S_REPEAT S_TRUE, F_BOOL(B_PROP p)))``;

(******************************************************************************
* [{p};{p};{p}]  |=  {[*]}(p) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{p};{p};{p}])
   (F_SUFFIX_IMP (S_REPEAT S_TRUE, F_BOOL(B_PROP p)))``;

(******************************************************************************
* [{p1};{p2};{p3}]  |=  {[*]}(p) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{p1};{p2};{p3}])
   (F_SUFFIX_IMP (S_REPEAT S_TRUE, F_BOOL(B_PROP p)))``;

(******************************************************************************
* [{1};{2};{3};{4};{5};{6};{7};{8};{9}]  |=  {3}(f) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3};{4};{5};{6};{7};{8};{9}])
   (F_SUFFIX_IMP(S_BOOL(B_PROP 3), f))``;

(******************************************************************************
* [{1};{2};{3};{4};{5};{6};{7};{8};{9}]  |=  {[*];2;3}(f) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3};{4};{5};{6};{7};{8};{9}])
   (F_SUFFIX_IMP 
    (S_CAT(S_REPEAT S_TRUE, S_CAT(S_BOOL (B_PROP 2),S_BOOL (B_PROP 3))),
     f))``;

(******************************************************************************
* [{1};{2};{3};{4};{5};{6};{7};{8};{9}]  |=  {[*];2:3}(f) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3};{4};{5};{6};{7};{8};{9}])
   (F_SUFFIX_IMP 
    (S_CAT(S_REPEAT S_TRUE, S_FUSION(S_BOOL (B_PROP 2),S_BOOL (B_PROP 3))),
     f))``;

(******************************************************************************
* [{1};{2};{3};{4};{5};{6};{7};{8};{9}]  |=  {[*];2;3;[*]}(f) 
******************************************************************************)
(SIMP_RULE list_ss [COND_RAND,SOME_EL,pred_setTheory.IN_SING] o
 EVAL)
``UF_SEM (FINITE[{1};{2};{3};{4};{5};{6};{7};{8};{9}])
   (F_SUFFIX_IMP 
    (S_CAT(S_REPEAT S_TRUE, 
           S_CAT(S_CAT(S_BOOL (B_PROP 2),S_BOOL (B_PROP 3)), 
                 S_REPEAT S_TRUE)),
     f))``;

(******************************************************************************
* [{1};{2};{3}]  |=  {[*];3}
******************************************************************************)
EVAL ``US_SEM [{1};{2};{3}] (S_CAT(S_REPEAT S_TRUE, S_BOOL(B_PROP 3)))``;

(******************************************************************************
* [{1};{2};{3}]  |=  {[*];2}
******************************************************************************)
EVAL ``US_SEM [{1};{2};{3}] (S_CAT(S_REPEAT S_TRUE, S_BOOL(B_PROP 2)))``;

(******************************************************************************
* [{1};{2};{3}]  |=  {[*];2;[*]} 
******************************************************************************)
EVAL ``US_SEM 
        [{1};{2};{3};{4};{5}] 
        (S_CAT(S_REPEAT S_TRUE, S_CAT(S_BOOL(B_PROP 2), S_REPEAT S_TRUE)))``;

(* 
** Generated this from a Verilog model of the BUF example in
** Chapter 4 of FoCs User's Manual (see test.v)
** (www.haifa.il.ibm.com/projects/verification/focs/)
*)

(* String version
val StoB_REQ = ``"StoB_REQ"``;
val BtoS_ACK = ``"BtoS_ACK"``;
val BtoR_REQ = ``"BtoR_REQ"``;
val RtoB_ACK = ``"RtoB_ACK"``;
*)

(* Num version
*)
val StoB_REQ = ``0``;
val BtoS_ACK = ``1``;
val BtoR_REQ = ``2``;
val RtoB_ACK = ``3``;

quietdec := true;
val SimRun =
    ``[{}; {^StoB_REQ}; {^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ};
       {^StoB_REQ; ^BtoS_ACK; ^BtoR_REQ; ^RtoB_ACK};
       {^StoB_REQ; ^BtoS_ACK}; {^StoB_REQ}; {^BtoS_ACK}]``;
val SimRun_def = Define `SimRun = ^SimRun`;
quietdec := false;

(* A pure computeLib version *)
time
 EVAL
 ``US_SEM
    SimRun
    (S_CAT(S_REPEAT S_TRUE,
           S_CAT(S_BOOL(B_PROP ^StoB_REQ), 
                 S_REPEAT S_TRUE)))``;

(* A version using BIGLIST to keep terms small
   (however, it doesn't seem to have much effect)
val SimRun_def = pureDefine `SimRun = ^SimRun`;
val () = computeLib.add_funs (time EVAL_BIGLIST SimRun_def);
time
 EVAL
 ``US_SEM
    (BIGLIST SimRun)
    (S_CAT(S_REPEAT S_TRUE,
           S_CAT(S_BOOL(B_PROP ^StoB_REQ), 
                 S_REPEAT S_TRUE)))``;
*)

time
 EVAL 
 ``US_SEM 
    SimRun
    (S_CAT(S_REPEAT S_TRUE, 
           S_CAT(S_CAT(S_BOOL(B_PROP ^StoB_REQ),S_BOOL(B_PROP ^StoB_REQ)),
                 S_REPEAT S_TRUE)))``;

time
 EVAL 
 ``US_SEM 
    SimRun
    (S_CAT(S_REPEAT S_TRUE, 
           S_CAT(S_CAT(S_BOOL(B_PROP ^StoB_REQ),S_BOOL(B_PROP ^BtoR_REQ)),
                 S_REPEAT S_TRUE)))``;



