Data Structures

   Node work-lists, sets, and stacks:
        precolored: machine registers, preassigned color
        intial: temporary registers, not precolored and not yet processed
        simplifyWorklist: list of low-degree non-move-related nodes
        freezeWorklist: low-degree move-related nodes
        spillWorklist: high-degree nodes
        spilledNodes: nodes marked for spilling during this round; initially empty
        coalescedNodes: registers that have been coalesced; when u <- v is coalesced, v
                        is added to this set and u put back on some work-list (or vice versa)
        coloredNodes: nodes successfully colored
        selectStack: stack containing temporaries removed from the graph

   Move sets:
        coalescedMoves: moves that have been coalesced
        constainedMoves: moves whose source and target interfere
        frozenMoves: moves that will no longer be considered for coalescing
        worklistMoves: moves enabled for possible coalescing
        activeMoves: moves not yet ready for coalescing

   Other data Structures:
        adjSet: the set of interference edges (u,v) in the graph. If (u,v) in adjSet then (v,u) in adjSet
        adjList: adjacency list representation of the graph; for each non-precolored temporary u,
                adjList[u] is the set of nodes that interfere with u
        degree: an array containing the current degree of each node
        moveList: a mapping from a node to the list of moves it is associated with
        alias: when a move (u,v) has been coalesced, and v put in coalescedNodes, then alias(v) = u.
        color: the color chosen by the algorithm for a node; for precolored nodes this is
                initialized to the given color.


Procedures 

procedure Build()
   forall b in blocks in program
      let live = liveOut(b)
      forall I in instructions(b) in reverse order
        if isMoveInstruction(I) then
            live <- live\use(I)
            forall n in def(I) U use(I)
                moveList[n] <- moveList[n] U {I}
            worklistMoves <- worklistMoves U {I}
        live <- live U def(I)
        forall d in def(I)
            forall l in live
                AddEdge(l,d)
        live <- use(I) U (live\def(I))

procedure AddEdge(u,v)
   if ((u,v) not in adjSet) and (u <> v) then
        adjSet <- adjSet U {(u,v),(v,u)}
        if u not in precolored then
            adjList[u] <- adjList[u] U {v}
            degree[u] <- degree[u] + 1
        if v not in precolored then
            adjList[v] <- adjList[v] U {u}
            degree[v] <- degree[v] + 1

function NodeMoves(n)
   moveList[n] intersect (activeMoves U worklistMoves)

procedure MakeWorkList()
   forall n in initial
        initial <- initial \ {n}
        if degree[n] >= K then
            spillWorklist <- spillWorklist U {n}
        else if NodeMoves(n) <> {} then
            freezeWorklist <- freezeWorklist U {n}
        else
            simplifyWorklist <- simplifyWorklist U {n}

function Adjacent(n)
   adjList[n] \ (selectStack U coalescedNodes)

procedure Simplify()
   let n in simplifyWorklist
   simplifyWorklist <- simplifyWorklist \ {n}
   push(n,selectStack)
   forall m in Adjacent(n)
       DecrementDegree(m)

procedure EnableMoves(nodes)
   forall n in nodes
        forall m in NodeMoves(n)
            if m in activeMoves then
                activeMoves <- activeMoves \ {m}
                worklistMoves <- worklistMoves U {m}

procedure DecrementDegree(m)
   let d = degree[m]
   degree[m] <- d-1
   if d = K then
        EnableMoves({m} U Adjacent(m))
        spillWorklist <- spillWorklist \ {m}
        if MoveRelated(m)
            freezeWorklist <- freezeWorklist U {m}
        else
            simplifyWorklist <- simplifyWorklist U {m}

procedure Coalesce()
   let m(=copy(x,y)) in worklistMoves
   x <- GetAlias(x)
   y <- GetAlias(y)
   if y in precolored then
        let (u,v) = (y,x)
   else
        let (u,v) = (x,y)
   worklistMoves <- worklistMoves \ {m}
   if (u = v) then
        coalescedMoves <- coalescedMoves U {m}
        AddWorkList(u)
   else if v in precolored or (u,v) in adjSet then
        constrainedMoves <- constrainedMoves U {m}
        AddWorkList(u)
        AddWorkList(v)
   else if u in precolored /\ (!t in Adjacent(v),OK(t,u))
        \/ u not in precolored /\
           Conservative(Adjacent(u) U Adjacent(v)) then
        coalescedMoves <- coalescedMoves U {m}
        Combine(u,v)
        AddWorkList(u)
   else
        activeMoves <- activeMoves U {m}

procedure AddWorkList(u)
   if (u not in precolored /\ not(MoveRelated(u)) /\ degree[u] < K) then
        freezeWorklist <- freezeWorklist \ {u}
        simplifyWorklist <- simplifyWorklist U {u}

function OK(t,r)
   degree[t] < K \/ t in precolored \/ (t,r) in adjSet

function Conservative(nodes)
   let k = 0
   forall n in nodes
        if degree[n]>=K then k <- k + 1
   return (k < K)

function GetAlais(n)
   if n in coalescedNodes then
        GetAlias(alias[n])
   else n

procedure Combine(u,v)
   if v in freezeWorklist then
        freezeWorklist <- freezeWorklist \ {v}
   else
        spillWorklist <- spillWorklist \ {v}
   coalescedNodes <- coalescedNodes U {v}
   alias[v] <- u
   moveList[u] <- moveList[u] U moveList[v]
   EnableMoves(v)
   forall t in Adjacent(v)
        AddEdge(t,u)
        DecrementDegree(t)
   if degree[u]>=K /\ u in freezeWorkList
        freezeWorkList <- freezeWorkList \ {u}
        spillWorkList <- spillWorkList U {u}

procedure Freeze()
   let u in freezeWorklist
   freeWorklist <- freezeWorklist \ {u}
   simplifyWorklist <- simplifyWorklist U {u}
   FreezeMoves(u)

procedure FreezeMoves(u)
   forall m(=copy(x,y)) in NodeMoves(u)
        if GetAlias(y)=GetAlias(u) then
            v <- GetAlias(x)
        else
            v <- GetAlias(y)
        activeMoves <- activeMoves \ {m}
        frozenMoves <- frozenMoves U {m}
        if NodeMoves(v) = {} /\ degree[v] < K then
            freezeWorklist <- freezeWorklist \ {v}
            simplifyWorklist <- simplifyWorklist U {v}

procedure SelectSpill()
   let m in spillWorklist selected using favorite heuristic
        Note: avoid choosing nodes that are the tiny live ranges resulting from the fetches of
                previously spilled registers
   spillWorklist <- spillWorklist \ {m}
   simplifyWorklist <- simplifyWorklist U {m}
   FreezeMoves(m)

procedure AssignColors()
   while SelectStadck not empty
        let n = pop(SelectStack)
        okColors <- {0,...,K-1}
        forall w in adjList[n]
            if GetAlias(w) in (coloredNodes U precolored) then
                okColors <- okColors \ {color[GetAlias(w)]}
        if okColors = {} then
            spilledNodes <- spilledNodes U {n}
        else
            coloredNodes <- coloredNodes U {n}
            let c in okColors
            color[n] <- c
   forall n in coalescedNodes
        color[n] <- color[GetAlias(n)]

procedure RewriteProgram()
   Allocate memory locations for each v in spilledNodes,
   Create a new tempory vi for each definition and each use,
   In the program (instructions), insert a store after each definition of a vi, a fetch before each use of a vi.
   Put all the vi into a set newTemps.
   spilledNodes <- {}
   initial <- coloredNodes U coalescedNodes U newTemps
   coloredNodes <- {}
   coalescedNodes <- {}

procedure Main()
   LivenessAnalysis()
   Build()
   MakeWorklist()
   repeat
        if simplifyWorklist <> {} then Simplify()
        else if worklistMoves <> {} then Coalesce()
        else if freezeWorklist <> {} Freeze()
        else if spillWorklist <> {} then SelectSpill()
   until simplifyWorklist = {} /\ worklistMoves = {}
        /\ freezeWorklist = {} /\ spillWorklist = {}
   AssignColors()
   if spilledNodes <> {} then
        RewriteProgram(spilledNodes)
        Main()

