To build HOL with PolyML: 
  1) run "<path-to-poly> < tools-poly/smart-configure.sml" from the top-level 
     HOL directory HOLDIR. Note that <path-to-poly> has to be the full path 
     to the poly executable residing in polydir/bin, where polydir is the 
     poly distribution directory. 
  2) run "bin/build -expk -symlink" (only the experimental kernel is supported)

This is currently experimental, and probably fragile.  The help system doesn't
work; also ctrl-c may not work reliably.

According to the build log on my machine, Moscow ML takes 1670s of proof and
Poly takes 262s.  Total time to build the system is 50m on Moscow and 23m on
Poly.

Porting notes:

For src/metis/mlibOmegaint.sml I defined hash:IntInf.int->int to be the
identity function, which works only because Poly's native integers are
arbitrary precision.  I used a similar trick for src/integer/OmegaMLShadow.sml,
and additionally hashed a Vector of ints in a particularly naive way.

The executables in bin are huge.

The build script always rebuilds the executables.

"loadPath" doesn't affect "use".

"quietdec" doesn't work (use "PolyML.print_depth" instead).

Documentation building doesn't work.  The lexer and parser need porting from
mosmllex and mosmlyacc to mllex and mlyacc.

Local installations of Poly/ML seem to need LD_LIBRARY_PATH set for executables
to work (on Linux, not on Mac).

ctrl-c requires a second input to break a loop. 

Pretty printing looks a little rough around the edges in some cases.

We're recording information in .uo and .ui files to minimize changes to
Holmake, but it would be nice to have only .uo files (and use a different
suffix).

An option to Holmake to load file once "compiled" into .uo would help catch
errors earlier.

