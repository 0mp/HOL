\DOC overload_on

\TYPE {Parse.overload_on : string * term -> unit}

\SYNOPSIS
Establishes a constant as one of the overloading possibilities for a string.

\KEYWORDS
Parsing, pretty-printing, overloading.

\LIBRARY Parse

\DESCRIBE
Calling {overload_on(name,tm)} establishes {tm} as a possible
resolution of the overloaded {name}.  The term {tm} must be a
constant.  The call to {overload_on} also ensures that {tm} is the
first in the list of possible resolutions chosen when a string might
be parsed into a term in more than one way.


\FAILURE
Fails if the term argument is not a constant.

\EXAMPLE
We define the equivalent of intersection over predicates:
{
   - val inter = new_definition("inter", Term`inter p q x = p x /\ q x`);
   <<HOL message: inventing new type variable names: 'a.>>
   > val inter = |- !p q x. inter p q x = p x /\ q x : Thm.thm
}
\noindent Then we can set up the overloading we want.  One of the
possible meanings for the string {/\} is usual logical conjunction:
{
   - overload_on ("/\\", Term`$/\`);
   > val it = () : unit
}
\noindent We also overload on our new intersection constant, and can
be sure that in ambiguous situations, it will be preferred:
{
   - overload_on ("/\\", Term`inter`);
   <<HOL message: inventing new type variable names: 'a.>>
   > val it = () : unit
   - Term`p /\ q`;
   <<HOL message: more than one resolution of overloading was possible.>>
   <<HOL message: inventing new type variable names: 'a.>>
   > val it = `p /\ q` : Term.term
   - type_of it;
   > val it = `:'a -> bool` : Type.hol_type
}
\noindent In order to make normal conjunction the preferred choice, we
can repeat the call to {overload_on}:
{
   - overload_on ("/\\", Term`$/\ :bool -> bool -> bool`);
   > val it = () : unit
   - Term`p /\ q`;
   <<HOL message: more than one resolution of overloading was possible.>>
   > val it = `p /\ q` : Term.term
   - type_of it;
   > val it = `:bool` : Type.hol_type
}
\noindent Note that in order to override the overloading, we had to
specify the type of the logical conjunction explicitly.  Otherwise,
the parsing would have taken the {/\} to mean our previously preferred
alternative ({inter}).

\COMMENTS
Overloading with abandon can lead to input that is very hard to make
sense of, and so should be used with caution.

\SEEALSO
clear_overloads_on.

\ENDDOC