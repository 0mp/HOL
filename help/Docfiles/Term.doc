\DOC Term

\TYPE {Parse.Term : term quotation -> term}

\SYNOPSIS
Parses a quotation into a term value

\KEYWORDS
Parsing

\LIBRARY Parse

\DESCRIBE
The parsing process for terms divides into four distinct phases.

The first phase converts the quotation argument into a relatively
simple parse tree datatype, with the following datatype definition
(from {parse_term}):
{
   datatype 'a varstruct =
     SIMPLE of string | VPAIR of ('a varstruct * 'a varstruct) |
     TYPEDV of 'a varstruct * TCPretype.pretype |
     RESTYPEDV of 'a varstruct * 'a preterm | VS_AQ of 'a
   and 'a preterm =
     COMB of ('a preterm * 'a preterm) | VAR of string |
     ABS of ('a varstruct * 'a preterm) | AQ of 'a |
     TYPED of ('a preterm * TCPretype.pretype)
}
\noindent Further, the {RESTYPEDV} constructor is only used
internally, so never appears as a result.  This phase of parsing is
concerned with the treatment of the rawest syntax.  It has no notion
of whether or not a term corresponds to a constant or a variable, so
all {preterm} leaves are ultimately either {VAR}s or {AQ}s
(anti-quotations).

This phase converts infixes, mixfixes and all the other categories of
syntactic rule from the global grammar into simple structures built up
using {COMB}.  For example, {`x op y`} (where {op} is an infix) will
turn into
{
   COMB(COMB(VAR "op", VAR "x"), VAR "y")
}
\noindent and {`tok1 x tok2 y`} (where {tok1 _ tok2} has been declared as a
{TruePrefix} form for the term {f}) will turn into
{
   COMB(COMB(VAR "f", VAR "x"), VAR "y")
}
\noindent The special syntaxes for ``let'' and record expressions are also
handled at this stage.  For more details on how this is done see the
reference entry for {parse_preTerm}, which function can be used in
isolation to see what is done at this phase.

The second phase of parsing consists of the resolution of names,
identifying what were just {VAR}s as constants, overloaded constants
or genuine variables.  This phase also annotates all leaves of the
data structure (given in the entry for {preTerm}) with type
information.

The third phase of parsing works over the second pre-term datatype and
does type-checking, though ignoring overloaded values.  The datatype
being operated over uses reference variables to allow for efficiency,
and the type-checking is done ``in place''.  If type-checking is
successful, the resulting value has consistent type annotations.

The final phase of parsing resolves overloaded constants.  The
type-checking done to this point may completely determine which choice
of overloaded constant is appropriate, but if not, the choice may
still be completely determined by the interaction of the possible
types for the overloaded possibilities.

Finally, depending on the value of the global flags {guessing_tyvars}
and {guessing_overloads}, the parser may make fairly arbitrary choices
about how to resolve


\FAILURE
All over place, and for all sorts of reasons.

\USES
Turns strings into terms.


\SEEALSO
parse_preTerm, preTerm, Type, allow_for_overloading_on, overload_on,
guessing_overloads, guessing_tyvars

\ENDDOC