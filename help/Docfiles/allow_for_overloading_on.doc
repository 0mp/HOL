\DOC allow_for_overloading_on

\TYPE {Parse.allow_for_overloading_on : string * hol_type -> unit}

\SYNOPSIS
Allows for overloading on the given string, with types of given form.

\KEYWORDS
Parsing, pretty-printing.

\LIBRARY Parse

\DESCRIBE
A call to {allow_for_overloading_on(s,ty)} attempts to update the
global term grammar so that instances of the string {s} will stand for
one of a list of possible constants, all of which will have types that
can be matched by {ty}.  No actual overloadings are established by
this call, but it is a necessary prerequisite of doing any
overloadings (using the {overload_on} function).

Because resolution of overloading happens after the first phase of
parsing, overloading a string that appears only as a token and not as
a term name will not produce any useful behaviour.  For example, in
the theory of lists, {::} is introduced as an infix form of {CONS}.
If one wanted to perform some sort of overloading on this constant,
then the string passed as an argument to {allow_for_overloading_on}
(and {overload_on}) would have to be {CONS}, not {::}, because {::}
entirely disappears during the first phase of parsing, leaving only
instances of {CONS}.

Attempts to allow for overloading on a string that has already been so
allowed have no effect; the first type specified as the pattern for
this string takes precedence.

\FAILURE
Never fails, but see above for behaviour when repeated attempts to
allow for overloading of same string occur.

\COMMENTS
There is a companion {temp_allow_for_overloading_on} function, which
has the same effect on the global grammar, but which does not cause
this effect to persist when the current theory is exported.

\SEEALSO
Term, overload_on, add_numeral_form

\ENDDOC