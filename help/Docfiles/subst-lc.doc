\DOC subst

\TYPE {subst : (term,term) subst -> term -> term}

\SYNOPSIS
Substitutes terms in a term.

\DESCRIBE
Given a "(term,term) subst" (a list of {{redex, residue}} records) and a
term {tm}, {subst} attempts to substitute each free occurrence of a
{redex} in {tm} by its associated {residue}. The substitution is done in
parallel, i.e., once a redex has been replaced by its residue, at some
place in the term, that residue at that place will not itself be
replaced in the current call. When necessary, renaming of bound
variables in {tm} is done to avoid capturing the free variables of an
incoming residue.

\FAILURE
Failure occurs if there exists a {{redex, residue}} record in the
substitution such that the types of the {redex} and {residue} are not
equal.

\EXAMPLE
{
   - load "arithmeticTheory";

   - subst [``SUC 0`` |-> ``1``]   ``SUC(SUC 0)``;
   > val it = ``SUC 1`` : term


   - subst [``SUC 0`` |-> ``1``, ``SUC 1`` |-> ``2``]   ``SUC(SUC 0)``;
   > val it = ``SUC 1`` : term


   - subst [``SUC 0`` |-> ``1``, ``SUC 1`` |-> ``2``] ``SUC(SUC 0) = SUC 1``;
   > val it = ``SUC 1 = 2`` : term


   - subst [``b:num`` |-> ``a:num``]  ``\a:num. (b:num)``;
   > val it = ``\a'. a`` : term


   - subst[``flip:'a`` |-> ``foo:'a``]  ``waddle:'a``
   > val it = ``waddle`` : term
}

\SEEALSO inst, SUBST, SUBS.
\ENDDOC
