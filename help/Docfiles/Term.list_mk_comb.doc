\DOC list_mk_comb

\TYPE {list_mk_comb : term * term list -> term}

\SYNOPSIS
Iteratively constructs combinations (function applications).

\DESCRIBE
{list_mk_comb(t,[t1,...,tn])} returns {t t1 ... tn}.

\FAILURE
Fails if the types of {t1},...,{tn} are not equal to the argument 
types of {t}. It is not necessary for all the arguments of {t} to be
given. In particular the list of terms {t1},...,{tn} may be empty.

\EXAMPLE
{
- list_mk_comb(T,[]);
> val it = `T` : term

- list_mk_comb(conjunction,[T]);
> val it = `$/\ T` : term

- try list_mk_comb(conjunction,[universal]);

Exception raised at Term.list_mk_comb:
incompatible types
}
\SEEALSO
boolSyntax.strip_comb, Term.mk_comb.

\ENDDOC
