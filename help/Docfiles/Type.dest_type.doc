\DOC dest_type

\TYPE {dest_type : hol_type -> string * hol_type list}

\SYNOPSIS
Breaks apart a non-variable type.

\DESCRIBE
If {ty} is a type constant, then {dest_type ty} returns {(ty,[])}.
If {ty} is a compound type {(ty1,...,tyn)tyop}, then {dest_type ty}
returns {(tyop,[ty1,...,tyn])}.

\FAILURE
Fails if {ty} is not a sequence of type applications of a type constant.

\EXAMPLE
{
- dest_type bool;
> val it = ("bool", []) : string * hol_type list

- dest_type (alpha --> bool);
> val it = ("fun", [`:'a`, `:bool`]) : string * hol_type list

- try dest_type (mk_univ_type(alpha, alpha --> alpha));

Exception raised at Type.dest_type:
not a sequence of type applications of a type constant
}

\COMMENTS
A more precise alternative is {dest_thy_type}, which tells which theory 
the type operator was declared in.

{dest_type} is deprecated in HOL-Omega because the type system now includes
type applications, type abstractions, and universal types. 

\SEEALSO
Type.mk_type, Type.dest_thy_type, Type.dest_vartype,
Type.dest_con_type, Type.dest_app_type, Type.dest_abs_type, Type.dest_univ_type.
\ENDDOC
