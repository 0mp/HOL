val _ = print "For HOL help, type: help \"hol\";\n"
val _ = quietdec := true;

(*---------------------------------------------------------------------------*
 * Bring in the HOL kernel.                                                  *
 *---------------------------------------------------------------------------*)

local open Path
      val SIGOBJ = toString(fromString(concat
                    ("/local/scratch/kxs/panic/working","sigobj")))
in
val _ = Meta.loadPath := SIGOBJ :: !Meta.loadPath
val _ = load "HolKernel"
end;

(*---------------------------------------------------------------------------*
 *       Establish the basic environment.                                    *
 *---------------------------------------------------------------------------*)
open HolKernel Globals;
infix ## |->;
infixr 3 -->;

val _ = installPP Hol_pp.pp_self_parsing_term
val _ = installPP Hol_pp.pp_self_parsing_type
val _ = installPP Thm.pp_thm;

val _ = quotation := true
val _ = Help.displayLines := 40;

val _ = print "Loaded Hol Kernel.\n"


(*---------------------------------------------------------------------------*
 * Often, people want to use "standard" HOL tools: tactics, conversions,     *
 * rewriting, etc. That's what the next few lines achieve.                   *
 *---------------------------------------------------------------------------*)

val _ = app load ["Parse", "basicHol90Lib", "goalstackLib"];
open Parse basicHol90Lib goalstackLib;

infix THEN THENL THENC ORELSE ORELSEC THEN_TCL ORELSE_TCL;
	      
val _ = installPP goalstackLib.pp_proofs
val _ = installPP goalstackLib.pp_goalstack
val _ = installPP Rewrite.pp_rewrites;
val _ = installPP TypeBase.pp_tyinfo;

(*---------------------------------------------------------------------------*
 * Set up the the help paths.                                                *
 *---------------------------------------------------------------------------*)

local open Path
      fun HELP s = toString(fromString(concat(HOLDIR, concat("help",s))))
      fun SRC s  = toString(fromString(concat(HOLDIR, concat("src",s))))
      val SIGOBJ = toString(fromString(concat(HOLDIR,"sigobj")))
in
  val () = indexfiles := HELP"HOLdbase" :: !indexfiles ;
  val () = helpdirs := HELP"Docfiles" :: SIGOBJ   ::
                       SRC"arith/help/entries"    ::
                       SRC"hol88/help/entries"    :: 
                       SRC"list/help/entries"     :: 
                       SRC"pair/help/entries"     :: 
                       SRC"pred_set/help/entries" :: 
                       SRC"reduce/help/entries"   ::
                       SRC"res_quan/help/entries" :: 
                       SRC"set/help/entries"      :: 
                       SRC"string/help/entries"   ::
                       SRC"taut/help/entries"     :: 
                       SRC"unwind/help/entries"   :: 
                       SRC"utils/help"            :: 
                       SRC"word/help/entries"     :: !helpdirs;
  val () = Help.specialfiles := 
        {file = "README.Hol98", term = "hol", title = "Hol98 Overview"}
        :: !Help.specialfiles
end

(*---------------------------------------------------------------------------*
 * Print a banner.                                                           *
 *---------------------------------------------------------------------------*)
val _ = 
( TextIO.output(TextIO.stdOut, "\n");
   TextIO.output(TextIO.stdOut,
"        HHH                 LL\n \
\       HHH                  LL\n \
\       HHH                   LL\n \
\       HHH                    LL\n \
\       HHH          OOOO       LL\n \
\       HHHHHHH     OO  OO       LL\n \
\       HHHHHHH     OO  OO       LLL\n \
\       HHH          OOOO        LLLL\n \
\       HHH                     LL  LL\n \
\       HHH                    LL    LL\n \
\       HHH                   LL      LL\n \
\       HHH                  LL        LL98"
^" [Athabasca "^Lib.int_to_string(Globals.version)^"]\n\n"));

val _ = quietdec := false;
