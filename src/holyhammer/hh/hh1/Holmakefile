.PHONY: all

FILES_CMX=lib.cmx fusion.cmx basics.cmx printer.cmx preterm.cmx hl_parser.cmx equal.cmx bool.cmx drule.cmx tactics.cmx simp.cmx theorems.cmx canon.cmx fol.cmx follist.cmx meson.cmx hh_symbols.cmx features_dt.cmx hh_tac.cmx hh_write.cmx

EXTRA_CLEANS = $(FILES_CMX) $(patsubst %.cmx,%.cmi,$(FILES_CMX)) $(patsubst %.cmx,%.o,$(FILES_CMX))

OCAMLOPT=ocamlfind ocamlopt -package num -unsafe-string

ifneq ($(which ocamlfind),)
# Assume we have ocamlopt if we have ocamlfind

ifeq ($(shell ocamlfind query num > /dev/null 2>&1; echo $$?),0)

all: $(FILES_CMX)

lib.cmi lib.cmx: lib.ml
	$(OCAMLOPT) -c $<
fusion.cmi fusion.cmx: fusion.ml lib.cmi
	$(OCAMLOPT) -c $<
basics.cmi basics.cmx: basics.ml fusion.cmi
	$(OCAMLOPT) -c $<
printer.cmi printer.cmx: printer.ml lib.cmi fusion.cmi basics.cmi
	$(OCAMLOPT) -c $<
preterm.cmi preterm.cmx: preterm.ml fusion.cmi printer.cmi
	$(OCAMLOPT) -c $<
hl_parser.cmi hl_parser.cmx: hl_parser.ml printer.cmi preterm.cmi
	$(OCAMLOPT) -c $<
equal.cmx: equal.ml lib.cmi fusion.cmi preterm.cmi
	$(OCAMLOPT) -c $<
bool.cmi bool.cmx: bool.ml printer.cmi preterm.cmi hl_parser.cmi
	$(OCAMLOPT) -c $<
drule.cmi drule.cmx: drule.ml bool.cmi
	$(OCAMLOPT) -c $<
tactics.cmi tactics.cmx: tactics.ml fusion.cmi basics.cmi printer.cmi \
                         hl_parser.cmi bool.cmi drule.cmi
	$(OCAMLOPT) -c $<
simp.cmi simp.cmx: simp.ml fusion.cmi basics.cmi hl_parser.cmi drule.cmi \
                   tactics.cmi
	$(OCAMLOPT) -c $<
theorems.cmi theorems.cmx: theorems.ml hl_parser.cmi bool.cmi simp.cmi
	$(OCAMLOPT) -c $<
canon.cmi canon.cmx: canon.ml fusion.cmi basics.cmi hl_parser.cmi bool.cmi \
                     drule.cmi simp.cmi theorems.cmi
	$(OCAMLOPT) -c $<
fol.cmx: fol.ml basics.cmi bool.cmi simp.cmi
	$(OCAMLOPT) -c $<
follist.cmi follist.cmx: follist.ml basics.cmi simp.cmi
	$(OCAMLOPT) -c $<
meson.cmx: meson.ml follist.cmi canon.cmi
	$(OCAMLOPT) -c $<
hh_symbols.cmx: hh_symbols.ml fusion.cmi printer.cmi bool.cmi
	$(OCAMLOPT) -c $<
features_dt.cmx: features_dt.ml basics.cmi
	$(OCAMLOPT) -c $<
hh_tac.cmi hh_tac.cmx: hh_tac.ml hl_parser.cmi simp.cmi
	$(OCAMLOPT) -c $<
hh_write.cmx: hh_write.ml basics.cmi bool.cmi tactics.cmi simp.cmi hh_tac.cmi
	$(OCAMLOPT) -c $<

else

all:
	@echo "No num OCaml package found -- giving up on hh"

endif

else

all:
	@echo "No ocamlfind found -- giving up on hh"

endif
