.PHONY: all

INCLUDES = hh1
HH2_CMX=toolbox.cmx hh_parse.cmx hh_lexer.cmx read.cmx predict.cmx preprocess.cmx init.cmx \
dependency.cmx thf1hh1.cmx features.cmx prepredict.cmx write.cmx

HL_CMX=hh1/lib.cmx hh1/fusion.cmx hh1/basics.cmx hh1/printer.cmx \
hh1/preterm.cmx hh1/hl_parser.cmx hh1/equal.cmx hh1/bool.cmx \
hh1/drule.cmx hh1/tactics.cmx hh1/simp.cmx hh1/theorems.cmx \
hh1/canon.cmx hh1/fol.cmx hh1/follist.cmx hh1/meson.cmx \
hh1/hh_symbols.cmx hh1/features_dt.cmx hh1/hh_tac.cmx hh1/hh_write.cmx

ALL_CMX=$(HL_CMX) $(HH2_CMX)

EXTRA_CLEANS = $(HH2_CMX) $(patsubst %.cmx,%.cmi,$(HH2_CMX)) $(patsubst %.cmx,%.o,$(HH2_CMX)) hh_parse.ml hh_lexer.ml main.cmi main.cmx main.o hh main_thf.cmi main_thf.cmx main_thf.o hh_thf

OCAMLOPT=ocamlfind ocamlopt -package num -unsafe-string

ifneq ($(which ocamlfind),)
# Assume we have ocamlopt if we have ocamlfind

ifeq ($(shell ocamlfind query num > /dev/null 2>&1; echo $$?),0)

all: $(HH2_CMX) hh hh_thf

hh: main.ml $(ALL_CMX)
	$(OCAMLOPT) nums.cmxa str.cmxa unix.cmxa -o $@ -I hh1 $(ALL_CMX) $<

hh_thf: main_thf.ml $(ALL_CMX)
	ocamlopt nums.cmxa str.cmxa unix.cmxa -o $@ -I hh1 $(ALL_CMX) $<

hh_parse.ml: hh_parse.mly
	ocamlyacc $<
	rm hh_parse.mli

hh_lexer.ml: hh_lexer.mll hh_parse.ml
	ocamllex $<

toolbox.cmi toolbox.cmx: toolbox.ml
	$(OCAMLOPT) -c -I hh1 $<
hh_parse.cmi hh_parse.cmx: hh_parse.ml
	$(OCAMLOPT) -c $<
hh_lexer.cmi hh_lexer.cmx: hh_lexer.ml hh_parse.cmi
	$(OCAMLOPT) -c $<
read.cmi read.cmx: read.ml hh_parse.cmi hh_lexer.cmi
	$(OCAMLOPT) -c -I hh1 $<
predict.cmi predict.cmx: predict.ml toolbox.cmi
	$(OCAMLOPT) -c -I hh1 $<
preprocess.cmi preprocess.cmx: preprocess.ml hh_parse.cmi
	$(OCAMLOPT) -c -I hh1 $<
init.cmi init.cmx: init.ml hh_parse.cmi preprocess.cmi read.cmi
	$(OCAMLOPT) -c -I hh1 $<
dependency.cmi dependency.cmx: dependency.ml read.cmi
	$(OCAMLOPT) -c -I hh1 $<
thf1hh1.cmi thf1hh1.cmx: thf1hh1.ml hh_parse.cmi
	$(OCAMLOPT) -c -I hh1 $<
features.cmi features.cmx: features.ml thf1hh1.cmi init.cmi
	$(OCAMLOPT) -c -I hh1 $<
prepredict.cmx: prepredict.ml features.cmi predict.cmi
	$(OCAMLOPT) -c -I hh1 $<
write.cmx: write.ml hh_parse.cmi thf1hh1.cmi dependency.cmi
	$(OCAMLOPT) -c -I hh1 $<

else

all:
	@echo "No num OCaml package found -- giving up on hh"

endif

else

all:
	@echo "No ocamlfind found -- giving up on hh"

endif
