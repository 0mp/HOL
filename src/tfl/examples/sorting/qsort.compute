(*---------------------------------------------------------------------------
       Computing with various versions of quicksort.
 ---------------------------------------------------------------------------*)

app load ["bossLib", "Q", "numLib"];
open bossLib computeLib numLib;
infix &&;

(*---------------------------------------------------------------------------
       Ordinary Quicksort.
 ---------------------------------------------------------------------------*)

val Qsort_def = 
 Hol_defn "Qsort"
   `(Qsort [] = []) /\
    (Qsort (h::t) = 
      APPEND (Qsort (FILTER (\x. x <= h) t))
        (h :: Qsort (FILTER (\x. ~(x <= h)) t)))`;


(*---------------------------------------------------------------------------
       Termination proof.
 ---------------------------------------------------------------------------*)

val FILTER_KT = Q.prove(`!l. FILTER (K T) l = l`,
Induct THEN RW_TAC list_ss [listTheory.FILTER,combinTheory.K_DEF]);

val LENGTH_FILTER_SUBSET = Q.prove(
`(!y. P y ==> Q y) ==> !L. LENGTH(FILTER P L) <= LENGTH (FILTER Q L)`,
DISCH_TAC THEN Induct THEN ZAP_TAC (list_ss && [listTheory.FILTER]) []);

val lem = REWRITE_RULE [FILTER_KT]
              (Q.INST [`Q` |-> `K T`] LENGTH_FILTER_SUBSET);

val (Qsort_eqns,Qsort_ind) = Defn.tprove
(Qsort_def,
  WF_REL_TAC Qsort_def `measure LENGTH`
    THEN RW_TAC list_ss [DECIDE `x<SUC y = x <= y`,combinTheory.K_DEF,lem]);


(*---------------------------------------------------------------------------
     Build an evaluator. 
 ---------------------------------------------------------------------------*)

local open computeLib arithmeticTheory listTheory
in
  val compset = bossLib.initial_rws()
  val _ = add_thms (true,[Qsort_eqns,FILTER,GREATER_DEF,GREATER_EQ]) compset
  val Eval = Count.apply (CBV_CONV compset) o Term
end;


Eval `Qsort [1;2;3;6;5;4]`;
Eval `Qsort [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0]`;
Eval `Qsort [1]`;
Eval `Qsort [x]`;
Eval `Qsort [x;y;z]`;


(*---------------------------------------------------------------------------
       Faster quicksort.
 ---------------------------------------------------------------------------*)

val part_def = 
Define
     `(part P [] l1 l2 = (l1,l2)) /\
      (part P (h::rst) l1 l2 
         = if P h then part P rst (h::l1) l2
                  else part P rst  l1  (h::l2))`;

val fqsort_def = 
 Hol_defn "fqsort"
   `(fqsort [] = []) /\
    (fqsort (h::t) = 
       let (l1,l2) = part (\x. x <= h) t [] []
       in 
        APPEND (fqsort l1)  (h::fqsort l2))`;


(*---------------------------------------------------------------------------
       Termination.
 ---------------------------------------------------------------------------*)

val part_length = Q.prove(
 `!P L l1 l2 p q.
    ((p,q) = part P L l1 l2)
    ==> (LENGTH L + LENGTH l1 + LENGTH l2 = LENGTH p + LENGTH q)`,
Induct_on `L` 
  THEN RW_TAC list_ss [part_def]
  THEN RES_THEN MP_TAC 
  THEN RW_TAC list_ss []);


val part_length_lem = Q.prove(
`!P L l1 l2 p q. 
    ((p,q) = part P L l1 l2)
    ==>  LENGTH p <= LENGTH L + LENGTH l1 + LENGTH l2 /\
         LENGTH q <= LENGTH L + LENGTH l1 + LENGTH l2`,
RW_TAC std_ss []
 THEN IMP_RES_THEN MP_TAC part_length
 THEN ARITH_TAC);


(*---------------------------------------------------------------------------
       Desired equations and induction theorem.
 ---------------------------------------------------------------------------*)

val (fqsort_eqns,fqsort_ind) = Defn.tprove
(fqsort_def,
 WF_REL_TAC fqsort_def `measure LENGTH` 
  THEN RW_TAC std_ss [] 
  THEN IMP_RES_THEN MP_TAC part_length_lem
  THEN RW_TAC list_ss []);

(*---------------------------------------------------------------------------
       Computing with fqsort.
 ---------------------------------------------------------------------------*)

val _ = add_thms (true, [fqsort_eqns,part_def]) compset;


Eval `fqsort [1;2;3;6;5;4]`;
Eval `fqsort [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0]`;
Eval `fqsort [1]`;
Eval `fqsort [x]`;
Eval `fqsort [x;y;z]`;



(*---------------------------------------------------------------------------
       Ordinary Quicksort with order parameter.
 ---------------------------------------------------------------------------*)

val pqsort_def = 
 Hol_defn "pqsort"
   `(pqsort r [] = []) /\
    (pqsort r (h::t) = 
      APPEND (pqsort r (FILTER (\x. r x h) t))
        (h :: pqsort r (FILTER (\x. ~(r x h)) t)))`;


(*---------------------------------------------------------------------------
       Termination proof.
 ---------------------------------------------------------------------------*)

val (pqsort_eqns,pqsort_ind) = Defn.tprove
(pqsort_def,
  WF_REL_TAC pqsort_def `measure (LENGTH o SND)`
    THEN RW_TAC list_ss 
          [DECIDE `x<SUC y = x <= y`,lem,
           combinTheory.o_DEF,combinTheory.K_DEF]);

(*---------------------------------------------------------------------------
       Computing with pqsort.
 ---------------------------------------------------------------------------*)
val _ = add_thms (true, [pqsort_eqns]) compset;

Eval `pqsort $<= [1;2;3;6;5;4]`;
Eval `pqsort $<= [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0]`;
Eval `pqsort $<= [1]`;
Eval `pqsort $<= [x]`;
Eval `pqsort $<= [x;y;z]`;

Eval `pqsort $>= [1;2;3;6;5;4]`;
Eval `pqsort $>= [1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0]`;
Eval `pqsort $>= [1]`;
Eval `pqsort $>= [x]`;
Eval `pqsort $>= [x;y;z]`;


(*---------------------------------------------------------------------------
       For thoroughness, a tupled version of ordinary Quicksort 
       with order parameter.
 ---------------------------------------------------------------------------*)

val tpqsort_def = 
 Hol_defn "tpqsort"
   `(tpqsort (r,[]) = []) /\
    (tpqsort (r, h::t) = 
      APPEND (tpqsort (r, FILTER (\x. r x h) t))
        (h :: tpqsort (r, FILTER (\x. ~(r x h)) t)))`;


(*---------------------------------------------------------------------------
       Termination proof.
 ---------------------------------------------------------------------------*)

val (tpqsort_eqns,tpqsort_ind) = Defn.tprove
(tpqsort_def,
  WF_REL_TAC tpqsort_def `measure (LENGTH o SND)` 
    THEN RW_TAC list_ss 
          [DECIDE `x<SUC y = x <= y`,lem,
           combinTheory.o_DEF,combinTheory.K_DEF]);

(*---------------------------------------------------------------------------
       Computing with tpqsort.
 ---------------------------------------------------------------------------*)
val _ = add_thms (true, [tpqsort_eqns]) compset;

Eval`tpqsort($<=, [1;2;3;6;5;4])`;
Eval`tpqsort($<=,[1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0])`;
Eval`tpqsort($<=, [1])`;
Eval`tpqsort($<=, [x])`;
Eval`tpqsort($<=, [x;y;z])`;

Eval`tpqsort($>=, [1;2;3;6;5;4])`;
Eval`tpqsort($>=,[1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0])`;
Eval`tpqsort($>=, [1])`;
Eval`tpqsort($>=, [x])`;
Eval`tpqsort($>=, [x;y;z])`;



(*---------------------------------------------------------------------------
       Even more boring: tupled faster quicksort with a parameter.
 ---------------------------------------------------------------------------*)

val tfqsort_def = 
 Hol_defn "tfqsort"
   `(tfqsort (r,[]) = []) /\
    (tfqsort (r, h::t) = 
       let (l1,l2) = part (\x. r x h) t [] []
       in 
        APPEND (tfqsort (r,l1))  (h::tfqsort (r,l2)))`;

(*---------------------------------------------------------------------------
     Termination.
 ---------------------------------------------------------------------------*)

val (tfqsort_eqns,tfqsort_ind) = Defn.tprove
(tfqsort_def,
 WF_REL_TAC tfqsort_def `measure (LENGTH o SND)`
  THEN RW_TAC std_ss [] 
  THEN IMP_RES_THEN MP_TAC part_length_lem
  THEN RW_TAC list_ss [combinTheory.o_DEF]);

(*---------------------------------------------------------------------------
       Computing with tfqsort.
 ---------------------------------------------------------------------------*)
val _ = add_thms (true, [tfqsort_eqns]) compset;

Eval`tfqsort($<=, [1;2;3;6;5;4])`;
Eval`tfqsort($<=,[1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0])`;
Eval`tfqsort($<=, [1])`;
Eval`tfqsort($<=, [x])`;
Eval`tfqsort($<=, [x;y;z])`;

Eval`tfqsort($>=, [1;2;3;6;5;4])`;
Eval`tfqsort($>=,[1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;0])`;
Eval`tfqsort($>=, [1])`;
Eval`tfqsort($>=, [x])`;
Eval`tfqsort($>=, [x;y;z])`;
