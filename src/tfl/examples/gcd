app load ["bossLib", "Q"]; open bossLib;
infix 8 by;

(*---------------------------------------------------------------------------
 * A definition for GCD. Termination is proved automatically.
 *---------------------------------------------------------------------------*)

val gcd_def = 
 Define
    `(gcd 0 y = y) /\
     (gcd (SUC x) 0 = SUC x) /\
     (gcd (SUC x) (SUC y) = (y <= x 
                              => gcd(x-y)  (SUC y) 
                              |  gcd(SUC x) (y-x)))`;

(*---------------------------------------------------------------------------
 * 
 *---------------------------------------------------------------------------*)

val gcd_commutes = Q.store_thm("gcd_commutes",
`!x y. gcd x y = gcd y x`,
recInduct (theorem "gcd_ind") THEN RW_TAC std_ss [] 
 THEN RW_TAC arith_ss [gcd_def] THENL
 [Cases_on `y` THEN RW_TAC arith_ss [gcd_def],
  `x = y` by DECIDE_TAC THEN RW_TAC arith_ss []]);

