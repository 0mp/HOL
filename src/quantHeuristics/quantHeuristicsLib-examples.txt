(*
quietdec := true;
loadPath := 
            (concat [Globals.HOLDIR, "/src/quantHeuristics"]) :: 
            !loadPath;
*)


open HolKernel Parse boolLib Drule ConseqConv computeLib
open quantHeuristicsLib
open quantHeuristicsArgsLib;

(*
quietdec := false;
*)


(*Simple find an equation and instatiate it,
  same as UNWIND_CONV*)

val t = ``?x. (x=7) /\ P x /\ Q``;
val t = ``!x. ((x=7) /\ Q) ==> P x``;

(* Result:  P 7 /\ Q *)
val thm = SIMP_CONV std_ss [] t
val thm = QUANT_INSTANTIATE_CONV [] t;





(*Quantifiers are resorted to be able to find easy instantations*)
val t = ``?y x z. (x=y+z) /\ X x y z``;
val t = ``!y x z. ~(x=y+z) \/ X x y z``;

val thm = SIMP_CONV std_ss [] t
val thm = QUANT_INSTANTIATE_CONV [] t





(*However, the new library can handle more difficult nestings than
  the existing UNWIND conversions*)

val t = ``?x. (!z. (x=7) /\ Q z) /\ P x /\ Q t``
(* Result:  (!z. Q z) /\ P 7 /\ Q t *)

val t = ``!x z. ?g. (((x=7) /\ Q g)) ==> P x``
(* Result:  (?g. Q g) ==> P 7 *)

val thm = QUANT_INSTANTIATE_CONV [] t


(*
If one want's to know in detail, how it comes up with a guess some
verbose output is available*)

(*no debug*)
set_trace "QUANT_INSTANTIATE_HEURISTIC" 0

(*simple traces*)
set_trace "QUANT_INSTANTIATE_HEURISTIC" 1

(*show theorems in guesses*)
set_trace "QUANT_INSTANTIATE_HEURISTIC" 2;


val thm = QUANT_INSTANTIATE_CONV [] t





(*Instead of just looking for an instantiation i such that all other values
  v != i the predicate P i holds (for allquantfication) or does not hold (for 
  existential quantification), the new library also looks for values that satisfy /
  dissatisfy the predicate*)


(*figures out to instantiate x with 8*)
val t = ``!x. P /\ ~(8 = x) /\ Z``;
val thm = QUANT_INSTANTIATE_CONV [] t


(*figures out to instantiate x with 8*)
val t = ``?x. P \/ (8 = x) \/ Z``;
val thm = QUANT_INSTANTIATE_CONV [] t



(*The new library also uses matching to figure out instantions*)
val t = ``?x. P \/ (f(8 + 2) = f(x + 2)) \/ Z``;
val t = ``?x. P /\ (f(8 + 2) = f(x + 2)) /\ 
              g (f (x+2)) /\ Z``;

val t = ``?x. P /\ (f 2 = f x) /\ Q /\ Q2(f x) /\ Z /\
              (f x = f 2)``;

val thm = QUANT_INSTANTIATE_CONV [] t



(*Bound variables in instantiations can be tackeled.
  More convincing examples for having free variables in
  guesses will follow later when datatype specific code is used.*)

val t = ``?x. P /\ (!y. x = y + 2) /\ Z x``;
val thm = QUANT_INSTANTIATE_CONV [] t;
(*result ?y'. P /\ (!y. y' + 2 = y + 2) /\ Z (y' + 2)*)



val t = ``?x. P /\ (?y. x = y + 2) /\ Z x``;
(*matching + bound variables
  result ?y'. P /\ Z (y' + 2)*)

val thm = QUANT_INSTANTIATE_CONV [] t



(*There is a little bit of support for unique existential quantification,
  however, neither bound variables nor matching can be used for it*)
val t = ``?!x. !z. ((7=x) /\ Q z x)``;
val thm = QUANT_INSTANTIATE_CONV [] t




(* By default QUANT_INSTANTIATE_CONV just knows about
   boolean operators and equations. On easy way to
   extend this is using TypeBase.
   In the following examples, TypeBase is used to come up with guesses*)

val t = ``!x. ~(x = 0) ==> P x``
(*Result !x_n. P (SUC x_n) *)

val thm = QUANT_INSTANTIATE_CONV [TypeBase_qhca] t


(*To come up with this result, the case-theorem form TypeBase has been
  used. It states that if an number is not zero, it's the successor of
  something*)

val t = ``!x. (x = 0)``
(*Result F, distinct theorem of TypeBase used*)
val thm = QUANT_INSTANTIATE_CONV  [TypeBase_qhca] t


val t = ``?x. ((x,y) = (0,z)) /\ (P x)``
(*Result ((0,y) = (0,z)) /\ P 0, one_one theorem of TypeBase used*)

val thm = QUANT_INSTANTIATE_CONV [TypeBase_qhca] t



(*The main advantage of the new library is however, it is user extensible.
  TypeBase_qhca uses some theorem from TypeBase. Please
  have a look at quantHeuristicsArgsLib for details how
  to write your own qhcas. A qhca (quant heuristics combine argument)
  constists of 

distinct_thms
  This one is a list of theorems used for finding counterexamples.
  These theorems have to be of the form 
     |- (!x1...xn. ~(f1 x1 ... xn = g1 x1 ... xn)) /\
        ... /\
        (!x1...xm. ~(fi x1 ... xm = gi x1 ... xm))

cases_thmL
  This one is a list of theorems used for figuring out case splits.
  These theorems have to be of the form |- !x. (?x1...xn. x = f x1 ... xn) \/ (?x1...xm. x = g x1 ... xn)
  Theorems containing more than two cases are ignored.

rewrite_thmL
  are theorems used for rewriting an unknown expression at the very top level. They are applied
  using REWR_CONV and have to be of the usual form. They are an easy way to introduce
  knowledge about new operators

convL
  sometimes, these simple rewrites are not sufficient. For these
  cases convL can contain arbitrary conversions. Be careful though,
  to use the term at toplevel. If just proper subterms are rewritten,
  a lot of work will be done several times. This leads to a considarable slowdown.
  
heuristicL
  A list of full grown, own heuristics.


In the following some examples are given, how these parameters 
filter and args can be used. The others simple and ignored for now.
*)



val t = ``?x y z. (x = 1) /\ (y = 2) /\ (z = 3)``
(*Standard calls eliminate all 3 variables
 |- ?x y z. (x = 1) /\ (y = 2) /\ (z = 3) = T
*)
val thm = QUANT_INSTANTIATE_CONV [] t


(*Let's just get rid of y
 |- ?x y z. (x = 1) /\ (y = 2) /\ (z = 3) = 
    ?x   z. (x = 1) /\            (z = 3)*)
val thm = EXTENSIBLE_QUANT_INSTANTIATE_CONV NONE true 
             (fn v => (v = ``y:num``)) false [] t


(*
Lets for example teach the heuristic to
find counterexamples for natural numbers.

Thanks to the dictinct-theorem from TypeBase, it is already possible,
to find counterexamples for theorems of the form ``0`` and ``SUC n`` 
*)

val t = ``!x. x = 0``
val t = ``?x. ~(x = SUC n)``
val t = ``?x. ((x = SUC n) /\ Q x n) ==> P x``

val thm = QUANT_INSTANTIATE_CONV [TypeBase_qhca] t 


(*However, for arbitrary numbers that is not possible yet
  (hopefully, perhaps it got added meanwhile). At least
  the theorems from TypeBase are not sufficient. One needs
  a stronger one. *)

val t = ``?x:num. ((x = n) /\ Q x n) ==> P x``

(*the normal one raises UNCHANGED*)
val thm = QUANT_INSTANTIATE_CONV [TypeBase_qhca] t 
val thm = QUANT_INSTANTIATE_CONV [] t 

(*The extended one is able to reduce it to true, by knowing that ~(SUC n = n) holds*)
val thm = QUANT_INSTANTIATE_CONV [distinct_qhca [prim_recTheory.SUC_ID]] t 

(*One can also use a ready qhca*)
val thm = QUANT_INSTANTIATE_CONV [num_qhca] t 



(* There is no info about predicate sets in TypeBase. However
   a case distinction might by usefull*)

val SIMPLE_SET_CASES = prove (
``!s. (s = {}) \/ ?x t. (s = x INSERT t)``,
PROVE_TAC[pred_setTheory.SET_CASES]);


val t = ``!s. ~(s = {}) ==> (CARD s > 0)``;

(*raises unchanged*)
val thm = QUANT_INSTANTIATE_CONV [] t;

(*The extended one is able to reduce it*)
val thm = QUANT_INSTANTIATE_CONV 
   [cases_qhca [SIMPLE_SET_CASES]] t 




(*
  There is no mentioning of IS_SOME in TypeBase. However, being able
  to find instantiations would be great. A simple way to achive it via 
  repacing IS_SOME x with (?x'. x = SOME x') during the heuristic search.
*)


val t = ``!x. IS_SOME x ==> P x``;

(*raises unchanged*)
val thm = QUANT_INSTANTIATE_CONV [] t;

	  
val IS_SOME_EXPAND = prove (``IS_SOME x = ?x'. x = SOME x'``,
			      Cases_on `x` THEN SIMP_TAC std_ss []);

val thm = QUANT_INSTANTIATE_CONV [rewrite_qhca [IS_SOME_EXPAND]] t;


(*The same works if we use a conversion instead*)
val thm = QUANT_INSTANTIATE_CONV 
            [convs_qhca [REWR_CONV IS_SOME_EXPAND]] t;


(*notice that here REWR_CONV is used, so the rewrite takes just place at
  top-level. This is what happens internally,
  if IS_SOME_EXPAND is added to the list of
  REWRITES. Other conversions like e.g. REWRITE_CONV would work as well, 
  but for REWRITE_CONV IS_SOME would be replaced at subpositions. Thus, there would
  be an exponential blowup!!! Have a look at the debug output
  to compare*)

set_trace "QUANT_INSTANTIATE_HEURISTIC" 1;
val thm = QUANT_INSTANTIATE_CONV 
          [convs_qhca [REWR_CONV IS_SOME_EXPAND]] t;
  
val thm = QUANT_INSTANTIATE_CONV 
          [convs_qhca [REWRITE_CONV [IS_SOME_EXPAND]]] t;

(*TOP_ONCE_REWRITE_CONV is suitable as well,
  it behaves like REWR_CONV for a list of theorems*)
  
val thm = QUANT_INSTANTIATE_CONV 
          [convs_qhca [TOP_ONCE_REWRITE_CONV [IS_SOME_EXPAND]]] t;


set_trace "QUANT_INSTANTIATE_HEURISTIC" 0;

(*The argument heuristicL is a full grown heuristcal one. 
  Please have a look at quantHeuristicsArgsLib for more details.
  A guess consists of an instantiation i with a list of
  free variables in it fvL. There may or may not be an argument (given as 
  a thm) why it is a sensible guess. There are the following types of guesses 
  available:

  guess_general of (i,fvL):
      A guess with no particular reason at all, no justification. This
      is for example used by EXISTS_TAC.

      guess_general (i, [fv1,...,fvn])

      can be used to proof

      ?fv1 ... fvn. P i ==> ?v. P v   and
      !v. P v ==> !fv1 ... fvn. P i

      or if one want's to use equations 

      ?v. P v = (?fv1 ... fvn. P i) \/ 
                   ?v. (!fv1 ... fvn. ~(i = v)) /\ (P v)  and

      !v. P v = (!fv1 ... fvn. P i) /\
		   (!v. (?fv1 ... fvn. ~(i = v)) ==> P v)


      These two possibilies are always available and
      choosen if the other guesses don't provide a theorem.

     
  guess_untrusted (sub_term, guess)
    Guess_untrusted, is an untrusted guess recording guesses for
    subterms. It is mainly used to
    give some feedback to the user, not for instantations.
    It is introduced if a guess of subterms can not be ported to
    the whole term. 
  
    

  guess_false(i,fvL,thm_opt)
      i makes P i false

      This can be used to proof
      !v. P v = F

      If a theorem is provided it has to be of the form 
      !fv1 ... fvn. ~(P i)
    

  guess_true(i,fvL,thm_opt)
      i makes P i true

      This can be used to proof
      ?v. P v = T

      The theorem has to be of the form 
      !fv1 ... fvn. P i
    

  guess_only_not_possible (i,fvL,thm_opt)
      if i does satisfy P then all other i' as well

      This can be used to proof
      !v. P v = !fv1 ... fvn. P i


      The theorem has to be of the form 
      (!fv1 ... fvn. P i) ==> !v. P v

  guess_only_possible (i,fvL,thm_opt)    
      if i does not satisfy P then all other i' don't as well

      This can be used to proof
      ?v. P v = ?fv1 ... fvn. P i

      The theorem has to be of the form 
      (!fv1 ... fvn. ~(P i)) ==> !v. ~(P v)
      

  guess_others_not_possible (i,fvL,thm_opt)    
      all instantiations except i do not satisfy P 

      This can be used to proof
      ?v. P v = ?fv1 ... fvn. P i

      The theorem has to be of the form 
      !v. (!fv1 ... fvn. ~(v = i)) ==> ~P v
      
  guess_others_satisfied (i,fvL,thm_opt)    

      all instantiations except i do not satisfy P 

      This can be used to proof
      !v. P v = !fv1 ... fvn. P i

      The theorem has to be of the form 
      !v. (!fv1 ... fvn. ~(v = i)) ==> P v
      


  Notice that guess_others_satisfied as well as
  guess_false can be weakened to guess_only_not_possible.
  Similaryly guess_others_not_possible and
  guess_true can be weakened to guess_only_possible.
  If a heuristic provides one of the stronger guesses, the
  weaker version is inferred automatically. The heuristic itself
  does not have to bother.


To get a feeling lets try to simplify and look at part of the trace

val t = ``?x. (x=7) /\ (!z. P z x /\ Q)``;
set_trace "QUANT_INSTANTIATE_HEURISTIC" 1
val _ = QUANT_INSTANTIATE_CONV [] t

The conversion calls the outmost heuristic with
v = ``x``
t = ``(x = 7) /\ !z. P z x /\ Q``
bv = [``x``]
fv = [``Q``, ``P``, ``z``, ``x``]

Then sys is used to come up with guesses for subterms. 
/\ is handled by reducing it to ~ \/,
~ is handled directly
or is handled directly
~ is handled directly
finally, we look for guesses for ``x`` in ``x = 7``
there the heuristic for equations is called and comes up with two guesses
  - guess_true (``7``, [], X)
  - guess_others_not_possible (``7``, [], X)
It says that the "x = 7" will become true if x is instantiated with 7 and
has a proof for it (indicated by "X" (use higher trace_level 2 for more details) and
that it will become false for all other instantiations.

This whole stuff is recombined. Look at the guesses for
``!z. P z x /\ Q``. There ``z`` is introduced as a new bound variable,
since we are looking for instantations of x in a term where z is bounded.


searching guesses for ``x`` in ``(x = 7) /\ !z. P z x /\ Q`` (bv: [x], fv: [Q, P, z, x])
 searching guesses for ``x`` in ``~(~(x = 7) \/ ~ !z. P z x /\ Q)`` (bv: [x], fv: [Q, P, z, x])
  searching guesses for ``x`` in ``~(x = 7) \/ ~ !z. P z x /\ Q`` (bv: [x], fv: [Q, P, z, x])
   searching guesses for ``x`` in ``~(x = 7)`` (bv: [x], fv: [Q, P, z, x])
    searching guesses for ``x`` in ``x = 7`` (bv: [x], fv: [Q, P, z, x])
    found guesses for ``x`` in ``x = 7``
     - guess_true (``7``, [], X)
     - guess_others_not_possible (``7``, [], X)
   found guesses for ``x`` in ``~(x = 7)``
    - guess_false (``7``, [], X)
    - guess_others_satisfied (``7``, [], X)
   searching guesses for ``x`` in ``~ !z. P z x /\ Q`` (bv: [x], fv: [Q, P, z, x])
    searching guesses for ``x`` in ``!z. P z x /\ Q`` (bv: [x], fv: [Q, P, z, x])
     searching guesses for ``x`` in ``P z x /\ Q`` (bv: [z, x], fv: [z, Q, P, z, x])
      searching guesses for ``x`` in ``~(~P z x \/ ~Q)`` (bv: [z, x], fv: [z, Q, P, z, x])
       searching guesses for ``x`` in ``~P z x \/ ~Q`` (bv: [z, x], fv: [z, Q, P, z, x])
        searching guesses for ``x`` in ``~P z x`` (bv: [z, x], fv: [z, Q, P, z, x])
         searching guesses for ``x`` in ``P z x`` (bv: [z, x], fv: [z, Q, P, z, x])
         found guesses for ``x`` in ``P z x``
        found guesses for ``x`` in ``~P z x``
        searching guesses for ``x`` in ``~Q`` (bv: [z, x], fv: [z, Q, P, z, x])
         searching guesses for ``x`` in ``Q`` (bv: [z, x], fv: [z, Q, P, z, x])
         found guesses for ``x`` in ``Q``
        found guesses for ``x`` in ``~Q``
       found guesses for ``x`` in ``~P z x \/ ~Q``
      found guesses for ``x`` in ``~(~P z x \/ ~Q)``
     found guesses for ``x`` in ``P z x /\ Q``
    found guesses for ``x`` in ``!z. P z x /\ Q``
   found guesses for ``x`` in ``~ !z. P z x /\ Q``
  found guesses for ``x`` in ``~(x = 7) \/ ~ !z. P z x /\ Q``
   - guess_others_satisfied (``7``, [], X)
 found guesses for ``x`` in ``~(~(x = 7) \/ ~ !z. P z x /\ Q)``
  - guess_others_not_possible (``7``, [], X)
found guesses for ``x`` in ``(x = 7) /\ !z. P z x /\ Q``
 - guess_others_not_possible (``7``, [], X)



Lets write a own dummy heuristic that instantates a variable always with
"choose_me".

*)

fun dummy_heuristic sys fv v t =
let
   val i = mk_var ("choose_me", type_of v);
in
   guess_list2collection ([], [guess_general (i,[])])
end;

val t = ``?x. P x``

val thm = EXTENSIBLE_QUANT_INSTANTIATE_CONV NONE false (K true) true
             [heuristics_qhca [dummy_heuristic]] t

val thm = QUANT_INSTANTIATE_CONV 
             [heuristics_qhca [dummy_heuristic]] t


(*result 
 val thm = |- (?x. P x) <=> (!x. ~(x = choose_me) ==> ~P x) ==> P choose_me :
  thm
*)

(*
Notice that the value of the parameters redepth and expand_eq are changed
as well.

Since no justification for the guess is given, (?x. P x) can not be proved or
simplified to P i. However, one can expand the definition of exists by a case split. That such
case splitting should be used is indicated by setting exand_eq to true.

However, normally the conversion revisits terms after substituting something
(REDEPTH_CONV is used internally). This would leed to an infinite-loop in our example.
So it was turned of.


(*!!!Infinite loop!!!*)
val thm = EXTENSIBLE_QUANT_INSTANTIATE_CONV NONE true (K true) true
             [heuristics_qhca [dummy_heuristic]] t
*)










(*There is a stateful argument stateful_qhca,
  let's add something to it*)

val _ = clear_stateful_qhca ();
val _ = stateful_qhca___add_combine_arguments 
            [distinct_qhca [prim_recTheory.SUC_ID],
             rewrite_qhca [arithmeticTheory.EQ_ADD_RCANCEL, 
                           arithmeticTheory.EQ_ADD_LCANCEL,
                           arithmeticTheory.ADD_CLAUSES]];

   



(* Some examples on how QUANT_INSTANTIATE_CONV behaves
   on standard datatypes. Here both the statefull as well
   as specific arguments for each datatype are used.*)


(* There is basic support for numbers. Just very simple stuff. *)

val t = ``!y:num. x = y`` 
val thm = QUANT_INSTANTIATE_CONV [stateful_qhca] t;
val thm = QUANT_INSTANTIATE_CONV [num_qhca] t;

val t = ``!x. (SUC x = SUC 3) ==> P x`` 
val thm = QUANT_INSTANTIATE_CONV [stateful_qhca] t;
val thm = QUANT_INSTANTIATE_CONV [num_qhca] t;


val t = ``!x. (x + z = 3 + z) ==> P x`` 
val thm = QUANT_INSTANTIATE_CONV [stateful_qhca] t;
val thm = QUANT_INSTANTIATE_CONV [num_qhca] t;


val t = ``!x. P x /\ ~(x = 0) ==> Q x z`` 
val thm = QUANT_INSTANTIATE_CONV [stateful_qhca] t;
val thm = QUANT_INSTANTIATE_CONV [num_qhca] t;




(* Pairs *)

val t = ``!p. (x = FST p) ==> Q p`` 
val thm = QUANT_INSTANTIATE_CONV [pair_qhca] t;

val t = ``!p. ?t. ((f t = FST p) /\ Z x) ==> Q p`` 
val thm = QUANT_INSTANTIATE_CONV [pair_qhca] t

val t = ``?p. ((SND p) = 7) /\ Q p`` 
val thm = QUANT_INSTANTIATE_CONV [pair_qhca] t

val t = ``?v. (v,X) = Z`` 
val thm = QUANT_INSTANTIATE_CONV [pair_qhca] t

val t = ``?v. (v,X) = (a,9)`` 
val thm = QUANT_INSTANTIATE_CONV [pair_qhca] t

val t = ``?v. (\ (pa, pb, pc). P pa pb pc) v`` 
val thm = QUANT_INSTANTIATE_CONV [pair_qhca] t



(*Some things about option types*)
val t = ``!x. IS_SOME x ==> P x``;
val thm = QUANT_INSTANTIATE_CONV [option_qhca] t

val t = ``!x. IS_NONE x \/ P x``
val thm = QUANT_INSTANTIATE_CONV [option_qhca] t

val t = ``!x. IS_SOME x \/ P x``
val thm = QUANT_INSTANTIATE_CONV [std_qhca] t

val t = ``!x. (x = SOME y) /\ P x``
val thm = QUANT_INSTANTIATE_CONV [std_qhca] t



(*Some things about lists,
  Typebase contains enough for these simple examples*)
val t = ``!l. (~(l = []) ==> (LENGTH l > 0))``;
val thm = QUANT_INSTANTIATE_CONV [stateful_qhca] t
val thm = QUANT_INSTANTIATE_CONV [list_qhca] t

val t = ``!l. (l = h::h2) \/ X``
val thm = QUANT_INSTANTIATE_CONV [stateful_qhca] t
val thm = QUANT_INSTANTIATE_CONV [list_qhca] t

val t = ``!l. (l = h::h2)``
val thm = QUANT_INSTANTIATE_CONV [stateful_qhca] t
val thm = QUANT_INSTANTIATE_CONV [list_qhca] t

val t = ``!l. (NULL l)``
val thm = QUANT_INSTANTIATE_CONV [list_qhca] t


val t = ``!l. NULL l ==> P l``
val thm = QUANT_INSTANTIATE_CONV [list_qhca] t

val t = ``!l. ~(NULL l) ==> P l``
val thm = QUANT_INSTANTIATE_CONV [list_qhca] t


(*A combination of quantHeuristics with consequence Conversions
  leads to an extended version of EXISTS_TAC. This version
  can instantiate quantifiers that occur as subterms. As a result,
  existential quantifiers can be instantiated, if they occur under even
  negation level and universal ones under odd. Moreover, it is possible
  to keep free variables in the instantiations.*)

val t = ``!x:num. (!z:num. P x z) ==> ?a:num b:num. Q a b z``;
set_goal ([], t)
(*Result      ``!x    . (        P x 0) ==> ?      b a'. Q (SUC a') b z``*)
  

e (QUANT_INST_TAC [("z", `0`, []),
	   ("a", `SUC a'`, [`a'`])]);


``(?x:num. P x) /\ (?x. x \/ y)``
