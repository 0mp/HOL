\THEOREM BITSLT_THM bits
|- !h l n. BITS h l n < 2 ** (SUC h - l)
\ENDTHEOREM
\THEOREM BITS_COMP_THM bits
|- !h1 l1 h2 l2 n.
     h2 + l1 <= h1 ==>
     (BITS h2 l2 (BITS h1 l1 n) = BITS (h2 + l1) (l2 + l1) n)
\ENDTHEOREM
\THEOREM BITS_COMP_THM2 bits
|- !h1 l1 h2 l2 n.
     BITS h2 l2 (BITS h1 l1 n) = BITS (MIN h1 (h2 + l1)) (l2 + l1) n
\ENDTHEOREM
\THEOREM BITS_DIV_THM bits
|- !h l x n. BITS h l x DIV 2 ** n = BITS h (l + n) x
\ENDTHEOREM
\THEOREM BITS_LT_HIGH bits
|- !h l n. n < 2 ** SUC h ==> (BITS h l n = n DIV 2 ** l)
\ENDTHEOREM
\THEOREM BITS_SLICE_THM bits
|- !h l n. BITS h l (SLICE h l n) = BITS h l n
\ENDTHEOREM
\THEOREM BITS_SLICE_THM2 bits
|- !h l n. h <= h2 ==> (BITS h2 l (SLICE h l n) = BITS h l n)
\ENDTHEOREM
\THEOREM BITS_SUC bits
|- !h l n.
     l <= SUC h ==>
     (SBIT (BIT (SUC h) n) (SUC h - l) + BITS h l n =
      BITS (SUC h) l n)
\ENDTHEOREM
\THEOREM BITS_SUC_THM bits
|- !h l n.
     BITS (SUC h) l n =
     (if SUC h < l then
        0
      else
        SBIT (BIT (SUC h) n) (SUC h - l) + BITS h l n)
\ENDTHEOREM
\THEOREM BITS_SUM bits
|- !h l a b.
     b < 2 ** l ==>
     (BITS h l (a * 2 ** l + b) = BITS h l (a * 2 ** l))
\ENDTHEOREM
\THEOREM BITS_SUM2 bits
|- !h l a b. BITS h l (a * 2 ** SUC h + b) = BITS h l b
\ENDTHEOREM
\THEOREM BITS_THM bits
|- !h l n. BITS h l n = (n DIV 2 ** l) MOD 2 ** (SUC h - l)
\ENDTHEOREM
\THEOREM BITS_THM2 bits
|- !h l n. BITS h l n = n MOD 2 ** SUC h DIV 2 ** l
\ENDTHEOREM
\THEOREM BITS_ZERO bits
|- !h l n. h < l ==> (BITS h l n = 0)
\ENDTHEOREM
\THEOREM BITS_ZERO2 bits
|- !h l. BITS h l 0 = 0
\ENDTHEOREM
\THEOREM BITS_ZERO3 bits
|- !h n. BITS h 0 n = n MOD 2 ** SUC h
\ENDTHEOREM
\THEOREM BITS_ZEROL bits
|- !h a. a < 2 ** SUC h ==> (BITS h 0 a = a)
\ENDTHEOREM
\THEOREM BITV_THM bits
|- !b n. BITV n b = SBIT (BIT b n) 0
\ENDTHEOREM
\THEOREM BITWISE_BITS bits
|- !wl op a b.
     BITWISE (SUC wl) op (BITS wl 0 a) (BITS wl 0 b) =
     BITWISE (SUC wl) op a b
\ENDTHEOREM
\THEOREM BITWISE_COR bits
|- !x n op a b.
     x < n ==>
     op (BIT x a) (BIT x b) ==>
     ((BITWISE n op a b DIV 2 ** x) MOD 2 = 1)
\ENDTHEOREM
\THEOREM BITWISE_EVAL bits
|- !n op a b.
     BITWISE (SUC n) op a b =
     2 * BITWISE n op (a DIV 2) (b DIV 2) +
     SBIT (op (LSBn a) (LSBn b)) 0
\ENDTHEOREM
\THEOREM BITWISE_LT_2EXP bits
|- !n op a b. BITWISE n op a b < 2 ** n
\ENDTHEOREM
\THEOREM BITWISE_NOT_COR bits
|- !x n op a b.
     x < n ==>
     ~op (BIT x a) (BIT x b) ==>
     ((BITWISE n op a b DIV 2 ** x) MOD 2 = 0)
\ENDTHEOREM
\THEOREM BITWISE_ONE_COMP_LEM bits
|- !n a b.
     BITWISE (SUC n) (\x y. ~x) a b = 2 ** SUC n - 1 - BITS n 0 a
\ENDTHEOREM
\THEOREM BITWISE_THM bits
|- !x n op a b.
     x < n ==> (BIT x (BITWISE n op a b) = op (BIT x a) (BIT x b))
\ENDTHEOREM
\THEOREM BIT_B bits
|- !b. BIT b (2 ** b)
\ENDTHEOREM
\THEOREM BIT_BITS_THM bits
|- !h l a b.
     (!x. l <= x /\ x <= h ==> (BIT x a = BIT x b)) =
     (BITS h l a = BITS h l b)
\ENDTHEOREM
\THEOREM BIT_B_NEQ bits
|- !a b. ~(a = b) ==> ~BIT a (2 ** b)
\ENDTHEOREM
\THEOREM BIT_COMP_THM3 bits
|- !h m l n.
     SUC m <= h /\ l <= m ==>
     (BITS h (SUC m) n * 2 ** (SUC m - l) + BITS m l n = BITS h l n)
\ENDTHEOREM
\THEOREM BIT_SLICE bits
|- !n a b. (BIT n a = BIT n b) = (SLICE n n a = SLICE n n b)
\ENDTHEOREM
\THEOREM BIT_SLICE_LEM bits
|- !y x n. SBIT (BIT x n) (x + y) = SLICE x x n * 2 ** y
\ENDTHEOREM
\THEOREM BIT_SLICE_THM bits
|- !x n. SBIT (BIT x n) x = SLICE x x n
\ENDTHEOREM
\THEOREM BIT_SLICE_THM2 bits
|- !b n. BIT b n = (SLICE b b n = 2 ** b)
\ENDTHEOREM
\THEOREM BIT_SLICE_THM3 bits
|- !b n. ~BIT b n = (SLICE b b n = 0)
\ENDTHEOREM
\THEOREM BIT_ZERO bits
|- !b. ~BIT b 0
\ENDTHEOREM
\THEOREM DIVMOD_2EXP bits
|- !x n. DIVMOD_2EXP x n = (DIV_2EXP x n,MOD_2EXP x n)
\ENDTHEOREM
\THEOREM DIV_MULT_1 bits
|- !r n. r < n ==> ((n + r) DIV n = 1)
\ENDTHEOREM
\THEOREM DIV_MULT_THM bits
|- !x n. n DIV 2 ** x * 2 ** x = n - n MOD 2 ** x
\ENDTHEOREM
\THEOREM DIV_MULT_THM2 bits
|- !n. 2 * (n DIV 2) = n - n MOD 2
\ENDTHEOREM
\THEOREM EXP_SUB_LESS_EQ bits
|- !a b. 2 ** (a - b) <= 2 ** a
\ENDTHEOREM
\THEOREM LESS_EQ_EXP_MULT bits
|- !a b. a <= b ==> ?p. 2 ** b = p * 2 ** a
\ENDTHEOREM
\THEOREM LSB_ODD bits
|- LSBn = ODD
\ENDTHEOREM
\THEOREM MOD_2EXP_LT bits
|- !n k. k MOD 2 ** n < 2 ** n
\ENDTHEOREM
\THEOREM MOD_2EXP_MONO bits
|- !n h l. l <= h ==> n MOD 2 ** l <= n MOD 2 ** SUC h
\ENDTHEOREM
\THEOREM MOD_ADD_1 bits
|- !n.
     0 < n ==>
     !x. ~((x + 1) MOD n = 0) ==> ((x + 1) MOD n = x MOD n + 1)
\ENDTHEOREM
\THEOREM MOD_PLUS_1 bits
|- !n. 0 < n ==> !x. ((x + 1) MOD n = 0) = (x MOD n + 1 = n)
\ENDTHEOREM
\THEOREM MOD_PLUS_RIGHT bits
|- !n. 0 < n ==> !j k. (j + k MOD n) MOD n = (j + k) MOD n
\ENDTHEOREM
\THEOREM NOT_BIT bits
|- !n a. ~BIT n a = (BITS n n a = 0)
\ENDTHEOREM
\THEOREM NOT_BITS bits
|- !n a. ~(BITS n n a = 0) = (BITS n n a = 1)
\ENDTHEOREM
\THEOREM NOT_BITS2 bits
|- !n a. ~(BITS n n a = 1) = (BITS n n a = 0)
\ENDTHEOREM
\THEOREM NOT_MOD2_LEM bits
|- !n. ~(n MOD 2 = 0) = (n MOD 2 = 1)
\ENDTHEOREM
\THEOREM NOT_MOD2_LEM2 bits
|- !n a. ~(n MOD 2 = 1) = (n MOD 2 = 0)
\ENDTHEOREM
\THEOREM NOT_ZERO_ADD1 bits
|- !m. ~(m = 0) ==> ?p. m = SUC p
\ENDTHEOREM
\THEOREM ODD_MOD2_LEM bits
|- !n. ODD n = (n MOD 2 = 1)
\ENDTHEOREM
\THEOREM SBIT_DIV bits
|- !b m n. n < m ==> (SBIT b (m - n) = SBIT b m DIV 2 ** n)
\ENDTHEOREM
\THEOREM SBIT_MULT bits
|- !b m n. SBIT b n * 2 ** m = SBIT b (n + m)
\ENDTHEOREM
\THEOREM SLICELT_THM bits
|- !h l n. SLICE h l n < 2 ** SUC h
\ENDTHEOREM
\THEOREM SLICE_COMP_RWT bits
|- !h m' m l n.
     l <= m /\ (m' = m + 1) /\ m < h ==>
     (SLICE h m' n + SLICE m l n = SLICE h l n)
\ENDTHEOREM
\THEOREM SLICE_COMP_THM bits
|- !h m l n.
     SUC m <= h /\ l <= m ==>
     (SLICE h (SUC m) n + SLICE m l n = SLICE h l n)
\ENDTHEOREM
\THEOREM SLICE_COMP_THM2 bits
|- !h l x y n.
     h <= x /\ y <= l ==> (SLICE h l (SLICE x y n) = SLICE h l n)
\ENDTHEOREM
\THEOREM SLICE_THM bits
|- !n h l. SLICE h l n = BITS h l n * 2 ** l
\ENDTHEOREM
\THEOREM SLICE_ZERO bits
|- !h l n. h < l ==> (SLICE h l n = 0)
\ENDTHEOREM
\THEOREM SLICE_ZERO_THM bits
|- !n h. SLICE h 0 n = BITS h 0 n
\ENDTHEOREM
\THEOREM SUC_SUB bits
|- SUC a - a = 1
\ENDTHEOREM
\THEOREM TWOEXP_DIVISION bits
|- !n k. k = k DIV 2 ** n * 2 ** n + k MOD 2 ** n
\ENDTHEOREM
\THEOREM TWOEXP_MONO bits
|- !a b. a < b ==> 2 ** a < 2 ** b
\ENDTHEOREM
\THEOREM TWOEXP_MONO2 bits
|- !a b. a <= b ==> 2 ** a <= 2 ** b
\ENDTHEOREM
\THEOREM TWOEXP_NOT_ZERO bits
|- !n. ~(2 ** n = 0)
\ENDTHEOREM
\THEOREM ZERO_LT_TWOEXP bits
|- !n. 0 < 2 ** n
\ENDTHEOREM
