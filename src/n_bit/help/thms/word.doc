\THEOREM ADD_EVAL word<n>
|- !a b. n2w a + n2w b = n2w (a + b)
\ENDTHEOREM
\THEOREM AND_EVAL word<n>
|- !a b. n2w a & n2w b = n2w (AND a b)
\ENDTHEOREM
\THEOREM ASR_ADD word<n>
|- !a m n. a >> m >> n = a >> (m + n)
\ENDTHEOREM
\THEOREM ASR_LIMIT word<n>
|- !x w. HB <= x ==> (w >> x = (if MSB w then word_T else word_0))
\ENDTHEOREM
\THEOREM ASR_ONE_EVAL word<n>
|- !a. word_asr1 (n2w a) = n2w (ASR_ONE a)
\ENDTHEOREM
\THEOREM ASR_THM word<n>
|- !x n.
     n2w n >> x =
     (let x' = MIN HB x in
      let s = BITS HB x' n in
        n2w (if MSBn n then 2 ** WL - 2 ** (WL - x') + s else s))
\ENDTHEOREM
\THEOREM ASR_word_T word<n>
|- !n. word_T >> n = word_T
\ENDTHEOREM
\THEOREM BITS_EVAL word<n>
|- !h l a. WORD_BITS h l (n2w a) = BITS h l (MOD_WL a)
\ENDTHEOREM
\THEOREM BITWISE_ONE_COMP_THM word<n>
|- !a b. BITWISE WL (\x y. ~x) a b = ONE_COMP a
\ENDTHEOREM
\THEOREM BIT_EVAL word<n>
|- !b a. WORD_BIT b (n2w a) = BIT b (MOD_WL a)
\ENDTHEOREM
\THEOREM EOR_EVAL word<n>
|- !a b. n2w a # n2w b = n2w (EOR a b)
\ENDTHEOREM
\THEOREM GE_EVAL word<n>
|- !m n.
     n2w m >= n2w n =
     (let sm = BIT HB m and sn = BIT HB n in
        (sm = sn) /\ MOD_2EXP WL m >= MOD_2EXP WL n \/ ~sm /\ sn)
\ENDTHEOREM
\THEOREM GT_EVAL word<n>
|- !m n.
     n2w m > n2w n =
     (let sm = BIT HB m and sn = BIT HB n in
        (sm = sn) /\ MOD_2EXP WL m > MOD_2EXP WL n \/ ~sm /\ sn)
\ENDTHEOREM
\THEOREM HI_EVAL word<n>
|- !m n. n2w m >. n2w n = MOD_2EXP WL m > MOD_2EXP WL n
\ENDTHEOREM
\THEOREM HS_EVAL word<n>
|- !m n. n2w m >=. n2w n = MOD_2EXP WL m >= MOD_2EXP WL n
\ENDTHEOREM
\THEOREM LE_EVAL word<n>
|- !m n.
     n2w m <= n2w n =
     (let sm = BIT HB m and sn = BIT HB n in
        (sm = sn) /\ MOD_2EXP WL m <= MOD_2EXP WL n \/ sm /\ ~sn)
\ENDTHEOREM
\THEOREM LO_EVAL word<n>
|- !m n. n2w m <. n2w n = MOD_2EXP WL m < MOD_2EXP WL n
\ENDTHEOREM
\THEOREM LSB_EVAL word<n>
|- !a. LSB (n2w a) = LSBn a
\ENDTHEOREM
\THEOREM LSL_ADD word<n>
|- !a m n. a << m << n = a << (m + n)
\ENDTHEOREM
\THEOREM LSL_EVAL word<n>
|- !w n. w << n = (if HB < n then n2w 0 else w * n2w (2 ** n))
\ENDTHEOREM
\THEOREM LSL_LIMIT word<n>
|- !w n. HB < n ==> (w << n = word_0)
\ENDTHEOREM
\THEOREM LSR_ADD word<n>
|- !a m n. a >>> m >>> n = a >>> (m + n)
\ENDTHEOREM
\THEOREM LSR_EVAL word<n>
|- !n. n2w a >>> n = n2w (MOD_WL a DIV 2 ** n)
\ENDTHEOREM
\THEOREM LSR_LIMIT word<n>
|- !x w. HB < x ==> (w >>> x = word_0)
\ENDTHEOREM
\THEOREM LSR_ONE word<n>
|- LSR_ONE = BITS HB 1
\ENDTHEOREM
\THEOREM LSR_ONE_EVAL word<n>
|- !a. word_lsr1 (n2w a) = n2w (LSR_ONE a)
\ENDTHEOREM
\THEOREM LSR_THM word<n>
|- !x n. n2w n >>> x = n2w (BITS HB (MIN WL x) n)
\ENDTHEOREM
\THEOREM LS_EVAL word<n>
|- !m n. n2w m <=. n2w n = MOD_2EXP WL m <= MOD_2EXP WL n
\ENDTHEOREM
\THEOREM LT_EVAL word<n>
|- !m n.
     n2w m < n2w n =
     (let sm = BIT HB m and sn = BIT HB n in
        (sm = sn) /\ MOD_2EXP WL m < MOD_2EXP WL n \/ sm /\ ~sn)
\ENDTHEOREM
\THEOREM LT_WL_MOD_WL word<n>
|- !n. LT_WL (MOD_WL n)
\ENDTHEOREM
\THEOREM MOD_ADD word<n>
|- !a b. MOD_WL (a + b) = MOD_WL (MOD_WL a + MOD_WL b)
\ENDTHEOREM
\THEOREM MOD_WL_ELIM word<n>
|- !n. n2w (MOD_WL n) = n2w n
\ENDTHEOREM
\THEOREM MOD_WL_EVAL word<n>
|- !n. MOD_WL n = MOD_2EXP WL n
\ENDTHEOREM
\THEOREM MOD_WL_IDEM word<n>
|- !a. LT_WL a ==> (MOD_WL a = a)
\ENDTHEOREM
\THEOREM MOD_WL_IDEM2 word<n>
|- !a. MOD_WL (MOD_WL a) = MOD_WL a
\ENDTHEOREM
\THEOREM MOD_WL_THM word<n>
|- MOD_WL = BITS HB 0
\ENDTHEOREM
\THEOREM MSB_EVAL word<n>
|- !a. MSB (n2w a) = MSBn a
\ENDTHEOREM
\THEOREM MUL_EVAL word<n>
|- !a b. n2w a * n2w b = n2w (a * b)
\ENDTHEOREM
\THEOREM ONE_COMP_EVAL word<n>
|- !a. NOT (n2w a) = n2w (ONE_COMP a)
\ENDTHEOREM
\THEOREM ONE_COMP_THM word<n>
|- !a x. x < WL ==> (BIT x (ONE_COMP a) = ~BIT x a)
\ENDTHEOREM
\THEOREM OR_EVAL word<n>
|- !a b. n2w a | n2w b = n2w (OR a b)
\ENDTHEOREM
\THEOREM ROR_ADD word<n>
|- !a m n. a #>> m #>> n = a #>> (m + n)
\ENDTHEOREM
\THEOREM ROR_CYCLE word<n>
|- !x w. w #>> (x * WL) = w
\ENDTHEOREM
\THEOREM ROR_ONE_EVAL word<n>
|- !a. word_ror1 (n2w a) = n2w (ROR_ONE a)
\ENDTHEOREM
\THEOREM ROR_THM word<n>
|- !x n.
     n2w n #>> x =
     (let x' = x MOD WL in
        n2w (BITS HB x' n + BITS (x' - 1) 0 n * 2 ** (WL - x')))
\ENDTHEOREM
\THEOREM ROR_word_T word<n>
|- !n. word_T #>> n = word_T
\ENDTHEOREM
\THEOREM RRX_EVAL word<n>
|- !a c. RRX c (n2w a) = n2w (RRXn c a)
\ENDTHEOREM
\THEOREM SLICE_EVAL word<n>
|- !h l a. WORD_SLICE h l (n2w a) = SLICE h l (MOD_WL a)
\ENDTHEOREM
\THEOREM TWO_COMP_EVAL word<n>
|- !a. ~n2w a = n2w (TWO_COMP a)
\ENDTHEOREM
\THEOREM TWO_COMP_NEG word<n>
|- !a.
     MSB a ==> (if (HB = 0) \/ (a = word_L) then MSB ~a else ~MSB ~a)
\ENDTHEOREM
\THEOREM TWO_COMP_NEG_POS word<n>
|- !a.
     ~((HB = 0) \/ (a = word_0) \/ (a = word_L)) ==>
     (MSB a = ~MSB ~a)
\ENDTHEOREM
\THEOREM TWO_COMP_POS word<n>
|- !a. ~MSB a ==> (if a = word_0 then ~MSB ~a else MSB ~a)
\ENDTHEOREM
\THEOREM TWO_COMP_POS_NEG word<n>
|- !a.
     ~((HB = 0) \/ (a = word_0) \/ (a = word_L)) ==>
     (~MSB a = MSB ~a)
\ENDTHEOREM
\THEOREM WORD_0_POS word<n>
|- ~MSB word_0
\ENDTHEOREM
\THEOREM WORD_ADD word<n>
|- (!n. word_0 + n = n) /\ !m n. word_suc m + n = word_suc (m + n)
\ENDTHEOREM
\THEOREM WORD_ADD1 word<n>
|- !m. word_suc m = m + word_1
\ENDTHEOREM
\THEOREM WORD_ADD_0 word<n>
|- !a. a + word_0 = a
\ENDTHEOREM
\THEOREM WORD_ADD_ASSOC word<n>
|- !a b c. a + (b + c) = a + b + c
\ENDTHEOREM
\THEOREM WORD_ADD_CLAUSES word<n>
|- (!m. word_0 + m = m) /\ (!m. m + word_0 = m) /\
   (!m n. word_suc m + n = word_suc (m + n)) /\
   !m n. m + word_suc n = word_suc (m + n)
\ENDTHEOREM
\THEOREM WORD_ADD_COMM word<n>
|- !a b. a + b = b + a
\ENDTHEOREM
\THEOREM WORD_ADD_EQ_SUB word<n>
|- !m n p. (m + n = p) = (m = p - n)
\ENDTHEOREM
\THEOREM WORD_ADD_INV_0_EQ word<n>
|- !m n. (m + n = m) = (n = word_0)
\ENDTHEOREM
\THEOREM WORD_ADD_LID_UNIQ word<n>
|- !a b. (a + b = b) = (a = word_0)
\ENDTHEOREM
\THEOREM WORD_ADD_LINV word<n>
|- !a. ~a + a = word_0
\ENDTHEOREM
\THEOREM WORD_ADD_RID_UNIQ word<n>
|- !a b. (a + b = a) = (b = word_0)
\ENDTHEOREM
\THEOREM WORD_ADD_RINV word<n>
|- !a. a + ~a = word_0
\ENDTHEOREM
\THEOREM WORD_ADD_SUB word<n>
|- !a b. a + b - b = a
\ENDTHEOREM
\THEOREM WORD_ADD_SUB2 word<n>
|- !a b. b + a - b = a
\ENDTHEOREM
\THEOREM WORD_ADD_SUB3 word<n>
|- !a c. a - (a + c) = ~c
\ENDTHEOREM
\THEOREM WORD_ADD_SUB_ASSOC word<n>
|- !a b c. a + b - c = a + (b - c)
\ENDTHEOREM
\THEOREM WORD_ADD_SUB_SYM word<n>
|- !a b c. a + b - c = a - c + b
\ENDTHEOREM
\THEOREM WORD_AND_ABSORB word<n>
|- !a b. a | a & b = a
\ENDTHEOREM
\THEOREM WORD_AND_ASSOC word<n>
|- !a b c. a & (b & c) = a & b & c
\ENDTHEOREM
\THEOREM WORD_AND_COMM word<n>
|- !a b. a & b = b & a
\ENDTHEOREM
\THEOREM WORD_AND_COMP word<n>
|- !a. a & NOT a = word_0
\ENDTHEOREM
\THEOREM WORD_AND_IDEM word<n>
|- !a. a & a = a
\ENDTHEOREM
\THEOREM WORD_BITSLT_THM word<n>
|- !h l n. WORD_BITS h l n < 2 ** (SUC h - l)
\ENDTHEOREM
\THEOREM WORD_BITS_COMP_THM word<n>
|- !h1 l1 h2 l2 n.
     h2 + l1 <= h1 ==>
     (BITS h2 l2 (WORD_BITS h1 l1 n) =
      WORD_BITS (h2 + l1) (l2 + l1) n)
\ENDTHEOREM
\THEOREM WORD_BITS_COMP_THM2 word<n>
|- !h1 l1 h2 l2 n.
     BITS h2 l2 (WORD_BITS h1 l1 n) =
     WORD_BITS (MIN h1 (h2 + l1)) (l2 + l1) n
\ENDTHEOREM
\THEOREM WORD_BITS_DIV_THM word<n>
|- !h l n x. WORD_BITS h l x DIV 2 ** n = WORD_BITS h (l + n) x
\ENDTHEOREM
\THEOREM WORD_BITS_SLICE_THM word<n>
|- !h l n. BITS h l (WORD_SLICE h l n) = WORD_BITS h l n
\ENDTHEOREM
\THEOREM WORD_BITS_ZERO word<n>
|- !h l n. h < l ==> (WORD_BITS h l n = 0)
\ENDTHEOREM
\THEOREM WORD_BIT_THM word<n>
|- !b n. WORD_BIT b n = (WORD_BITS b b n = 1)
\ENDTHEOREM
\THEOREM WORD_DE_MORGAN_THM word<n>
|- !a b.
     (NOT (a & b) = NOT a | NOT b) /\ (NOT (a | b) = NOT a & NOT b)
\ENDTHEOREM
\THEOREM WORD_DOUBLE word<n>
|- !a. a + a = a << 1
\ENDTHEOREM
\THEOREM WORD_EQ_ADD_LCANCEL word<n>
|- !m n p. (m + n = m + p) = (n = p)
\ENDTHEOREM
\THEOREM WORD_EQ_ADD_RCANCEL word<n>
|- !m n p. (m + p = n + p) = (m = n)
\ENDTHEOREM
\THEOREM WORD_EQ_NEG word<n>
|- !a b. (~a = ~b) = (a = b)
\ENDTHEOREM
\THEOREM WORD_EQ_SUB_LADD word<n>
|- !a b c. (a = b - c) = (a + c = b)
\ENDTHEOREM
\THEOREM WORD_EQ_SUB_RADD word<n>
|- !a b c. (a - b = c) = (a = c + b)
\ENDTHEOREM
\THEOREM WORD_GE word<n>
|- !a b.
     a >= b =
     (MSB (a - b) = ~(MSB a = MSB b) /\ ~(MSB (a - b) = MSB a))
\ENDTHEOREM
\THEOREM WORD_GE_THM word<n>
|- !a b.
     a >= b = (MSB b = MSB a) /\ w2n a >= w2n b \/ MSB b /\ ~MSB a
\ENDTHEOREM
\THEOREM WORD_GREATER word<n>
|- !a b. a > b = b < a
\ENDTHEOREM
\THEOREM WORD_GREATER_EQ word<n>
|- !a b. a >= b = b <= a
\ENDTHEOREM
\THEOREM WORD_GREATER_OR_EQ word<n>
|- !a b. a >= b = a > b \/ (a = b)
\ENDTHEOREM
\THEOREM WORD_GT word<n>
|- !a b.
     a > b =
     ~(a = b) /\
     (MSB (a - b) = ~(MSB a = MSB b) /\ ~(MSB (a - b) = MSB a))
\ENDTHEOREM
\THEOREM WORD_GT_THM word<n>
|- !a b. a > b = (MSB b = MSB a) /\ w2n a > w2n b \/ MSB b /\ ~MSB a
\ENDTHEOREM
\THEOREM WORD_HI word<n>
|- !a b.
     a >. b = (BIT WL (w2n a + w2n ~b) \/ (b = word_0)) /\ ~(a = b)
\ENDTHEOREM
\THEOREM WORD_HIGHER_EQ word<n>
|- !a b. a >=. b = b <=. a
\ENDTHEOREM
\THEOREM WORD_HIGHER_OR_EQ word<n>
|- !a b. a >=. b = a >. b \/ (a = b)
\ENDTHEOREM
\THEOREM WORD_HI_THM word<n>
|- !a b. a >. b = w2n a > w2n b
\ENDTHEOREM
\THEOREM WORD_HS word<n>
|- !a b. a >=. b = BIT WL (w2n a + w2n ~b) \/ (b = word_0)
\ENDTHEOREM
\THEOREM WORD_HS_THM word<n>
|- !a b. a >=. b = w2n a >= w2n b
\ENDTHEOREM
\THEOREM WORD_H_POS word<n>
|- ~MSB word_H
\ENDTHEOREM
\THEOREM WORD_LCANCEL_SUB word<n>
|- !m n p. (n - p = m - p) = (n = m)
\ENDTHEOREM
\THEOREM WORD_LE word<n>
|- !a b.
     a <= b =
     (a = b) \/
     ~(MSB (a - b) = ~(MSB a = MSB b) /\ ~(MSB (a - b) = MSB a))
\ENDTHEOREM
\THEOREM WORD_LEFT_ADD_DISTRIB word<n>
|- !m n p. p * (m + n) = p * m + p * n
\ENDTHEOREM
\THEOREM WORD_LEFT_SUB_DISTRIB word<n>
|- !m n p. p * (m - n) = p * m - p * n
\ENDTHEOREM
\THEOREM WORD_LESS_ANTISYM word<n>
|- !a b. ~(a < b /\ b < a)
\ENDTHEOREM
\THEOREM WORD_LESS_CASES word<n>
|- !a b. a < b \/ b <= a
\ENDTHEOREM
\THEOREM WORD_LESS_CASES_IMP word<n>
|- !a b. ~(a < b) /\ ~(a = b) ==> b < a
\ENDTHEOREM
\THEOREM WORD_LESS_EQUAL_ANTISYM word<n>
|- !a b. a <= b /\ b <= a ==> (a = b)
\ENDTHEOREM
\THEOREM WORD_LESS_EQ_ANTISYM word<n>
|- !a b. ~(a < b /\ b <= a)
\ENDTHEOREM
\THEOREM WORD_LESS_EQ_CASES word<n>
|- !a b. a <= b \/ b <= a
\ENDTHEOREM
\THEOREM WORD_LESS_EQ_H word<n>
|- !a. a <= word_H
\ENDTHEOREM
\THEOREM WORD_LESS_EQ_LESS_TRANS word<n>
|- !a b c. a <= b /\ b < c ==> a < c
\ENDTHEOREM
\THEOREM WORD_LESS_EQ_REFL word<n>
|- !a. a <= a
\ENDTHEOREM
\THEOREM WORD_LESS_EQ_TRANS word<n>
|- !a b c. a <= b /\ b <= c ==> a <= c
\ENDTHEOREM
\THEOREM WORD_LESS_IMP_LESS_OR_EQ word<n>
|- !a b. a < b ==> a <= b
\ENDTHEOREM
\THEOREM WORD_LESS_LESS_CASES word<n>
|- !a b. (a = b) \/ a < b \/ b < a
\ENDTHEOREM
\THEOREM WORD_LESS_LESS_EQ_TRANS word<n>
|- !a b c. a < b /\ b <= c ==> a < c
\ENDTHEOREM
\THEOREM WORD_LESS_NOT_EQ word<n>
|- !a b. a < b ==> ~(a = b)
\ENDTHEOREM
\THEOREM WORD_LESS_OR_EQ word<n>
|- !a b. a <= b = a < b \/ (a = b)
\ENDTHEOREM
\THEOREM WORD_LESS_REFL word<n>
|- !a. ~(a < a)
\ENDTHEOREM
\THEOREM WORD_LESS_TRANS word<n>
|- !a b c. a < b /\ b < c ==> a < c
\ENDTHEOREM
\THEOREM WORD_LE_THM word<n>
|- !a b.
     a <= b = (MSB a = MSB b) /\ w2n a <= w2n b \/ MSB a /\ ~MSB b
\ENDTHEOREM
\THEOREM WORD_LO word<n>
|- !a b. a <. b = ~BIT WL (w2n a + w2n ~b) /\ ~(b = word_0)
\ENDTHEOREM
\THEOREM WORD_LOWER_ANTISYM word<n>
|- !a b. ~(a <. b /\ b <. a)
\ENDTHEOREM
\THEOREM WORD_LOWER_CASES word<n>
|- !a b. a <. b \/ b <=. a
\ENDTHEOREM
\THEOREM WORD_LOWER_CASES_IMP word<n>
|- !a b. ~(a <. b) /\ ~(a = b) ==> b <. a
\ENDTHEOREM
\THEOREM WORD_LOWER_EQUAL_ANTISYM word<n>
|- !a b. a <=. b /\ b <=. a ==> (a = b)
\ENDTHEOREM
\THEOREM WORD_LOWER_EQ_ANTISYM word<n>
|- !a b. ~(a <. b /\ b <=. a)
\ENDTHEOREM
\THEOREM WORD_LOWER_EQ_CASES word<n>
|- !a b. a <=. b \/ b <=. a
\ENDTHEOREM
\THEOREM WORD_LOWER_EQ_LOWER_TRANS word<n>
|- !a b c. a <=. b /\ b <. c ==> a <. c
\ENDTHEOREM
\THEOREM WORD_LOWER_EQ_REFL word<n>
|- !a. a <=. a
\ENDTHEOREM
\THEOREM WORD_LOWER_EQ_T word<n>
|- !a. a <=. word_T
\ENDTHEOREM
\THEOREM WORD_LOWER_EQ_TRANS word<n>
|- !a b c. a <=. b /\ b <=. c ==> a <=. c
\ENDTHEOREM
\THEOREM WORD_LOWER_IMP_LOWER_OR_EQ word<n>
|- !a b. a <. b ==> a <=. b
\ENDTHEOREM
\THEOREM WORD_LOWER_LOWER_CASES word<n>
|- !a b. (a = b) \/ a <. b \/ b <. a
\ENDTHEOREM
\THEOREM WORD_LOWER_LOWER_EQ_TRANS word<n>
|- !a b c. a <. b /\ b <=. c ==> a <. c
\ENDTHEOREM
\THEOREM WORD_LOWER_NOT_EQ word<n>
|- !a b. a <. b ==> ~(a = b)
\ENDTHEOREM
\THEOREM WORD_LOWER_OR_EQ word<n>
|- !a b. a <=. b = a <. b \/ (a = b)
\ENDTHEOREM
\THEOREM WORD_LOWER_REFL word<n>
|- !a. ~(a <. a)
\ENDTHEOREM
\THEOREM WORD_LOWER_TRANS word<n>
|- !a b c. a <. b /\ b <. c ==> a <. c
\ENDTHEOREM
\THEOREM WORD_LO_THM word<n>
|- !a b. a <. b = w2n a < w2n b
\ENDTHEOREM
\THEOREM WORD_LS word<n>
|- !a b.
     a <=. b = ~BIT WL (w2n a + w2n ~b) /\ ~(b = word_0) \/ (a = b)
\ENDTHEOREM
\THEOREM WORD_LS_THM word<n>
|- !a b. a <=. b = w2n a <= w2n b
\ENDTHEOREM
\THEOREM WORD_LT word<n>
|- !a b.
     a < b =
     ~(MSB (a - b) = ~(MSB a = MSB b) /\ ~(MSB (a - b) = MSB a))
\ENDTHEOREM
\THEOREM WORD_LT_THM word<n>
|- !a b. a < b = (MSB a = MSB b) /\ w2n a < w2n b \/ MSB a /\ ~MSB b
\ENDTHEOREM
\THEOREM WORD_L_LESS_EQ word<n>
|- !a. word_L <= a
\ENDTHEOREM
\THEOREM WORD_L_LESS_H word<n>
|- word_L < word_H
\ENDTHEOREM
\THEOREM WORD_L_NEG word<n>
|- MSB word_L
\ENDTHEOREM
\THEOREM WORD_L_PLUS_H word<n>
|- word_L + word_H = word_T
\ENDTHEOREM
\THEOREM WORD_MULT_ASSOC word<n>
|- !m n p. m * (n * p) = m * n * p
\ENDTHEOREM
\THEOREM WORD_MULT_CLAUSES word<n>
|- !m n.
     (word_0 * m = word_0) /\ (m * word_0 = word_0) /\
     (word_1 * m = m) /\ (m * word_1 = m) /\
     (word_suc m * n = m * n + n) /\ (m * word_suc n = m + m * n)
\ENDTHEOREM
\THEOREM WORD_MULT_COMM word<n>
|- !m n. m * n = n * m
\ENDTHEOREM
\THEOREM WORD_NEG word<n>
|- !a. ~a = NOT a + word_1
\ENDTHEOREM
\THEOREM WORD_NEG_0 word<n>
|- ~word_0 = word_0
\ENDTHEOREM
\THEOREM WORD_NEG_1 word<n>
|- ~word_1 = word_T
\ENDTHEOREM
\THEOREM WORD_NEG_ADD word<n>
|- !a b. ~(a + b) = ~a + ~b
\ENDTHEOREM
\THEOREM WORD_NEG_EQ word<n>
|- (~x = y) = (x = ~y)
\ENDTHEOREM
\THEOREM WORD_NEG_EQ_0 word<n>
|- (~x = word_0) = (x = word_0)
\ENDTHEOREM
\THEOREM WORD_NEG_L word<n>
|- ~word_L = word_L
\ENDTHEOREM
\THEOREM WORD_NEG_LMUL word<n>
|- !a b. ~(a * b) = ~a * b
\ENDTHEOREM
\THEOREM WORD_NEG_NEG word<n>
|- !a. ~~a = a
\ENDTHEOREM
\THEOREM WORD_NEG_RMUL word<n>
|- !b a. ~(a * b) = a * ~b
\ENDTHEOREM
\THEOREM WORD_NEG_SUB word<n>
|- ~(a - b) = b - a
\ENDTHEOREM
\THEOREM WORD_NEG_T word<n>
|- ~word_T = word_1
\ENDTHEOREM
\THEOREM WORD_NOT word<n>
|- !a. NOT a = ~a - word_1
\ENDTHEOREM
\THEOREM WORD_NOT_0 word<n>
|- NOT word_0 = word_T
\ENDTHEOREM
\THEOREM WORD_NOT_GREATER word<n>
|- !a b. ~(a > b) = a <= b
\ENDTHEOREM
\THEOREM WORD_NOT_HIGHER word<n>
|- !a b. ~(a >. b) = a <=. b
\ENDTHEOREM
\THEOREM WORD_NOT_LESS word<n>
|- !a b. ~(a < b) = b <= a
\ENDTHEOREM
\THEOREM WORD_NOT_LESS_EQ word<n>
|- !a b. (a = b) ==> ~(a < b)
\ENDTHEOREM
\THEOREM WORD_NOT_LESS_EQUAL word<n>
|- !a b. ~(a <= b) = b < a
\ENDTHEOREM
\THEOREM WORD_NOT_LOWER word<n>
|- !a b. ~(a <. b) = b <=. a
\ENDTHEOREM
\THEOREM WORD_NOT_LOWER_EQ word<n>
|- !a b. (a = b) ==> ~(a <. b)
\ENDTHEOREM
\THEOREM WORD_NOT_LOWER_EQUAL word<n>
|- !a b. ~(a <=. b) = b <. a
\ENDTHEOREM
\THEOREM WORD_NOT_NOT word<n>
|- !a. NOT (NOT a) = a
\ENDTHEOREM
\THEOREM WORD_NOT_T word<n>
|- NOT word_T = word_0
\ENDTHEOREM
\THEOREM WORD_OR_ABSORB word<n>
|- !a b. a & (a | b) = a
\ENDTHEOREM
\THEOREM WORD_OR_ASSOC word<n>
|- !a b c. a | (b | c) = a | b | c
\ENDTHEOREM
\THEOREM WORD_OR_COMM word<n>
|- !a b. a | b = b | a
\ENDTHEOREM
\THEOREM WORD_OR_COMP word<n>
|- !a. a | NOT a = word_T
\ENDTHEOREM
\THEOREM WORD_OR_IDEM word<n>
|- !a. a | a = a
\ENDTHEOREM
\THEOREM WORD_RCANCEL_SUB word<n>
|- !m n p. (p - n = p - m) = (n = m)
\ENDTHEOREM
\THEOREM WORD_RIGHT_ADD_DISTRIB word<n>
|- !a b c. (a + b) * c = a * c + b * c
\ENDTHEOREM
\THEOREM WORD_RIGHT_AND_OVER_OR word<n>
|- !a b c. (a | b) & c = a & c | b & c
\ENDTHEOREM
\THEOREM WORD_RIGHT_OR_OVER_AND word<n>
|- !a b c. a & b | c = (a | c) & (b | c)
\ENDTHEOREM
\THEOREM WORD_RIGHT_SUB_DISTRIB word<n>
|- !m n p. (m - n) * p = m * p - n * p
\ENDTHEOREM
\THEOREM WORD_SLICE_COMP_RWT word<n>
|- !h m' m l a.
     l <= m /\ (m' = m + 1) /\ m < h ==>
     (WORD_SLICE h m' a + WORD_SLICE m l a = WORD_SLICE h l a)
\ENDTHEOREM
\THEOREM WORD_SLICE_COMP_THM word<n>
|- !h m l a.
     SUC m <= h /\ l <= m ==>
     (WORD_SLICE h (SUC m) a + WORD_SLICE m l a = WORD_SLICE h l a)
\ENDTHEOREM
\THEOREM WORD_SLICE_THM word<n>
|- !n h l. WORD_SLICE h l n = WORD_BITS h l n * 2 ** l
\ENDTHEOREM
\THEOREM WORD_SLICE_ZERO word<n>
|- !h l n. h < l ==> (WORD_SLICE h l n = 0)
\ENDTHEOREM
\THEOREM WORD_SLICE_ZERO_THM word<n>
|- !n h. WORD_SLICE h 0 n = WORD_BITS h 0 n
\ENDTHEOREM
\THEOREM WORD_SUB word<n>
|- !a b. ~b + a = a - b
\ENDTHEOREM
\THEOREM WORD_SUB_ADD word<n>
|- !a b. a - b + b = a
\ENDTHEOREM
\THEOREM WORD_SUB_ADD2 word<n>
|- !a b c. a + (b - a) = b
\ENDTHEOREM
\THEOREM WORD_SUB_LEFT_SUC word<n>
|- !m n. word_suc m - n = word_suc (m - n)
\ENDTHEOREM
\THEOREM WORD_SUB_LNEG word<n>
|- !a b. ~a - b = ~(a + b)
\ENDTHEOREM
\THEOREM WORD_SUB_LT_EQ word<n>
|- !a b. b <= a /\ LT_WL b ==> (n2w a - n2w b = n2w (a - b))
\ENDTHEOREM
\THEOREM WORD_SUB_LZERO word<n>
|- !a. word_0 - a = ~a
\ENDTHEOREM
\THEOREM WORD_SUB_NEG word<n>
|- !a b. ~a - ~b = b - a
\ENDTHEOREM
\THEOREM WORD_SUB_PLUS word<n>
|- !a b c. a - (b + c) = a - b - c
\ENDTHEOREM
\THEOREM WORD_SUB_REFL word<n>
|- !a. a - a = word_0
\ENDTHEOREM
\THEOREM WORD_SUB_RNEG word<n>
|- !a b. a - ~b = a + b
\ENDTHEOREM
\THEOREM WORD_SUB_RZERO word<n>
|- !a. a - word_0 = a
\ENDTHEOREM
\THEOREM WORD_SUB_SUB word<n>
|- !a b c. a - (b - c) = a + c - b
\ENDTHEOREM
\THEOREM WORD_SUB_SUB2 word<n>
|- !a b. a - (a - b) = b
\ENDTHEOREM
\THEOREM WORD_SUB_SUB3 word<n>
|- a - b - a = ~b
\ENDTHEOREM
\THEOREM WORD_SUB_TRIANGLE word<n>
|- !a b c. a - b + (b - c) = a - c
\ENDTHEOREM
\THEOREM WORD_ZERO_LOWER_EQ word<n>
|- !a. word_0 <=. a
\ENDTHEOREM
\THEOREM WORD_ZERO_LOWER_T word<n>
|- word_0 <. word_T
\ENDTHEOREM
\THEOREM ZERO_SHIFT word<n>
|- (!n. word_0 << n = word_0) /\ (!n. word_0 >> n = word_0) /\
   (!n. word_0 >>> n = word_0) /\ !n. word_0 #>> n = word_0
\ENDTHEOREM
\THEOREM ZERO_SHIFT2 word<n>
|- (!a. a << 0 = a) /\ (!a. a >> 0 = a) /\ (!a. a >>> 0 = a) /\
   !a. a #>> 0 = a
\ENDTHEOREM
\THEOREM n2w_11 word<n>
|- !a b. (n2w a = n2w b) = (MOD_WL a = MOD_WL b)
\ENDTHEOREM
\THEOREM w2n_11 word<n>
|- !a b. (w2n a = w2n b) = (a = b)
\ENDTHEOREM
\THEOREM w2n_ELIM word<n>
|- !a. n2w (w2n a) = a
\ENDTHEOREM
\THEOREM w2n_EVAL word<n>
|- !n. w2n (n2w n) = MOD_WL n
\ENDTHEOREM
\THEOREM w2n_LT word<n>
|- !a. w2n a < 2 ** WL
\ENDTHEOREM
\THEOREM w2n_n2w word<n>
|- !a n. (w2n a = n) ==> (a = n2w (MOD_WL n))
\ENDTHEOREM
\THEOREM word_0 word<n>
|- word_0 = n2w 0
\ENDTHEOREM
\THEOREM word_1 word<n>
|- word_1 = n2w 1
\ENDTHEOREM
\THEOREM word_H_def word<n>
|- word_H = n2w (2 ** HB - 1)
\ENDTHEOREM
\THEOREM word_L_def word<n>
|- word_L = n2w (2 ** HB)
\ENDTHEOREM
\THEOREM word_T word<n>
|- word_T = n2w (2 ** WL - 1)
\ENDTHEOREM
\THEOREM word_T_def word<n>
|- word_T = n2w (ONE_COMP 0)
\ENDTHEOREM
\THEOREM word_nchotomy word<n>
|- !w. ?n. w = n2w n
\ENDTHEOREM
