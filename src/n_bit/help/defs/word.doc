\THEOREM AND_def word<n>
|- AND = BITWISE WL $/\
\ENDTHEOREM
\THEOREM ASR_ONE_def word<n>
|- !a. ASR_ONE a = LSR_ONE a + SBIT (MSBn a) HB
\ENDTHEOREM
\THEOREM CMP_NZCV_def word<n>
|- !a b.
     CMP_NZCV a b =
     (let q = w2n a + w2n ~b in
      let r = n2w q in
        (MSB r,r = word_0,BIT WL q \/ (b = word_0),
         ~(MSB a = MSB b) /\ ~(MSB r = MSB a)))
\ENDTHEOREM
\THEOREM EOR_def word<n>
|- EOR = BITWISE WL (\x y. ~(x = y))
\ENDTHEOREM
\THEOREM EQUIV_def word<n>
|- !x y. x == y = (MOD_WL x = MOD_WL y)
\ENDTHEOREM
\THEOREM HB_def word<n>
|- HB = ??
\ENDTHEOREM
\THEOREM LSR_ONE_def word<n>
|- !a. LSR_ONE a = MOD_WL a DIV 2
\ENDTHEOREM
\THEOREM MOD_WL_def word<n>
|- !n. MOD_WL n = n MOD 2 ** WL
\ENDTHEOREM
\THEOREM MSBn_def word<n>
|- MSBn = BIT HB
\ENDTHEOREM
\THEOREM ONE_COMP_def word<n>
|- !x. ONE_COMP x = 2 ** WL - 1 - MOD_WL x
\ENDTHEOREM
\THEOREM OR_def word<n>
|- OR = BITWISE WL $\/
\ENDTHEOREM
\THEOREM ROR_ONE_def word<n>
|- !a. ROR_ONE a = LSR_ONE a + SBIT (LSBn a) HB
\ENDTHEOREM
\THEOREM RRXn_def word<n>
|- !c a. RRXn c a = LSR_ONE a + SBIT c HB
\ENDTHEOREM
\THEOREM TWO_COMP_def word<n>
|- !x. TWO_COMP x = 2 ** WL - MOD_WL x
\ENDTHEOREM
\THEOREM WL_def word<n>
|- WL = SUC HB
\ENDTHEOREM
\THEOREM WORD_BITS_def word<n>
|- !h l n. WORD_BITS h l n = BITS h l (w2n n)
\ENDTHEOREM
\THEOREM WORD_BIT_def word<n>
|- !b n. WORD_BIT b n = BIT b (w2n n)
\ENDTHEOREM
\THEOREM WORD_SLICE_def word<n>
|- !h l n. WORD_SLICE h l n = SLICE h l (w2n n)
\ENDTHEOREM
\THEOREM word_asr word<n>
|- !a n. a >> n = FUNPOW word_asr1 n a
\ENDTHEOREM
\THEOREM word_ge_def word<n>
|- !a b. a >= b = (let (n,z,c,v) = CMP_NZCV a b in n = v)
\ENDTHEOREM
\THEOREM word_gt_def word<n>
|- !a b. a > b = (let (n,z,c,v) = CMP_NZCV a b in ~z /\ (n = v))
\ENDTHEOREM
\THEOREM word_hi_def word<n>
|- !a b. a >. b = (let (n,z,c,v) = CMP_NZCV a b in c /\ ~z)
\ENDTHEOREM
\THEOREM word_hs_def word<n>
|- !a b. a >=. b = (let (n,z,c,v) = CMP_NZCV a b in c)
\ENDTHEOREM
\THEOREM word_le_def word<n>
|- !a b. a <= b = (let (n,z,c,v) = CMP_NZCV a b in z \/ ~(n = v))
\ENDTHEOREM
\THEOREM word_lo_def word<n>
|- !a b. a <. b = (let (n,z,c,v) = CMP_NZCV a b in ~c)
\ENDTHEOREM
\THEOREM word_ls_def word<n>
|- !a b. a <=. b = (let (n,z,c,v) = CMP_NZCV a b in ~c \/ z)
\ENDTHEOREM
\THEOREM word_lsl word<n>
|- !a n. a << n = a * n2w (2 ** n)
\ENDTHEOREM
\THEOREM word_lsr word<n>
|- !a n. a >>> n = FUNPOW word_lsr1 n a
\ENDTHEOREM
\THEOREM word_lt_def word<n>
|- !a b. a < b = (let (n,z,c,v) = CMP_NZCV a b in ~(n = v))
\ENDTHEOREM
\THEOREM word_ror word<n>
|- !a n. a #>> n = FUNPOW word_ror1 n a
\ENDTHEOREM
\THEOREM word_sub word<n>
|- !a b. a - b = a + ~b
\ENDTHEOREM
