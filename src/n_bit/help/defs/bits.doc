\THEOREM BITS_def bits
|- !h l n. BITS h l n = MOD_2EXP (SUC h - l) (DIV_2EXP l n)
\ENDTHEOREM
\THEOREM BITV_def bits
|- !n b. BITV n b = BITS b b n
\ENDTHEOREM
\THEOREM BITWISE_def bits
|- (!op x y. BITWISE 0 op x y = 0) /\
   !n op x y.
     BITWISE (SUC n) op x y =
     BITWISE n op x y + SBIT (op (BIT n x) (BIT n y)) n
\ENDTHEOREM
\THEOREM BIT_def bits
|- !b n. BIT b n = (BITS b b n = 1)
\ENDTHEOREM
\THEOREM DIV2_def bits
|- !n. DIV2 n = n DIV 2
\ENDTHEOREM
\THEOREM DIVMOD_2EXP_def bits
|- !x n. DIVMOD_2EXP x n = (n DIV 2 ** x,n MOD 2 ** x)
\ENDTHEOREM
\THEOREM DIV_2EXP_def bits
|- !x n. DIV_2EXP x n = n DIV 2 ** x
\ENDTHEOREM
\THEOREM LSBn_def bits
|- LSBn = BIT 0
\ENDTHEOREM
\THEOREM MOD_2EXP_def bits
|- !x n. MOD_2EXP x n = n MOD 2 ** x
\ENDTHEOREM
\THEOREM SBIT_def bits
|- !b n. SBIT b n = (if b then 2 ** n else 0)
\ENDTHEOREM
\THEOREM SIGN_EXTEND_def bits
|- !l h n.
     SIGN_EXTEND l h n =
     (let m = n MOD 2 ** l in
        (if BIT (l - 1) n then 2 ** h - 2 ** l + m else m))
\ENDTHEOREM
\THEOREM SLICE_def bits
|- !h l n. SLICE h l n = MOD_2EXP (SUC h) n - MOD_2EXP l n
\ENDTHEOREM
\THEOREM TIMES_2EXP_def bits
|- !x n. TIMES_2EXP x n = n * 2 ** x
\ENDTHEOREM
