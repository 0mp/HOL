.TH SMV 1 "26 November 1992" "SMV 2.4"
.\"	set paragraphs=LIIPLPPPQPXPP\ ILTP
.CM 4
.SH "NAME"
smv \- symbolic model verifier
.SH "SYNOPSIS"
.B smv
.RI "[\|" options "\|]"
.\"	.RI "[\|" \-AG "\|]"
.\"	.RB "[\|" \-f "\|]"
.\"	.RB "[\|" \-inc "\|]"
.\"	.RB "[\|" \-int "\|]"
.\"	.RB "[\|" \-r "\|]"
.\"	.\"	.RB "[\|" \-rr "\|]"
.\"	.RB "[\|" \-c
.\"	.IR cache-size "\|]"
.\"	.RB "[\|" \-k
.\"	.IR key-table-size "\|]"
.\"	.RB "[\|" \-m
.\"	.IR mini-cache-size "\|]"
.\"	.RB "[\|" \-cp
.\"	.IR conj-part-limit "\|]"
.\"	.RB "[\|" \-h
.\"	.IR heuristic-factor "\|]"
.\"	.RB "[\|" \-i
.\"	.IR input-order "\|]"
.\"	.RB "[\|" \-o
.\"	.IR output-order "\|]"
.\"	.RB "[\|" \-v
.\"	.IR verbose-level "\|]"
.RI "[\|" input-file "\|]"
.SH "DESCRIPTION"
.LP
.B smv
is a program that uses a symbolic model checking algorithm to evaluate
formulas of
.B CTL
.RB ( C "omputational
.BR T ree
.BR L ogic
\- a branching time temporal logic) with respect to a finite state
model.  The model and the specifications are described in
.I input-file
(default is the standard input).  The language for describing the model
is a simple parallel assignment.  For complete definition of
.B CTL
and the model description language, please refer to the document "The
SMV system."

.SH "OPTIONS"
.TP
.B \-AG
.RB Verify " Universal CTL"
formulas only.
.TP
.BI \-c " cache-size"
Set the size of the cache for BDD operations. It should be a prime or
nearly prime number. Default is 16381. There is a tradeoff here between
performance and memory. Up to a point, a larger cache can speed up
operations by orders of magnitude. Each cache entry uses 16 bytes, so a
quarter million entries use about four megabytes, which is reasonable
if you have about 12 megabytes of real memory available.  Virtual
memory is of practically no use.
.sp
Some suggested values for the -c parameter:
.ce
16381, 65521, 262063, 522713, 1046429
.TP
.BI \-cp " part-limit"
Perform conjunctional partitioning of the transition relation.  The
transition relation is not evaluated as a whole, instead the various
.BI next( variable )
assignments are collected into partitions.  When the size of a
partition exceeds
.IR part-limit ,
the remaining assignments are collected into a new partition.  When a
forward (or backward) traversal of the transition relation is needed,
each partition is used in turn.  After the use of each partition, early
quantification is done on unnecessary variables in order to reduce the
size of the intermediate BDD [This option currently makes
.B smv
run slower or use more memory].
.TP
.B \-f
Search the reachable state space of the model before evaluating the
.B CTL
operators.  This can result in improved performance for models with
sparse state spaces.
.TP
.BI \-h " heuristic-factor"
The variable ordering is determined by a heuristic procedure
which is based on the syntactic structure of the program, and a
floating point
.I heuristic-factor
between 0.0 and 1.0 [This option is currently broken].
.TP
.BI \-i " input-order"
The variable ordering is read from file
.IR input-order .
This overrides the
.B \-h
option.
This is most useful in combination with the
.B \-o
option: The variable ordering (with or without heuristic ordering) can
be written to a file using the
.B \-o
option, the file can be inspected and reordered by the user, then
read back in using the
.B \-i
option.  See
.B "VARIABLE ORDERING"
below.
.TP
.B \-inc
Perform incremental evaluation of the transition relation.  At each
step in the forward search, the transition relation is being restricted
to the reached state set.  This can cut down on the size of the
transition relation, although at the expense of some overhead to
reevaluate at each step.
.TP
.B \-int
.B smv
enters interactive mode after the processing of 
.I input-file
is completed.
See
.B INTERACTIVE MODE
below.
.TP
.BI \-k " key-table-size"
Set the size of the key table for BDD nodes. It should
be a prime or nearly prime number, and should be at least 1/10 the number
of BDD nodes in use at any given time. The default is 16381, which should
be enough for most applications.
.TP
.BI \-m " mini-cache-size"
Sets the size of the portion of the cache for BDD operations which is
used by the less expensive (non-iterative) BDD operations.  It should
be a prime or nearly prime number not larger than the
.IR cache-size .
The default is 16381, same as the default
.IR cache-size .
.TP
.BI \-o " output-order"
The variable ordering is written to file
.IR output-order ,
after parsing, and optional application of the heuristic variable
ordering procedure
.RB ( \-h ).
No evaluation occurs when the 
.B \-o
option is used.
.TP
.B \-r
The number of reachable states to be printed at termination.  This can
involve some extra work if the
.B \-f
option is not used.
.TP
.BI \-v " verbose-level"
A large amount of gibberish printed on the standard error. Setting
.I verbose-level
to 1 should give you all the information you need.  Using this option
makes you feel better, since otherwise the program prints nothing until
it finishes, and there is no evidence that it is doing anything at
all.  Setting the
.I verbose-level
higher than 2 has the same affect as 2.

.SH "VARIABLE ORDERING"
.B smv
uses Boolean Decision Diagrams (BDDs) to represent sets and relations
in the
.B CTL
model checking algorithm.  A BDD is a decision tree, in which variables
always appear in the same order as the tree is traversed from root to
leaf.  The efficiency of BDDs is obtained by always combining
isomorphic subtrees, and by eliminating redundant decision nodes in the
tree.  The degree storage efficiency obtained in this way is closely
related to the variable ordering.  The present version of the program
has no built-in heuristics for selecting the variable ordering.
Instead, the variables appear in the BDDs in the same order in which
they are declared in the program.  This means that variables declared
in the same module are grouped together, which is generally a good
practice, but this alone is not generally sufficient to obtain good
performance in the evaluation.  Usually, the variable ordering must be
adjusted by hand, in an ad hoc way.  A good heuristic is to arrange the
ordering so that variables which often appear close to each other in
formulas are close together in the order of declaration, and global
variables should appear first in the program.  The number of BDD nodes
currently in use is printed on standard error each time the program
performs garbage collection, if verbose-level is greater than zero.
Also, as each evaluation is made, the number of BDD nodes representing
the result is printed.  An important number to look at is the number of
BDD nodes representing the transition relation.  It is very important
to minimize this number.  Iterations are used to solved the fixed point
equations which characterize the
.B CTL
operators, and also to search for counterexamples.  With each
iteration, the number of BDD nodes used to represent the result is
printed, as well as the number of corresponding states.  Some of the
.I options
can improve performance.  Experiment with them if the run time starts
getting out of hand.

.SH "INTERACTIVE MODE"
When the
.B \-int
option is used,
.B smv
goes into interactive mode after the specifications in
.I input-file
has been checked.  In this mode, the model described in
.I input-file
is used as a basis for interactive debugging and modifications.
Moreover, specific states of the model can be reached using any trace
created by
.B smv
in either interactive or non-interactive mode.  A trace is a sequence
of states corresponding to a possible execution of the model.  Each
trace produced by
.B smv
has a number, and the states are numbered within the trace.  Trace
number
.I n
has states numbered
.I n.1, n.2, n.3, ".\|.\|."
If additional traces are needed, say from state
.IR n.i ,
these traces are numbered
.I n.i.1, n.i.2, n.i.3, ".\|.\|."
Within these traces, the states are numbered
.I n.i.m.1, n.i.m.2, n.i.m.3, ".\|.\|."
In the interactive mode
.B smv
associates a
.I current state
with one of the states of the model.  Most of the commands operate on
the
.IR "current state" .
The
.I current trace
is the trace the
.I current state
belongs to.
.SS "Interactive Commands"
The following commands are recognized in interactive mode:
.TP
.BI EVAL " expression" ;
.I expression
is evaluated in the
.IR "current state" .
.I expression
may be a 
.B CTL
formula, and therefore, can produce a trace,
from
.IR "current state" ,
to be used by later commands.
.TP
.BI FAIR " expression" ;
Add a new fairness constraint to the existing list of fairness
constraints (See "The SMV System").
.TP
.BI GOTO " state" ;
Make
.I state
the 
.IR "current state" .
.TP
.BI INIT " expression" ;
Add a constraint on the initial states.
.I expression
should hold for all initial states.  This command is equivalent to the
.B INIT
declaration in 
.I input-file
(See "The SMV System").
.TP
.BI LET " variable" " :=" " expression" ;
Assign the value of
.IR expression ,
as evaluated in the
.IR "current state" ,
to 
.IR variable .
This command changes the
.IR "current state" .
The value of all other variables in the new
.I current state
remains the same as it was in the old
.IR "current state" .
.TP
.B RESET ;
Discard all additions made to the model in interactive mode.
This command cancels the effect of all
.BR FAIR ,
.BR INIT ,
and 
.B TRANS
commands issued in interactive mode.
.TP
.BI SPEC " expression" ;
The specification
.I expression
is evaluated in all of the initial states.  This command is equivalent
to the
.B SPEC
declaration in the
.IR input-file .
.TP
.B STEP ;
Move to the next state in the current trace.
.TP
.BI TRANS " expression" ;
Add
.I expression
to the constraints on the transition relation.  
This command is equivalent to the
.B TRANS
declaration in the
.I input-file 
(See "The SMV System").
.SH "SEE ALSO"
.BR "The SMV system" ,
.br
.B Symbolic Model Checking \- an approach to the state explosion problem
by K. McMillan, CMU-CS-92-131
.SH "BUGS"
Arguments of the wrong type specified for certain
.IR options " and " commands
may produce cryptic (and fatal) error messages.
.SH "AUTHOR"
Kenneth L. McMillan, Carnegie Mellon University.
.br
mcmillan@cs.cmu.edu
