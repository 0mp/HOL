open DiskFilesHeader HolKernel

fun warn s = TextIO.output(TextIO.stdErr, s ^ "\n")

type result = (id array *
               prekind array *
               pretype array *
               pre_vc array *
               (string * prethm) list)

%%
%name DiskFiles
%keyword IDS KINDS TYPES TERMS THEOREMS

%nonterm theoryfile of result
       | ids_section of (int,id)Binarymap.dict
       | idpair_list of (int,id)Binarymap.dict
       | idpair of id
       | rank of int
       | kinds_section of (int,prekind)Binarymap.dict
       | types_section of (int,pretype)Binarymap.dict
       | kdsize_spec
       | tysize_spec
       | tmsize_spec
       | idsize_spec
       | kinddecl_list of (int,prekind)Binarymap.dict
       | kinddecl of prekind
       | typedecl_list of (int,pretype)Binarymap.dict
       | typedecl of pretype
       | type_n of int
       | intlist_ne of int list
       | terms_section of (int,pre_vc)Binarymap.dict
       | termdecl_list of (int,pre_vc)Binarymap.dict
       | termdecl of pre_vc
       | theorems of (string * prethm) list
       | namethm_list of (string * prethm) list
       | namethm of (string * prethm)
       | term of preterm
       | term_a of preterm
       | term_c of preterm
       | base_term of preterm
       | termlist of preterm list
       | tmid of int




%term EOF | ID of string | DOLLAR | FULLSTOP | COMMA | LPAREN | RPAREN |
      BACKSLASH | COLON | SLASH | LBRACKET | RBRACKET | NUMBER of int |
      IDS | KINDS | TYPES | TERMS | THEOREMS |
      KDTY | KDV | KDARR | TYV | TYC | TYAp | TYAbs | TYUni | TYExi | TMV | TMC

%eop EOF
%pos int
%noshift EOF
%verbose
%pure

%start theoryfile

%%
theoryfile : ids_section kinds_section types_section terms_section theorems
                (ids_section, kinds_section, types_section, terms_section, theorems)

ids_section : IDS idsize_spec idpair_list (idpair_list)

idsize_spec : NUMBER ()

idpair_list : (Binarymap.mkDict Int.compare)
            | idpair_list idpair
                 (Binarymap.insert(idpair_list, Binarymap.numItems idpair_list,
                                   idpair))

idpair : ID DOLLAR ID ( {Thy = ID1, Name = ID2 }  )

kinds_section : KINDS kdsize_spec kinddecl_list (kinddecl_list)

kdsize_spec : NUMBER ()

kinddecl_list : (Binarymap.mkDict Int.compare)
              | kinddecl_list kinddecl
                  (Binarymap.insert(kinddecl_list,
                                    Binarymap.numItems kinddecl_list,
                                    kinddecl))

rank : NUMBER (NUMBER)

kinddecl : KDTY LPAREN rank RPAREN (pkty rank)
         | KDV LPAREN ID COMMA rank RPAREN (pkv(ID,rank))
         | KDARR LPAREN NUMBER COMMA NUMBER RPAREN (pkarr(NUMBER1, NUMBER2))

types_section : TYPES tysize_spec typedecl_list (typedecl_list)

tysize_spec : NUMBER ()

typedecl_list : (Binarymap.mkDict Int.compare)
              | typedecl_list typedecl
                  (Binarymap.insert(typedecl_list,
                                    Binarymap.numItems typedecl_list,
                                    typedecl))

typedecl : TYV LPAREN ID COMMA NUMBER RPAREN (ptv(ID,NUMBER))
         | TYC LPAREN NUMBER COMMA NUMBER RPAREN (ptc(NUMBER1,NUMBER2))
         | TYAp LPAREN NUMBER COMMA NUMBER RPAREN (ptapp(NUMBER1,NUMBER2))
         | TYAbs LPAREN NUMBER COMMA NUMBER RPAREN (ptabs(NUMBER1,NUMBER2))
         | TYUni LPAREN NUMBER COMMA NUMBER RPAREN (ptuni(NUMBER1,NUMBER2))
         | TYExi LPAREN NUMBER COMMA NUMBER RPAREN (ptexi(NUMBER1,NUMBER2))

type_n : NUMBER (NUMBER)

intlist_ne : NUMBER ([NUMBER])
           | NUMBER intlist_ne (NUMBER::intlist_ne)

terms_section : TERMS tmsize_spec termdecl_list (termdecl_list)

tmsize_spec : NUMBER ()

termdecl_list : (Binarymap.mkDict Int.compare)
              | termdecl_list termdecl
                   (Binarymap.insert(termdecl_list,
                                     Binarymap.numItems termdecl_list,
                                     termdecl))

termdecl : TMV LBRACKET ID NUMBER RBRACKET (ptm_v(ID, NUMBER))
         | TMC LBRACKET NUMBER NUMBER RBRACKET
             (ptm_c(NUMBER1, NUMBER2))

theorems : THEOREMS namethm_list (namethm_list)

namethm_list : ([]) | namethm namethm_list (namethm :: namethm_list)

namethm : ID termlist ((ID, (tl termlist, hd termlist)))

termlist : term ([term])
         | term termlist (term :: termlist)

term : LPAREN term_a RPAREN (term_a)

term_a :
   BACKSLASH tmid FULLSTOP term_a (abs(tmid, term_a))
 | COLON base_term type_n (tyapp(base_term, type_n))
 | SLASH type_n FULLSTOP term_a (tyabs(type_n, term_a))
 | term_c (term_c)

term_c : term_c base_term (app(term_c, base_term))
       | base_term (base_term)

base_term : LPAREN term_a RPAREN (term_a)
          | tmid (atom tmid)

tmid :  NUMBER (NUMBER)

