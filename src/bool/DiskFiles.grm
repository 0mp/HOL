open DiskFilesHeader HolKernel
%%
%name DiskFiles
%arg (dftables) : dftables
%keyword IDS TYPES TERMS THEOREMS

%nonterm begin of (string * thm) list
       | theoryfile of (string * thm) list
       | ids_section of unit
       | idpair_list
       | idpair
       | types_section
       | tysize_spec
       | tmsize_spec
       | idsize_spec
       | typedecl_list
       | typedecl
       | intlist_ne of int list
       | terms_section
       | termdecl_list
       | termdecl
       | theorems of (string * thm) list
       | namethm_list of (string * thm) list
       | namethm of (string * thm)
       | term of term
       | term_a of term
       | term_c of term
       | base_term of term
       | termlist of term list
       | tmid of int




%term EOF | ID of string | DOLLAR | FULLSTOP | LPAREN | RPAREN | BACKSLASH |
      IDS | TYPES | TERMS | THEOREMS | LBRACKET | RBRACKET | NUMBER of int |
      TYV | TYOP | TMV | TMC

%eop EOF
%pos int
%noshift EOF
%verbose

%start begin

%%
begin : theoryfile (theoryfile)

theoryfile : ids_section types_section terms_section theorems (theorems)

ids_section : IDS idsize_spec idpair_list ()

idsize_spec : NUMBER (id_init dftables NUMBER)

idpair_list : ()
            | idpair idpair_list ()

idpair : ID DOLLAR ID ( newid dftables {Thy = ID1, Other = ID2 }  )

types_section : TYPES tysize_spec typedecl_list ()

tysize_spec : NUMBER (type_init dftables NUMBER)

typedecl_list : ()
              | typedecl typedecl_list ()

typedecl : TYV ID (newtype (mk_vartype ID) dftables)
         | TYOP LBRACKET intlist_ne RBRACKET
              (let val {Thy,Other} = lookup_id dftables (hd intlist_ne)
                   val args = map (lookup_type dftables) (tl intlist_ne)
               in
                 newtype (mk_thy_type{Thy = Thy, Tyop = Other, Args = args})
                         dftables
               end)

intlist_ne : NUMBER ([NUMBER])
           | NUMBER intlist_ne (NUMBER::intlist_ne)

terms_section : TERMS tmsize_spec termdecl_list ()

tmsize_spec : NUMBER (term_init dftables NUMBER)

termdecl_list : () | termdecl termdecl_list ()

termdecl : TMV LBRACKET ID NUMBER RBRACKET
             (let val ty = lookup_type dftables NUMBER
              in
                  newterm dftables (mk_var(ID, ty))
              end)
         | TMC LBRACKET NUMBER NUMBER RBRACKET
             (let val {Thy,Other} = lookup_id dftables NUMBER1
                  val ty = lookup_type dftables NUMBER2
              in
                  newterm dftables (mk_thy_const{Thy = Thy, Name = Other,
                                                 Ty = ty})
              end)

theorems : THEOREMS namethm_list (namethm_list)

namethm_list : ([]) | namethm namethm_list (namethm :: namethm_list)

namethm : ID termlist ((ID, mk_thm(tl termlist, hd termlist)))

termlist : term ([term])
         | term termlist (term :: termlist)

term : LPAREN term_a RPAREN (term_a)

term_a :
   BACKSLASH tmid FULLSTOP term_a (mk_abs(lookup_term dftables tmid, term_a))
 | term_c (term_c)

term_c : term_c base_term (mk_comb(term_c, base_term))
       | base_term (base_term)

base_term : LPAREN term_a RPAREN (term_a)
          | tmid (lookup_term dftables tmid)

tmid :  NUMBER (NUMBER)

