#!/usr/bin/perl -w

use IO::Handle;
STDOUT->autoflush(1);

sub usage {
    $message = "mprove: " . $_[0] . "\n" .
'Usage: mprove SECONDS PERCENT [option ...] -- [argument ...]

  SECONDS        Maximum CPU time for each execution
  PERCENT        Maximum memory usage for each execution
  --             Mandatory separator between options and arguments

Runs the '.$PROGRAM.' program separately on each argument, always giving the
same options. Imposes a CPU time limit of SECONDS and a maximum memory
usage of PERCENT. As soon as an execution of '.$PROGRAM.' oversteps either
of these, it is killed off and the next execution is begun.

Use - to signify no limit on CPU time limit or memory usage.

To change the program executed from the default ('.$PROGRAM.'), use
  mprove -e EXECUTABLE SECONDS PERCENT [option ...] -- [argument ...]

If there are no arguments passed in on the command line, they are
instead read from STDIN.
';
    die $message;
}

sub advertize {
    my ($mesg) = @_;
    (scalar @_ == 1) or die;

    $out = "==$mesg";    
    for ($len = 79 - length $out; 0 < $len; --$len) {
        $out = $out . "=";
    }

    return "$out\n\n";
}

sub attack {
    my @arguments = @_;
    
    $command =
        "limit $cpu $mem $PROGRAM "
        . join (" ", @options) . " "
        . join (" ", @arguments);

    system ($command);
}

$PROGRAM = "bin/metis-tptp";

if (2 <= scalar(@ARGV) and $ARGV[0] eq "-e") {
    shift @ARGV;
    $PROGRAM = shift @ARGV;
}

(2 <= scalar(@ARGV)) or usage "too few arguments";
$cpu = shift @ARGV;
$mem = shift @ARGV; $mem =~ s/%//;

@options = ();

while (1) {
    if (scalar @ARGV == 0) { usage "no -- separator found"; }

    $opt = shift @ARGV;
    if ($opt eq "--") { last; }
    push @options, $opt;
}

@problems = ();

if (scalar @ARGV == 0) {
    while ($file = <STDIN>) {
        chomp $file;
        push @problems, $file;
    }
}
else {
    while (0 < scalar @ARGV) {
        $file = shift @ARGV;
        push @problems, $file;
    }
}

$NUM = scalar @problems;

if ($NUM == 0) {
    usage "no problems";
}

print STDOUT (advertize "wrapped==$PROGRAM==entering");

print STDOUT ("CPU limit  = $cpu" . "s\n");
print STDOUT "Max memory = $mem%\n\n";

print STDOUT "Problems: $NUM\n";

if ($NUM == 1) {
    attack @problems;
}
else {
    # Each problem
    for ($i = 0; $i < $NUM; ++$i) {
        attack ($problems[$i]);
    }
}

print STDOUT (advertize "wrapped==$PROGRAM==exiting");
