(* this is an -*- sml -*- file, or near enough *)
val output_stream = ref TextIO.stdOut
fun ECHO s = TextIO.output(!output_stream, s)
fun print s = TextIO.output(!output_stream, s)
val comdepth = ref 0
val pardepth = ref 0
val antiquote = ref false
fun inc r = (r := !r + 1)
fun dec r = (r := !r - 1)

fun drop_upto c s = let
  (* returns the substring of s that begins at the first occurrence of c *)
  open Substring
  val ss = all s
  val remainder = dropl (fn c' => c <> c') ss
in
  string remainder
end

(* generate location pragmas inside fragments (not antiquoted ones), for the lex
er *)
val row = ref 0
val rowstart = ref 0
fun nextline pos = (row := !row + 1; rowstart := pos)
fun locpragma (s,pos) off
  = " (*#loc "^Int.toString(!row + 1)^" "^
    Int.toString(pos + size s - !rowstart - off + 1)^"*)"
    (* NB: the initial space is critical, or else the comment might not be recog
nised
       when prepended by a paren or symbol char.  --KW
       See cvs log comment at rev 1.2 of src/parse/base_tokens.lex *)

fun newline(yypos,yytext) = (print "\n"; TextIO.flushOut (!output_stream);
                             nextline (yypos + size yytext));
fun qnewline(yypos,yytext) =
    (nextline (yypos + size yytext);
     print (" \",\nQUOTE \""^locpragma (yytext,yypos) 0);
     TextIO.flushOut (!output_stream))

fun dolocpragma (s,pos)
  = let val ss = Substring.all s
        val sr = Substring.dropl (not o Char.isDigit) ss
        val sc = Substring.dropl (Char.isDigit) sr
    in
      ECHO s;
      row := valOf (Int.fromString(Substring.string sr)) - 1;
      rowstart := pos + size s -
                  (valOf (Int.fromString(Substring.string sc)) - 1)
    end
type lexresult = (string * int)

fun eof () = ("", 0)
%%
%structure filter
%s string comment qcomment tmcomment tycomment tyquote tmquote quote ANTIQ;

letter = [A-Za-z];
digit = [0-9];
symbol = [-!%&$+/:<=>?@~|#*\\^];
MLid = ({letter} ({letter} | {digit} | _ | "'")*) | {symbol}+;
ws = [\ \t];
newline = "\n" | "\015\n";
locpragma = "(*#loc" {ws}+ {digit}* {ws}+ {digit}* {ws}* "*)";

%%

{locpragma} => (dolocpragma (yytext, yypos); lex());

<INITIAL>"(*" => (ECHO yytext; inc comdepth; YYBEGIN comment; lex());
<INITIAL>"(" => (ECHO yytext; inc pardepth; lex());
<INITIAL>")" => (ECHO yytext; dec pardepth;
                 if !antiquote andalso !pardepth < 1 then (yytext,yypos)
                 else lex());
<INITIAL>"``" {ws}* ":" ({letter} | {ws} | {newline} | [(']) => (
                 print ("(Parse.Type [QUOTE \""^locpragma (yytext,yypos) 2);
                 print (drop_upto #":" yytext);
                 YYBEGIN tyquote;
                 lex());
<INITIAL>"``" {ws}* ":^" =>
              (print ("(Parse.Type [QUOTE \""^locpragma (yytext,yypos) 2^
                      ":\", ANTIQUOTE (");
               YYBEGIN ANTIQ;
               lex();
               YYBEGIN tyquote;
               lex());
<INITIAL>"``" => (print ("(Parse.Term [QUOTE \""^locpragma (yytext,yypos) 0);
                  YYBEGIN tmquote; lex());
<INITIAL>"`" => (print ("[QUOTE \""^locpragma (yytext,yypos) 0); YYBEGIN quote;
                 lex());
<INITIAL>"\"" => (ECHO yytext; YYBEGIN string; lex());
<INITIAL>{newline} => (newline(yypos,yytext); lex());
<INITIAL>. => (ECHO yytext;lex());

<string>"\"" => (ECHO yytext; YYBEGIN INITIAL; lex());
<string>{newline} => (newline(yypos,yytext); lex());
<string>. => (ECHO yytext; lex());

<comment,tmcomment,tycomment,qcomment>"(*" =>
                (ECHO yytext; inc comdepth; lex());
<comment>"*)" => (ECHO yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN INITIAL else ();
                  lex());
<tmcomment>"*)" => (ECHO yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN tmquote else ();
                  lex());
<tycomment>"*)" => (ECHO yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN tyquote else ();
                  lex());
<qcomment>"*)" => (ECHO yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN quote else ();
                  lex());
<comment>{newline} => (newline(yypos,yytext); lex());
<tmcomment,tycomment,qcomment>{newline} => (qnewline(yypos,yytext); lex());
<tmcomment,tycomment,qcomment>"\\" => (ECHO "\\\\"; lex());
<tmcomment,tycomment,qcomment>"\"" => (ECHO "\\\""; lex());
<tmcomment,tycomment,qcomment>"\t" => (ECHO "\\t"; lex());
<tmcomment,tycomment,qcomment>"^`" => (ECHO "`"; lex());
<tmcomment,tycomment>"``" => (print "\"])"; YYBEGIN INITIAL; lex());
<qcomment>"`" => (print "\"]"; YYBEGIN INITIAL; lex());
<comment,tmcomment,tycomment,qcomment>. => (ECHO yytext; lex());

<quote,tmquote,tyquote>"^^" => (ECHO "^"; lex());
<quote,tmquote,tyquote>"^`" => (ECHO "`"; lex());
<quote,tmquote,tyquote>"\\" => (print "\\\\"; lex());
<quote,tmquote,tyquote>"\"" => (print "\\\""; lex());
<quote,tmquote,tyquote>"\t" => (print "\\t"; lex());
<quote,tmquote,tyquote>{newline} => (qnewline(yypos,yytext); lex());

<quote>"`" => (print "\"]"; YYBEGIN INITIAL; lex());
<tmquote,tyquote>"``" => (print "\"])"; YYBEGIN INITIAL; lex());

<quote>"(*" => (ECHO yytext; YYBEGIN qcomment; lex());
<tmquote>"(*" => (ECHO yytext; YYBEGIN tmcomment; lex());
<tyquote>"(*" => (ECHO yytext; YYBEGIN tycomment; lex());

<quote>"^" => (print "\", ANTIQUOTE ("; YYBEGIN ANTIQ; lex();
               YYBEGIN quote; lex());
<tmquote>"^" => (print "\", ANTIQUOTE ("; YYBEGIN ANTIQ; lex();
                 YYBEGIN tmquote; lex());
<tyquote>"^" => (print "\", ANTIQUOTE ("; YYBEGIN ANTIQ; lex();
                 YYBEGIN tyquote; lex());


<quote,tmquote,tyquote>. => (ECHO yytext;lex());

<ANTIQ>{MLid} => (ECHO yytext;
                  print ("),QUOTE \""^locpragma (yytext,yypos) 0);
                  (yytext,yypos));
<ANTIQ>"(" => (let val oldanti = !antiquote
                   in
                     ECHO yytext;
                     pardepth := 1;
                     antiquote := true;
                     YYBEGIN INITIAL;
                     let val (yytext,yypos) = lex()
                     in
                       print ("),QUOTE \""^locpragma (yytext, yypos) 0);
                       antiquote := oldanti;
                       (yytext,yypos)
                     end
               end);
<ANTIQ>{ws}+ => (lex());
<ANTIQ>{newline} => (newline(yypos,yytext); lex());
<ANTIQ>. => (ECHO yytext; (yytext,yypos));
