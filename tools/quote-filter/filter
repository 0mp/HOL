(* this is an -*- sml -*- file, or near enough *)
fun inc r = (r := !r + 1)
fun dec r = (r := !r - 1)

fun bslash_escape s = "\\" ^ Int.toString (Char.ord(String.sub(s,0)))

datatype qfs = QFS of {output_stream : TextIO.outstream,
                       comdepth : int ref,
                       pardepth : int ref,
                       antiquote: bool ref,
                       row      : int ref,
                       rowstart : int ref}

fun ECHO (QFS {output_stream , ...}) s = TextIO.output(output_stream, s)
fun print (QFS {output_stream, ...}) s = TextIO.output(output_stream, s)

fun drop_upto c s = let
  (* returns the substring of s that begins at the first occurrence of c *)
  open Substring
  val ss = all s
  val remainder = dropl (fn c' => c <> c') ss
in
  string remainder
end

(* generate location pragmas inside fragments (not antiquoted ones), for the lex
er *)
(*
val row = ref 0
val rowstart = ref 0
*)
fun nextline (QFS {row, rowstart, ...}) pos = (inc row; rowstart := pos)
fun locpragma (QFS {row, rowstart, ...}) (s,pos) off
  = " (*#loc "^Int.toString((!row) + 1)^" "^
    Int.toString(pos + size s - (!rowstart) - off + 1)^"*)"
    (* NB: the initial space is critical, or else the comment might not be recog
nised
       when prepended by a paren or symbol char.  --KW
       See cvs log comment at rev 1.2 of src/parse/base_tokens.lex *)
fun flushOut (QFS {output_stream,...}) = TextIO.flushOut output_stream

fun newline (arg as QFS q) (yypos,yytext) =
  (print arg "\n";
   flushOut arg;
   nextline arg (yypos + size yytext));

fun qnewline arg (yypos,yytext) =
    (nextline arg (yypos + size yytext);
     print arg "\\n\\\n\\" ;
     flushOut arg)

fun dolocpragma (arg as QFS {output_stream, row, rowstart, ...}) (s,pos)
  = let val ss = Substring.all s
        val sr = Substring.dropl (not o Char.isDigit) ss
        val sc = Substring.dropl (Char.isDigit) sr
    in
      ECHO arg s;
      row := valOf (Int.fromString(Substring.string sr)) - 1;
      rowstart := pos + size s - (valOf (Int.fromString(Substring.string sc)) - 1)
    end

type lexresult = (string * int)

fun eof arg = ("", 0)
%%
%structure filter
%s string comment qcomment tmcomment tycomment tyquote tmquote quote ANTIQ;
%arg (UserDeclarations.QFS {output_stream, comdepth, pardepth, antiquote, row, rowstart});
%full

letter = [A-Za-z];
digit = [0-9];
symbol = [-!%&$+/:<=>?@~|#*\\^];
MLid = ({letter} ({letter} | {digit} | _ | "'")*) | {symbol}+;
ws = [\ \t];
newline = "\n" | "\015\n";
locpragma = "(*#loc" {ws}+ {digit}* {ws}+ {digit}* {ws}* "*)";

%%

{locpragma} => (dolocpragma yyarg (yytext, yypos); continue());

<INITIAL>"(*" => (ECHO yyarg yytext; inc comdepth; YYBEGIN comment; continue());
<INITIAL>"(" => (ECHO yyarg yytext; inc pardepth; continue());
<INITIAL>")" => (ECHO yyarg yytext; dec pardepth;
                 if !antiquote andalso !pardepth < 1 then (yytext,yypos)
                 else continue());
<INITIAL>"``" {ws}* ":" ({letter} | {ws} | {newline} | [('] | {digit}) => (
                 print yyarg ("(Parse.Type [QUOTE \""^locpragma yyarg (yytext,yypos) 2);
                 print yyarg (drop_upto #":" yytext);
                 YYBEGIN tyquote;
                 continue());
<INITIAL>"``" {ws}* ":^" =>
              (print yyarg ("(Parse.Type [QUOTE \""^locpragma yyarg (yytext,yypos) 2^
                      ":\", ANTIQUOTE (");
               YYBEGIN ANTIQ;
               continue();
               YYBEGIN tyquote;
               continue());
<INITIAL>"``" => (print yyarg ("(Parse.Term [QUOTE \""^locpragma yyarg (yytext,yypos) 0);
                  YYBEGIN tmquote; continue());
<INITIAL>"`" => (print yyarg ("[QUOTE \""^locpragma yyarg (yytext,yypos) 0); YYBEGIN quote;
                 continue());
<INITIAL>"\"" => (ECHO yyarg yytext; YYBEGIN string; continue());
<INITIAL>{newline} => (newline yyarg (yypos,yytext); continue());
<INITIAL>[^()*`"\n\015]+ => (ECHO yyarg yytext;continue());
<INITIAL>. => (ECHO yyarg yytext;continue());

<string>"\\\\" => (ECHO yyarg yytext; continue());
<string>"\\\"" => (ECHO yyarg yytext; continue());
<string>"\"" => (ECHO yyarg yytext; YYBEGIN INITIAL; continue());
<string>{newline} => (newline yyarg (yypos,yytext); continue());
<string>[\128-\255] => (ECHO yyarg (bslash_escape yytext); continue());
<string>[^\\"\n\015\128-\255]+ => (ECHO yyarg yytext; continue());
<string>. => (ECHO yyarg yytext; continue());

<comment,tmcomment,tycomment,qcomment>"(*" =>
                (ECHO yyarg yytext; inc comdepth; continue());
<comment>"*)" => (ECHO yyarg yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN INITIAL else ();
                  continue());
<tmcomment>"*)" => (ECHO yyarg yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN tmquote else ();
                  continue());
<tycomment>"*)" => (ECHO yyarg yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN tyquote else ();
                  continue());
<qcomment>"*)" => (ECHO yyarg yytext; dec comdepth;
                  if !comdepth < 1 then YYBEGIN quote else ();
                  continue());
<comment>{newline} => (newline yyarg (yypos,yytext); continue());
<tmcomment,tycomment,qcomment>{newline} => (qnewline yyarg (yypos,yytext); continue());
<tmcomment,tycomment,qcomment>"\\" => (ECHO yyarg "\\\\"; continue());
<tmcomment,tycomment,qcomment>"\"" => (ECHO yyarg "\\\""; continue());
<tmcomment,tycomment,qcomment>"\t" => (ECHO yyarg "\\t"; continue());
<tmcomment,tycomment,qcomment>"^`" => (ECHO yyarg "`"; continue());
<tmcomment,tycomment>"``" => (print yyarg "\"])"; comdepth := 0;
                              YYBEGIN INITIAL; continue());
<qcomment>"`" => (print yyarg "\"]"; comdepth := 0;
                  YYBEGIN INITIAL; continue());
<comment,tmcomment,tycomment,qcomment>[^\n\015\\"\t^`*()]+ => (ECHO yyarg yytext; continue());
<comment,tmcomment,tycomment,qcomment>. => (ECHO yyarg yytext; continue());

<quote,tmquote,tyquote>"^"+{ws} => (ECHO yyarg yytext; continue());
<quote,tmquote,tyquote>"^"+{newline} =>
   (ECHO yyarg (String.substring(yytext,0,size yytext - 1));
    qnewline yyarg (yypos,yytext);
    continue());
<quote,tmquote,tyquote>"^^" => (ECHO yyarg "^"; continue());
<quote,tmquote,tyquote>"^`" => (ECHO yyarg "`"; continue());
<quote,tmquote,tyquote>"^"{symbol} => (ECHO yyarg yytext; continue());
<quote,tmquote,tyquote>{newline} => (qnewline yyarg (yypos,yytext); continue());

<quote>"`" => (print yyarg "\"]"; YYBEGIN INITIAL; continue());
<tmquote,tyquote>"``" => (print yyarg "\"])"; YYBEGIN INITIAL; continue());

<quote>"(*" => (ECHO yyarg yytext; inc comdepth; YYBEGIN qcomment; continue());
<tmquote>"(*" => (ECHO yyarg yytext; inc comdepth; YYBEGIN tmcomment;
                  continue());
<tyquote>"(*" => (ECHO yyarg yytext; inc comdepth; YYBEGIN tycomment;
                  continue());

<quote>"^" => (print yyarg "\", ANTIQUOTE ("; YYBEGIN ANTIQ; continue();
               YYBEGIN quote; continue());
<tmquote>"^" => (print yyarg "\", ANTIQUOTE ("; YYBEGIN ANTIQ; continue();
                 YYBEGIN tmquote; continue());
<tyquote>"^" => (print yyarg "\", ANTIQUOTE ("; YYBEGIN ANTIQ; continue();
                 YYBEGIN tyquote; continue());


<quote,tmquote,tyquote>[\128-\255] => (ECHO yyarg (bslash_escape yytext);
                                       continue());
<quote,tmquote,tyquote>[^`\n\015^ \t(*\128-\255]+ =>
  (ECHO yyarg (String.toString yytext); continue());
<quote,tmquote,tyquote>. => (ECHO yyarg (String.toString yytext); continue());

<ANTIQ>{MLid} => (ECHO yyarg yytext;
                  print yyarg ("),QUOTE \""^locpragma yyarg (yytext,yypos) 0);
                  (yytext,yypos));
<ANTIQ>"(" => (let val oldanti = !antiquote
                   in
                     ECHO yyarg yytext;
                     pardepth := 1;
                     antiquote := true;
                     YYBEGIN INITIAL;
                     let val (yytext,yypos) = continue()
                     in
                       print yyarg ("),QUOTE \""^locpragma yyarg (yytext, yypos) 0);
                       antiquote := oldanti;
                       (yytext,yypos)
                     end
               end);
<ANTIQ>{ws}+ => (continue());
<ANTIQ>{newline} => (newline yyarg (yypos,yytext); continue());
<ANTIQ>. => (ECHO yyarg yytext; (yytext,yypos));
