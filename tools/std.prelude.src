(*---------------------------------------------------------------------------*
 * Bring in the HOL kernel.                                                  *
 *---------------------------------------------------------------------------*)

val _ = quietdec := true;

local open Path
      val SIGOBJ = __
in
val _ = Meta.loadPath := SIGOBJ :: !Meta.loadPath
val _ = load "HolKernel"
end;

(*---------------------------------------------------------------------------*
 *       Establish the basic environment.                                    *
 *---------------------------------------------------------------------------*)

open HolKernel Globals;
infix ## |->;
infixr 3 -->;


(*---------------------------------------------------------------------------*
 * Often, people want to use "standard" HOL tools: tactics, conversions,     *
 * rewriting, etc. That's what the next few lines achieve.                   *
 *---------------------------------------------------------------------------*)

val _ = app load ["Parse", "basicHol90Lib",
                  "goalstackLib", "Psyntax", "Rsyntax"];

open Parse basicHol90Lib goalstackLib Psyntax;

infix THEN THENL THENC ORELSE ORELSEC THEN_TCL ORELSE_TCL;
infix 8 via;


(*---------------------------------------------------------------------------*
 *   Install prettyprinters                                                  *
 *---------------------------------------------------------------------------*)

local fun capture_errors ppfn pps x =
             ppfn pps x
             handle (e as HOL_ERR _) => (print "Pretty-printer error:\n";
                                         print_HOL_ERR e)
                  | e => (print "Pretty-printer error:\n";
                          print (exnMessage e);
                          print "\n")
in
  val _ = installPP (capture_errors (term_pp_with_delimiters pp_term))
  val _ = installPP (capture_errors (type_pp_with_delimiters pp_type))
  val _ = installPP (capture_errors pp_thm)
  val _ = installPP (capture_errors term_grammar.prettyprint_grammar)

  val _ = installPP goalstackLib.pp_proofs
  val _ = installPP goalstackLib.pp_goalstack
  val _ = installPP Rewrite.pp_rewrites
  val _ = installPP TypeBase.pp_tyinfo
  val _ = installPP DefnBase.pp_defn
end;


(*---------------------------------------------------------------------------*
 * Set up the the help paths.                                                *
 *---------------------------------------------------------------------------*)

local
  open Path
  fun HELP s = toString(fromString(concat(HOLDIR, concat("help",s))))
  val SIGOBJ = toString(fromString(concat(HOLDIR, "sigobj")))
  val docdirs = __
in
  val () = indexfiles := HELP"HOLdbase" :: !indexfiles ;
  val () = helpdirs := docdirs @ (SIGOBJ  :: !helpdirs)
  val () = Help.specialfiles :=
        {file = "README.Hol98", term = "hol", title = "Hol98 Overview"}
        :: !Help.specialfiles
end


(*---------------------------------------------------------------------------*
 *  Set parameters for parsing and help.                                     *
 *---------------------------------------------------------------------------*)

val _ = quotation := true
val _ = Help.displayLines := 40;


(*---------------------------------------------------------------------------*
 * Print a banner.                                                           *
 *---------------------------------------------------------------------------*)

val _ =
TextIO.output(TextIO.stdOut,
  "\n-----------------------------------------------------------------\n"
  ^"                 HOL98 ["
  ^Globals.release^" "^Lib.int_to_string(Globals.version)
  ^"]\n\n       For introductory HOL help, type: help \"hol\";\n"
  ^"-----------------------------------------------------------------\n\n");
