(*---------------------------------------------------------------------------*
 * Bring in the HOL kernel.                                                  *
 *---------------------------------------------------------------------------*)

val _ = quietdec := true;

local open Path
      val SIGOBJ = __
in
val _ = Meta.loadPath := SIGOBJ :: !Meta.loadPath
end;

(*---------------------------------------------------------------------------*
 *       Establish the basic environment.                                    *
 *---------------------------------------------------------------------------*)

val _ = app load ["HolKernel", "boolLib", "goalstackLib"];

open HolKernel Parse boolLib goalstackLib;

infix ++ && ## |-> THEN THENL THENC ORELSE ORELSEC THEN_TCL ORELSE_TCL;
infixr 3 -->;
infix 8 via by;


(*---------------------------------------------------------------------------*
 *   Install prettyprinters                                                  *
 *---------------------------------------------------------------------------*)

local fun with_pp ppfn pps x = ppfn pps x handle e => Raise e
in
  val _ = installPP (with_pp (Parse.term_pp_with_delimiters Parse.pp_term))
  val _ = installPP (with_pp (Parse.type_pp_with_delimiters Parse.pp_type))
  val _ = installPP (with_pp Parse.pp_thm)
  val _ = installPP (with_pp term_grammar.prettyprint_grammar)
  val _ = installPP (with_pp parse_type.prettyprint_grammar)

  val _ = installPP goalstackLib.pp_proofs
  val _ = installPP goalstackLib.pp_goalstack
  val _ = installPP Rewrite.pp_rewrites
  val _ = installPP TypeBase.TypeInfo.pp_tyinfo
  val _ = installPP DefnBase.pp_defn
end;


(*---------------------------------------------------------------------------*
 * Set up the the help paths.                                                *
 *---------------------------------------------------------------------------*)

local
  open Path
  fun HELP s = toString(fromString(concat(HOLDIR, concat("help",s))))
  val SIGOBJ = toString(fromString(concat(HOLDIR, "sigobj")))
  val docdirs = __
in
  val () = indexfiles := HELP"HOLdbase" :: !indexfiles ;
  val () = helpdirs := docdirs @ (SIGOBJ  :: !helpdirs)
  val () = Help.specialfiles :=
        {file = "README.Hol98", term = "hol", title = "Hol98 Overview"}
        :: !Help.specialfiles
end


(*---------------------------------------------------------------------------*
 *  Set parameters for parsing and help.                                     *
 *---------------------------------------------------------------------------*)

val _ = quotation := true
val _ = Help.displayLines := 40;

(*---------------------------------------------------------------------------*
 *  Set up compile_theory function                                           *
 *---------------------------------------------------------------------------*)

fun compile_theory () = let
  val name = current_theory()
  val signame = name^"Theory.sig"
  val smlname = name^"Theory.sml"
  fun readable f = FileSys.access(f, [FileSys.A_READ])
in
  if readable signame andalso readable smlname then let
  in
     Meta.compileStructure ["Overlay"] signame;
     Meta.compileStructure ["Overlay"] smlname;
     print ("Compiled "^name^" theory files.\n")
  end
  else
     print "No theory files on disk; perhaps export_theory() required.\n"
end


(*---------------------------------------------------------------------------*
 * Print a banner.                                                           *
 *---------------------------------------------------------------------------*)

val _ =
TextIO.output(TextIO.stdOut,
  "\n-----------------------------------------------------------------\n"
  ^"                 HOL98 ["
  ^Globals.release^" "^Lib.int_to_string(Globals.version)
  ^"]\n\n       For introductory HOL help, type: help \"hol\";\n"
  ^"-----------------------------------------------------------------\n\n");
