(* lts_to_latex.ml -- turn LTS (in HOL) into LaTeX code *)
(* Keith Wansbrough 2001-2004 *)

open Holdoc_init
open Holparse
open Holparsesupp
open Holparsetools
open Holdocmodel
open Simpledump


(* -------------------------------------------------------------------- *)
(*  Diagnostics                                                         *)
(* -------------------------------------------------------------------- *)

exception Unimplemented of string


(* -------------------------------------------------------------------- *)
(*  High-level document model                                           *)
(* -------------------------------------------------------------------- *)

type rule_body =
    { r_body : holdoc;
    }

type definition_body =
    { d_body : holdoc
    }

type type_body =
    { t_body : holdoc
    }

type item =
    Rule of rule_body
  | Definition of definition_body
  | Type of definition_body
  | Directive of (unit -> unit)       (* a directive that is not inside an item *)


(* -------------------------------------------------------------------- *)
(*  Parse item(s) from each chunk                                       *)
(* -------------------------------------------------------------------- *)

let parse_Net_Hol_reln : hol_content list -> item list
    = fun ds ->
      [ Rule { r_body = ds } ]  (* PLACEHOLDER *)

let parse_Define : hol_content list -> item
    = fun ds ->
      Definition { d_body = ds }  (* PLACEHOLDER *)

let parse_xDefine : string -> hol_content list -> item
    = fun ds ->
      Definition { d_body = ds }  (* PLACEHOLDER *)

let parse_Hol_datatype : hol_content list -> item
    = fun ds ->
      Type { t_body = ds }  (* PLACEHOLDER *)


(* -------------------------------------------------------------------- *)
(*  Parse whole file                                                    *)
(* -------------------------------------------------------------------- *)

(* parse all the items from a mosml_content stream: worker.
   Results prepended onto 'is' in reverse order. *)
let rec parseltsdoc0 : mosml_content list -> item list -> item list
    = fun ds is ->
      match ds with
        [] -> is
      | (d::ds) ->
          match d with
            MosmlContent s -> parseltsdoc0 ds is
          | MosmlStr s     -> parseltsdoc0 ds is
          | MosmlIndent n  -> parseltsdoc0 ds is
          | MosmlHol(Some (tag,strs),MosmlHolBT,d') ->
              (match (tag,strs) with
                ("Net_Hol_reln",[] ) -> let is' = parse_Net_Hol_reln d' in
                                        parseltsdoc0 ds (is'@is)
              | ("Define"      ,[] ) -> let i = parse_Define d' in
                                        parseltsdoc0 ds (i::is)
              | ("xDefine"     ,[s]) -> let i = parse_xDefine s d' in
                                        parseltsdoc0 ds (i::is)
              | ("Hol_datatype",[] ) -> let i = parse_Hol_datatype d' in
                                        parseltsdoc0 ds (i::is)
              | _ ->
                  raise (Unimplemented ("Tag "^tag^" unimplemented or extra string, sorry!")))
          | MosmlHol(_,_,_) ->
              raise (Unimplemented ("Tagless or double-backticked item unimplemented, sorry!"))
          | MosmlText d -> (skiptext d; parseltsdoc0 ds is)
          | MosmlTex d -> (skiptex d; parseltsdoc0 ds is)
          | MosmlDir (DirThunk f) -> parseltsdoc0 ds (Directive f::is)
          | MosmlDir (DirVARS _) -> parseltsdoc0 ds is
            

(* parse all the items from a mosmldoc *)
let parseltsdoc : mosmldoc -> item list
    = fun d ->
      List.rev (parseltsdoc0 d [])



(* -------------------------------------------------------------------- *)
(*  Main program                                                        *)
(* -------------------------------------------------------------------- *)

let _ =
  !curmodals.rULES := true;
  let ltsdoc = parse_chan ModeMosml mosml_main stdin in
  print_string "%%%% AUTOGENERATED FILE (from LTS source) -- DO NOT EDIT! %%%%\n";
  let rules = parseltsdoc ltsdoc in
  ()

