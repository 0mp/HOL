%{
fun concat_with_spaces [] = ""
  | concat_with_spaces [x] = x
  | concat_with_spaces (h::t) = h ^ " " ^ concat_with_spaces t
open Holmake_types
%}

%token EOF COLON TAB NEWLINE INCLUDES OPTIONS PRE_INCLUDES EQUALS EXTRA_CLEANS
%token WS
%token <string> ID
%token <string> VARREF

%start MakefileDoc
%type <Holmake_types.doc> MakefileDoc
%type <Holmake_types.preliminary> Preliminary Preliminaries
%type <Holmake_types.rule list> Rules
%type <Holmake_types.rule> Rule
%type <Holmake_types.id> Id
%type <Holmake_types.id list> Idlist SomeIdlist
%type <Holmake_types.id list list> Commlist
%type <unit> NoNLWhitespace AnyNoNLWhitespace SomeWhitespace
%type <unit> wsequal NonTabWS

%%

MakefileDoc:
  Rules  {
    {rules = $1, preliminaries = empty_preliminary }
  }
| SomeWhitespace Rules {
    {rules = $2, preliminaries = empty_preliminary }
  }
| Preliminaries Rules { { preliminaries = $1, rules = $2 } }
| Preliminaries SomeWhitespace Rules { { preliminaries = $1, rules = $3 } }
| SomeWhitespace Preliminaries Rules {
    { preliminaries = $2, rules = $3 } }
| SomeWhitespace Preliminaries SomeWhitespace Rules {
    {rules = $4, preliminaries = $2}
  }

Preliminaries:
    Preliminary { $1 }
  | Preliminary Preliminaries { merge_prelims $1 $2 }

wsequal: AnyNoNLWhitespace EQUALS AnyNoNLWhitespace { () }

NonTabWS : WS {()} | NEWLINE {()}

Preliminary:
    OPTIONS wsequal SomeIdlist { {options = $3, includes = [],
                                 pre_includes = [], extra_cleans = []} }
  | INCLUDES wsequal SomeIdlist { {options = [], includes = $3,
                                  pre_includes = [], extra_cleans = []} }
  | PRE_INCLUDES wsequal SomeIdlist { {options = [], includes = [],
                                      pre_includes = $3, extra_cleans = []} }
  | EXTRA_CLEANS wsequal SomeIdlist { {options = [], includes = [],
                                      pre_includes = [], extra_cleans = $3} }


Rules:
    EOF  { [] }
  | Rule Rules { $1 :: $2 }
  | Rule NonTabWS Rules { $1 :: $3 }
  | Rule NonTabWS SomeWhitespace Rules { $1 :: $4 }


Rule:
  Id AnyNoNLWhitespace COLON AnyNoNLWhitespace SomeIdlist Commlist {
     {target = $1, dependencies = $5, commands = $6}
  }

Id:
  ID             { (fn _ => $1) }
  | VARREF       { (fn env => env $1) }
  | ID Id        { (fn env => $1 ^ $2 env) }
  | VARREF Id    { (fn env => env $1 ^ $2 env) }


SomeIdlist: NEWLINE { [] } | Idlist { $1 }

Idlist:  /* non-empty sequence of ids terminated by newline */
     Id NEWLINE { [$1] }
   | Id NoNLWhitespace NEWLINE { [$1] }
   | Id NoNLWhitespace Idlist { $1 :: $3 }

Commlist:
     /* empty */ { [] }
   | TAB Idlist Commlist { $2 :: $3 }
   | TAB NoNLWhitespace Idlist Commlist { $3 :: $4 }

SomeWhitespace:
     SomeWhitespace NEWLINE  { () }
   | SomeWhitespace TAB      { () }
   | SomeWhitespace WS       { () }
   | NEWLINE                 { () }
   | TAB                     { () }
   | WS                      { () }

NoNLWhitespace:
    TAB { () }
  | WS  { () }
  | NoNLWhitespace TAB { () }
  | NoNLWhitespace WS { () }

AnyNoNLWhitespace:
  /* empty */ { () }
  | NoNLWhitespace { () }

%%

(* Local variables: *)
(* mode: sml *)
(* end: *)