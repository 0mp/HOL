Getting and Building the Hol98 system (Working Version).
---------------------------------------------------------

Get the Hol98 sources by WWW from

     http://www.cl.cam.ac.uk/ftp/hvg/hol98/working.tar.gz

and the Moscow ML compiler (version 1.43 or greater) from

     http://www.dina.kvl.dk/~sestoft/mosml.html


Building the Hol98 system.
--------------------------

A. First, install Moscow ML. This is usually straightforward. The
   directory where it lives will be called <mosml-dir> in the following.

   [Notice that, if you intend to use ML embeddings of C libraries, 
    like the Robdd library, you are so far restricted to running on Linux,
    Solaris, and OSF/1. Furthermore, you may have to set a few shell
    variables in order to use C libraries; this is explained in the
    MoscowML installation directions.]


B. Unpack Hol98 with the commands

       gunzip working.tar.gz; tar xf working.tar

   in Unix, or the appropriate clicking activity in Windows NT. The
   resulting directory will be called <hol-dir> in the following.  When
   fully built, <hol-dir> takes approximately 35M of disk space, so be
   sure you have enough before starting.  


C. Enter the "tools" directory and edit the file "configure.sml". 

    (1) You must supply values for the following parameters:

            val mosmldir =
            val holdir   = 

        Both values must be absolute (full) pathnames. For example, my
        local setup has 

            val mosmldir = "/home/kxs/mosml";
            val holdir   = "/home/kxs/hol98";

    (2) The following parameter tells the build procedure what operating
        system is being used. 

            val OS = 

        The current choices for this are: "linux", "solaris", and "winNT".  
        If you are on a unix operating system that is not Linux or
        Solaris, it is OK to just put "unix"; however, this will imply
        that the robdd library will not be usable (it currently only
        builds on linux and solaris).

    (3) The following parameter gives the path to a C compiler, which is
        used to compile the quotation preprocessor.

           val CC = "gcc";

        This parameter may need to be changed, if "gcc" is not on your
        machine, or can't be found along your path.

    (4) The following parameter gives the path to the "gnumake" program,
        which is required to build the robdd library. 

           val GNUMAKE = "gnumake";

        If you are building Hol98 on an OS that is *not* Solaris or
        Linux, the robdd library is not currently accessible. In such a
        case, the value of GNUMAKE does not matter. 
 

    (5) The following parameter gives the name of the local directory
        that Holmake uses to store its dependencies in. On Unix and
        WindowsNT, this name does not have to be changed.

           val DEPDIR = ".HOLMK";


D. Perform the following 2 shell commands:

       <mosml-dir>/bin/mosml < configure.sml

       <hol-dir>/bin/build

   The first command establishes some pathnames and the like; the
   second actually builds the system. In case of difficulty, the
   configuration can be gone through by hand, by starting 
   <mosmldir>/bin/mosml and stepping through tools/configure.sml. 
   Similarly, the execution of build.sml can also be stepped through 
   in MoscowML. This can be somewhat time-consuming, but will help
   pinpoint any problems. 


E. If bin/build completes, successfully, you are done. From <hol-dir>
   you can now access 

      bin/hol           * The standard Hol98 interactive system; 
      bin/hol.unquote   * The interactive system with quote preprocessing;
      bin/Holmake       * A batch compiler for HOL directories;
      doc/man.ps        * A user manual for the system;
      examples/         * Examples of the use of the system.



Dealing with failure.
---------------------

   * Send a message to hol-support@cl.cam.ac.uk giving a full transcript of
     the failed installation, including details of the hardware and OS (and
     also the version of MoscowML being used).

   * If a build attempt fails for some reason, you should attempt to invoke 

        bin/build -cleanAll

     before a new build attempt.
